version: '3.8'

# Simplified Docker Compose for Ubuntu 22.04 deployment
# Optimized for easier deployment and maintenance

networks:
  echotune-network:
    driver: bridge

volumes:
  mongodb-data:
    driver: local
  redis-data:
    driver: local

services:
  # Main EchoTune AI application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: echotune-app
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      - DOMAIN=${DOMAIN:-localhost}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongodb:27017/echotune}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - SESSION_SECRET=${SESSION_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - SPOTIFY_REDIRECT_URI=${SPOTIFY_REDIRECT_URI}
      - DEFAULT_LLM_PROVIDER=${DEFAULT_LLM_PROVIDER:-mock}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - redis
    networks:
      - echotune-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB database
  mongodb:
    image: mongo:7.0-jammy
    container_name: echotune-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD:-changeme}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE:-echotune}
    volumes:
      - mongodb-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - echotune-network
    command: >
      mongod 
      --auth 
      --bind_ip_all 
      --quiet
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis cache and session store
  redis:
    image: redis:7.2-alpine
    container_name: echotune-redis
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-changeme}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - echotune-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-changeme}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # nginx reverse proxy (optional - can be disabled for direct access)
  nginx:
    image: nginx:alpine
    container_name: echotune-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - echotune-network
    profiles:
      - nginx  # Optional service, enable with --profile nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s