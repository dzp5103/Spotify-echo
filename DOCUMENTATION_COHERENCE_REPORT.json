{
  "timestamp": "2025-08-08T19:38:33.540Z",
  "summary": {
    "totalDocsAnalyzed": 51,
    "inconsistencies": 0,
    "missingFeatures": 0,
    "outdatedInfo": 0,
    "brokenLinks": 81
  },
  "analysis": {
    "environmentVariables": {
      "documented": [
        "DIGITALOCEAN_ACCESS_TOKEN",
        "DO_REGISTRY_TOKEN",
        "SPOTIFY_CLIENT_ID",
        "SPOTIFY_CLIENT_SECRET",
        "SESSION_SECRET",
        "JWT_SECRET",
        "DOCKER_HUB_USERNAME",
        "DOCKER_HUB_TOKEN",
        "SPOTIFY_REDIRECT_URI",
        "OPENAI_API_KEY",
        "OPENAI_MODEL",
        "GEMINI_API_KEY",
        "GEMINI_MODEL",
        "ANTHROPIC_API_KEY",
        "ANTHROPIC_MODEL",
        "MONGODB_URI",
        "SUPABASE_URL",
        "SUPABASE_ANON_KEY",
        "NODE_ENV",
        "REDIS_URL",
        "CACHE_ENABLED",
        "RATE_LIMIT_ENABLED",
        "GITHUB_PAT",
        "BROWSERBASE_API_KEY",
        "BROWSERBASE_PROJECT_ID",
        "BRAVE_API_KEY",
        "DATABASE_URL",
        "DEFAULT_LLM_PROVIDER",
        "CUSTOM_API_KEY",
        "BROWSERBASE_SESSION_ID",
        "MCP_SERVER_PORT",
        "LLM_PROVIDER",
        "ENABLE_PERFORMANCE_MONITORING",
        "PERFORMANCE_METRICS_INTERVAL",
        "CACHE_REDIS_URL",
        "CACHE_DEFAULT_TTL",
        "SECURITY_RATE_LIMIT_ENABLED",
        "SECURITY_IP_BLOCKING_ENABLED",
        "SECURITY_SUSPICIOUS_ACTIVITY_THRESHOLD",
        "HEALTH_CHECK_INTERVAL",
        "HEALTH_CHECK_TIMEOUT",
        "MONGODB_DATABASE",
        "MONGODB_COLLECTION",
        "SUPABASE_SERVICE_ROLE_KEY",
        "DATABASE_NAME",
        "COLLECTION_NAME",
        "SUPABASE_KEY",
        "DIGITALOCEAN_IP_PRIMARY",
        "DIGITALOCEAN_IP_RESERVED",
        "SSL_CERT_PATH",
        "SSL_KEY_PATH",
        "LETSENCRYPT_EMAIL",
        "PUPPETEER_SKIP_CHROMIUM_DOWNLOAD",
        "PUPPETEER_EXECUTABLE_PATH",
        "PLAYWRIGHT_BROWSERS_PATH",
        "FRONTEND_URL",
        "YOUR_SERVER_IP_ADDRESS",
        "YOUR_SERVER_IP",
        "PRIMARY_IP",
        "DO_API_TOKEN",
        "GH_PAT",
        "GITHUB_TOKEN",
        "EXCLUDE_DEV_DEPS",
        "EXCLUDE_CODING_AGENTS",
        "EXCLUDE_HEAVY_ML",
        "EXCLUDE_BROWSER_AUTOMATION",
        "MINIMAL_INSTALL",
        "LOG_LEVEL",
        "VERBOSE_LOGGING",
        "PUPPETEER_HEADLESS",
        "BACKEND_HOST",
        "BACKEND_PORT",
        "API_RATE_LIMIT",
        "AUTH_RATE_LIMIT",
        "GENERAL_RATE_LIMIT",
        "MAX_REQUEST_SIZE",
        "BACKUP_DIR",
        "DOCKERHUB_USERNAME",
        "DOCKERHUB_TOKEN",
        "ALERT_EMAIL",
        "REDIS_PASSWORD",
        "DO_DATABASE_URL",
        "SMTP_HOST",
        "SMTP_USER",
        "SMTP_PASS",
        "SLACK_WEBHOOK",
        "REMOTE_BACKUP",
        "AWS_S3_BUCKET",
        "AWS_REGION",
        "REMOTE_BACKUP_PATH",
        "CACHE_TTL",
        "SPOTIFY_API_CACHE_TTL",
        "KEEP_ALIVE_TIMEOUT",
        "DIGITALOCEAN_APP_ID",
        "DO_REGISTRY_NAMESPACE",
        "YOUTUBE_API_KEY",
        "INFLUXDB_TOKEN",
        "LANGFUSE_PUBLIC_KEY",
        "LANGFUSE_SECRET_KEY",
        "GOOGLE_API_KEY",
        "GITHUB_APP_PRIVATE_KEY",
        "GITHUB_APP_ID",
        "DROPLET_SSH_KEY",
        "DROPLET_IP",
        "DOCKER_USERNAME",
        "DOCKER_PASSWORD",
        "HELMET_ENABLED",
        "CORS_ORIGIN",
        "HEALTH_URL",
        "ALLOWED_DIRECTORIES",
        "PUPPETEER_ARGS",
        "MCP_SEQUENTIAL_THINKING_ENABLED",
        "MCP_GITHUB_ENABLED",
        "MCP_FILESYSTEM_ENABLED",
        "MCP_SQLITE_ENABLED",
        "MCP_MEMORY_ENABLED",
        "MCP_POSTGRES_ENABLED",
        "MCP_BRAVE_SEARCH_ENABLED",
        "MCP_SCREENSHOT_WEBSITE_ENABLED",
        "MCP_BROWSERBASE_ENABLED",
        "MCP_MERMAID_ENABLED",
        "MCP_BROWSER_ENABLED",
        "MCP_SPOTIFY_ENABLED"
      ],
      "implemented": [
        "DEFAULT_LLM_PROVIDER",
        "DEFAULT_LLM_MODEL",
        "OPENAI_API_KEY",
        "GEMINI_API_KEY",
        "ANTHROPIC_API_KEY",
        "OPENROUTER_API_KEY",
        "FRONTEND_URL",
        "MONGODB_URI",
        "MONGODB_DATABASE",
        "DATABASE_PATH",
        "NODE_ENV",
        "SPOTIFY_CLIENT_ID",
        "SPOTIFY_CLIENT_SECRET",
        "OPENAI_MODEL",
        "GEMINI_MODEL",
        "AZURE_OPENAI_API_KEY",
        "AZURE_OPENAI_ENDPOINT",
        "AZURE_OPENAI_DEPLOYMENT",
        "OPENROUTER_MODEL",
        "REDIS_URL",
        "SSL_ENABLED",
        "COMPRESSION",
        "METRICS_ENABLED",
        "ENABLE_ANALYTICS_DASHBOARD",
        "AZURE_CLIENT_ID",
        "AZURE_CLIENT_SECRET",
        "PORT",
        "HOST",
        "MAX_REQUEST_SIZE",
        "CORS_ORIGINS",
        "RATE_LIMIT_WINDOW_MS",
        "RATE_LIMIT_MAX_REQUESTS",
        "AUTH_RATE_LIMIT_MAX",
        "SESSION_SECRET",
        "LOG_LEVEL",
        "LOG_FILE",
        "ACCESS_LOG_FILE",
        "REDIS_PASSWORD",
        "CACHE_TTL",
        "SPOTIFY_API_CACHE_TTL",
        "CLUSTERING",
        "WORKERS",
        "ENABLE_RECOMMENDATIONS",
        "ENABLE_PLAYLIST_CREATION",
        "ENABLE_USER_ANALYTICS",
        "ENABLE_CHAT_HISTORY",
        "BACKUP_ENABLED",
        "BACKUP_SCHEDULE",
        "BACKUP_RETENTION_DAYS",
        "SUPABASE_URL",
        "SUPABASE_ANON_KEY",
        "MONGODB_MAX_POOL_SIZE",
        "MONGODB_MIN_POOL_SIZE",
        "MONGODB_MAX_IDLE_TIME",
        "MONGODB_CONNECT_TIMEOUT",
        "MONGODB_SOCKET_TIMEOUT",
        "MONGODB_DB_NAME",
        "MONGODB_COLLECTIONS_PREFIX",
        "DOMAIN",
        "SPOTIFY_REDIRECT_URI",
        "SSL_CERT_PATH",
        "MCP_URL",
        "REDIS_USERNAME",
        "REDIS_KEY_PREFIX",
        "REDIS_DEFAULT_TTL",
        "REDIS_MAX_RETRIES",
        "REDIS_CONNECT_TIMEOUT",
        "TAKE_SCREENSHOTS",
        "BROWSERBASE_API_KEY",
        "BROWSERBASE_PROJECT_ID",
        "MCP_SERVER_PORT",
        "DEBUG",
        "BASE_URL",
        "CACHE_AUDIO_FEATURES_TTL",
        "CACHE_RECOMMENDATIONS_TTL",
        "CACHE_USER_PROFILES_TTL",
        "CACHE_SPOTIFY_API_TTL",
        "GH_PAT",
        "GITHUB_TOKEN",
        "CI",
        "DATABASE_URL",
        "DIGITALOCEAN_TOKEN",
        "BUILD_ID",
        "COMMIT_SHA",
        "SCREENSHOT_WEBSITE_PORT",
        "ANTHROPIC_MODEL",
        "GITHUB_PAT",
        "BRAVE_API_KEY",
        "YOUTUBE_API_KEY",
        "BROWSERBASE_SESSION_ID",
        "INFLUXDB_URL",
        "INFLUXDB_TOKEN",
        "LANGFUSE_PUBLIC_KEY",
        "LANGFUSE_SECRET_KEY",
        "MCP_SERVER_HOST",
        "MCP_TIMEOUT",
        "ENABLE_MCP_LOGGING",
        "SSL_KEY_PATH",
        "SSL_CHAIN_PATH",
        "SSL_EMAIL",
        "DOCKER_HUB_USERNAME",
        "DOCKER_HUB_TOKEN",
        "DOCKER_REGISTRY",
        "DOCKER_REPOSITORY",
        "SQLITE_DB_PATH",
        "ENABLE_SQLITE_FALLBACK",
        "ENABLE_DATABASE_ANALYTICS",
        "DATABASE_BACKUP_ENABLED",
        "JWT_SECRET",
        "ENABLE_SECURITY_HEADERS",
        "FORCE_HTTPS",
        "SCREENSHOT_DIR",
        "PUPPETEER_HEADLESS"
      ],
      "missing": [
        "DIGITALOCEAN_ACCESS_TOKEN",
        "DO_REGISTRY_TOKEN",
        "CACHE_ENABLED",
        "RATE_LIMIT_ENABLED",
        "CUSTOM_API_KEY",
        "LLM_PROVIDER",
        "ENABLE_PERFORMANCE_MONITORING",
        "PERFORMANCE_METRICS_INTERVAL",
        "CACHE_REDIS_URL",
        "CACHE_DEFAULT_TTL",
        "SECURITY_RATE_LIMIT_ENABLED",
        "SECURITY_IP_BLOCKING_ENABLED",
        "SECURITY_SUSPICIOUS_ACTIVITY_THRESHOLD",
        "HEALTH_CHECK_INTERVAL",
        "HEALTH_CHECK_TIMEOUT",
        "MONGODB_COLLECTION",
        "SUPABASE_SERVICE_ROLE_KEY",
        "DATABASE_NAME",
        "COLLECTION_NAME",
        "SUPABASE_KEY",
        "DIGITALOCEAN_IP_PRIMARY",
        "DIGITALOCEAN_IP_RESERVED",
        "LETSENCRYPT_EMAIL",
        "PUPPETEER_SKIP_CHROMIUM_DOWNLOAD",
        "PUPPETEER_EXECUTABLE_PATH",
        "PLAYWRIGHT_BROWSERS_PATH",
        "YOUR_SERVER_IP_ADDRESS",
        "YOUR_SERVER_IP",
        "PRIMARY_IP",
        "DO_API_TOKEN",
        "EXCLUDE_DEV_DEPS",
        "EXCLUDE_CODING_AGENTS",
        "EXCLUDE_HEAVY_ML",
        "EXCLUDE_BROWSER_AUTOMATION",
        "MINIMAL_INSTALL",
        "VERBOSE_LOGGING",
        "BACKEND_HOST",
        "BACKEND_PORT",
        "API_RATE_LIMIT",
        "AUTH_RATE_LIMIT",
        "GENERAL_RATE_LIMIT",
        "BACKUP_DIR",
        "DOCKERHUB_USERNAME",
        "DOCKERHUB_TOKEN",
        "ALERT_EMAIL",
        "DO_DATABASE_URL",
        "SMTP_HOST",
        "SMTP_USER",
        "SMTP_PASS",
        "SLACK_WEBHOOK",
        "REMOTE_BACKUP",
        "AWS_S3_BUCKET",
        "AWS_REGION",
        "REMOTE_BACKUP_PATH",
        "KEEP_ALIVE_TIMEOUT",
        "DIGITALOCEAN_APP_ID",
        "DO_REGISTRY_NAMESPACE",
        "GOOGLE_API_KEY",
        "GITHUB_APP_PRIVATE_KEY",
        "GITHUB_APP_ID",
        "DROPLET_SSH_KEY",
        "DROPLET_IP",
        "DOCKER_USERNAME",
        "DOCKER_PASSWORD",
        "HELMET_ENABLED",
        "CORS_ORIGIN",
        "HEALTH_URL",
        "ALLOWED_DIRECTORIES",
        "PUPPETEER_ARGS",
        "MCP_SEQUENTIAL_THINKING_ENABLED",
        "MCP_GITHUB_ENABLED",
        "MCP_FILESYSTEM_ENABLED",
        "MCP_SQLITE_ENABLED",
        "MCP_MEMORY_ENABLED",
        "MCP_POSTGRES_ENABLED",
        "MCP_BRAVE_SEARCH_ENABLED",
        "MCP_SCREENSHOT_WEBSITE_ENABLED",
        "MCP_BROWSERBASE_ENABLED",
        "MCP_MERMAID_ENABLED",
        "MCP_BROWSER_ENABLED",
        "MCP_SPOTIFY_ENABLED"
      ],
      "obsolete": [
        "DEFAULT_LLM_MODEL",
        "OPENROUTER_API_KEY",
        "DATABASE_PATH",
        "AZURE_OPENAI_API_KEY",
        "AZURE_OPENAI_ENDPOINT",
        "AZURE_OPENAI_DEPLOYMENT",
        "OPENROUTER_MODEL",
        "SSL_ENABLED",
        "COMPRESSION",
        "METRICS_ENABLED",
        "ENABLE_ANALYTICS_DASHBOARD",
        "AZURE_CLIENT_ID",
        "AZURE_CLIENT_SECRET",
        "PORT",
        "HOST",
        "CORS_ORIGINS",
        "RATE_LIMIT_WINDOW_MS",
        "RATE_LIMIT_MAX_REQUESTS",
        "AUTH_RATE_LIMIT_MAX",
        "LOG_FILE",
        "ACCESS_LOG_FILE",
        "CLUSTERING",
        "WORKERS",
        "ENABLE_RECOMMENDATIONS",
        "ENABLE_PLAYLIST_CREATION",
        "ENABLE_USER_ANALYTICS",
        "ENABLE_CHAT_HISTORY",
        "BACKUP_ENABLED",
        "BACKUP_SCHEDULE",
        "BACKUP_RETENTION_DAYS",
        "MONGODB_MAX_POOL_SIZE",
        "MONGODB_MIN_POOL_SIZE",
        "MONGODB_MAX_IDLE_TIME",
        "MONGODB_CONNECT_TIMEOUT",
        "MONGODB_SOCKET_TIMEOUT",
        "MONGODB_DB_NAME",
        "MONGODB_COLLECTIONS_PREFIX",
        "DOMAIN",
        "MCP_URL",
        "REDIS_USERNAME",
        "REDIS_KEY_PREFIX",
        "REDIS_DEFAULT_TTL",
        "REDIS_MAX_RETRIES",
        "REDIS_CONNECT_TIMEOUT",
        "TAKE_SCREENSHOTS",
        "DEBUG",
        "BASE_URL",
        "CACHE_AUDIO_FEATURES_TTL",
        "CACHE_RECOMMENDATIONS_TTL",
        "CACHE_USER_PROFILES_TTL",
        "CACHE_SPOTIFY_API_TTL",
        "CI",
        "DIGITALOCEAN_TOKEN",
        "BUILD_ID",
        "COMMIT_SHA",
        "SCREENSHOT_WEBSITE_PORT",
        "INFLUXDB_URL",
        "MCP_SERVER_HOST",
        "MCP_TIMEOUT",
        "ENABLE_MCP_LOGGING",
        "SSL_CHAIN_PATH",
        "SSL_EMAIL",
        "DOCKER_REGISTRY",
        "DOCKER_REPOSITORY",
        "SQLITE_DB_PATH",
        "ENABLE_SQLITE_FALLBACK",
        "ENABLE_DATABASE_ANALYTICS",
        "DATABASE_BACKUP_ENABLED",
        "ENABLE_SECURITY_HEADERS",
        "FORCE_HTTPS",
        "SCREENSHOT_DIR"
      ]
    },
    "apiEndpoints": {
      "documented": [
        "/settings",
        "/health",
        "/api/health",
        "/api/recommendations/${userId}",
        "/docs/architecture/",
        "/docs/deployment/",
        "/docs/api/",
        "/docs/guides/",
        "/docs/reports/",
        "/servers",
        "/diagrams/generate",
        "/files/analyze",
        "/browser/automate",
        "/test/comprehensive",
        "/spotify/test",
        "/api/performance",
        "/api/performance/realtime",
        "/api/cache/stats",
        "/api/cache/clear",
        "/api/security/stats",
        "/api/security/block-ip",
        "/api/security/unblock-ip",
        "/api/v2/endpoint",
        "/opt/echotune/.env",
        "/opt/echotune/logs/",
        "/opt/echotune/nginx/logs/",
        "/var/log/",
        "/health/application",
        "/health/database",
        "/ready",
        "/alive",
        "/opt/echotune/ENVIRONMENT_SETUP.md",
        "/opt/echotune/app",
        "/opt/echotune/ERROR_ANALYSIS_REPORT.md",
        "/opt/echotune/logs/app.log",
        "/opt/echotune/logs/error.log",
        "/opt/echotune/logs/nginx-access.log",
        "/opt/echotune/logs/nginx-error.log",
        "/opt/echotune/DEPLOYMENT_STATUS.json",
        "/usr/local/bin",
        "/chat",
        "/dashboard",
        "/var/log/nginx/",
        "/opt/echotune/",
        "/etc/nginx/sites-available/echotune",
        "/etc/letsencrypt/live/your-domain.com/",
        "/opt/echotune/.env.production",
        "/health/system",
        "/health/ssl",
        "/opt/echotune/metrics/",
        "/opt/echotune/backups/",
        "/health/:component",
        "/review-docs",
        "/create-api-docs",
        "/create-architecture",
        "/create-contributing",
        "/help",
        "/create-openapi",
        "/create-security-guide",
        "/analyze-code",
        "/optimize-performance",
        "/deploy-staging",
        "/run-tests",
        "/analyze-music-data",
        "/generate-ml-report",
        "/api/prompts",
        "/api/prompts/execute",
        "/api/prompts/test"
      ],
      "implemented": [
        "/advanced",
        "/llm",
        "/llm/test",
        "/database/insights",
        "/health/detailed",
        "/health",
        "/health/ready",
        "/health/live",
        "/health/database",
        "/health/spotify",
        "/health/ai",
        "/health/metrics",
        "/health/config",
        "/overview",
        "/collections",
        "/users",
        "/music",
        "/performance",
        "/comprehensive",
        "/dashboard",
        "/realtime",
        "/export",
        "/track-event",
        "/start",
        "/message",
        "/stream",
        "/history/:sessionId",
        "/providers",
        "/provider",
        "/export/:sessionId",
        "/stats",
        "/feedback",
        "/context-chips",
        "/test",
        "/status",
        "/init-fallback",
        "/user",
        "/listening-history",
        "/recommendations",
        "/analytics",
        "/info",
        "/generate",
        "/download/:method",
        "/guides/:method",
        "/",
        "/history",
        "/llm-providers",
        "/llm-providers/:provider/test",
        "/llm-providers/models/:provider",
        "/llm-providers/status",
        "/discover",
        "/trending",
        "/social/activity",
        "/create-smart",
        "/auto-generate",
        "/enhance",
        "/suggestions",
        "/create",
        "/:playlistId/tracks",
        "/user/:userId",
        "/:playlistId",
        "/providers/:providerId/models",
        "/models/search",
        "/providers/:providerId/models/:modelId",
        "/providers/:providerId/validate",
        "/features",
        "/levels",
        "/settings-data",
        "/context-aware",
        "/learn",
        "/mood/:mood",
        "/activity/:activity",
        "/similar",
        "/playlist",
        "/:id/explain",
        "/insights",
        "/schema",
        "/current",
        "/update",
        "/test-provider",
        "/config",
        "/mobile",
        "/generate-secret",
        "/audio-features/:trackId",
        "/audio-features/batch",
        "/track/:trackId",
        "/tracks/batch",
        "/process-history",
        "/cached-features",
        "/missing-features",
        "/clear-cache",
        "/upload-csv",
        "/versions",
        "/metrics",
        "/api/performance",
        "/api/cache/stats",
        "/api/security/stats",
        "/health/:check",
        "/ready",
        "/alive",
        "/legacy",
        "/auth/spotify",
        "/auth/callback",
        "/api/spotify/recommendations",
        "/api/spotify/playlist",
        "/api/chat"
      ],
      "missing": [
        "/api/health",
        "/api/recommendations/${userId}",
        "/docs/architecture/",
        "/docs/deployment/",
        "/docs/api/",
        "/docs/guides/",
        "/docs/reports/",
        "/servers",
        "/diagrams/generate",
        "/files/analyze",
        "/browser/automate",
        "/test/comprehensive",
        "/spotify/test",
        "/api/performance/realtime",
        "/api/cache/clear",
        "/api/security/block-ip",
        "/api/security/unblock-ip",
        "/api/v2/endpoint",
        "/opt/echotune/.env",
        "/opt/echotune/logs/",
        "/opt/echotune/nginx/logs/",
        "/var/log/",
        "/health/application",
        "/opt/echotune/ENVIRONMENT_SETUP.md",
        "/opt/echotune/app",
        "/opt/echotune/ERROR_ANALYSIS_REPORT.md",
        "/opt/echotune/logs/app.log",
        "/opt/echotune/logs/error.log",
        "/opt/echotune/logs/nginx-access.log",
        "/opt/echotune/logs/nginx-error.log",
        "/opt/echotune/DEPLOYMENT_STATUS.json",
        "/usr/local/bin",
        "/var/log/nginx/",
        "/opt/echotune/",
        "/etc/nginx/sites-available/echotune",
        "/etc/letsencrypt/live/your-domain.com/",
        "/opt/echotune/.env.production",
        "/health/system",
        "/health/ssl",
        "/opt/echotune/metrics/",
        "/opt/echotune/backups/",
        "/health/:component",
        "/review-docs",
        "/create-api-docs",
        "/create-architecture",
        "/create-contributing",
        "/help",
        "/create-openapi",
        "/create-security-guide",
        "/analyze-code",
        "/optimize-performance",
        "/deploy-staging",
        "/run-tests",
        "/analyze-music-data",
        "/generate-ml-report",
        "/api/prompts",
        "/api/prompts/execute",
        "/api/prompts/test"
      ],
      "obsolete": [
        "/advanced",
        "/llm",
        "/llm/test",
        "/database/insights",
        "/overview",
        "/collections",
        "/users",
        "/music",
        "/performance",
        "/comprehensive",
        "/realtime",
        "/export",
        "/track-event",
        "/start",
        "/message",
        "/stream",
        "/history/:sessionId",
        "/providers",
        "/provider",
        "/export/:sessionId",
        "/stats",
        "/feedback",
        "/context-chips",
        "/test",
        "/status",
        "/init-fallback",
        "/user",
        "/listening-history",
        "/recommendations",
        "/analytics",
        "/info",
        "/generate",
        "/download/:method",
        "/guides/:method",
        "/",
        "/history",
        "/llm-providers",
        "/llm-providers/:provider/test",
        "/llm-providers/models/:provider",
        "/llm-providers/status",
        "/discover",
        "/trending",
        "/social/activity",
        "/create-smart",
        "/auto-generate",
        "/enhance",
        "/suggestions",
        "/create",
        "/:playlistId/tracks",
        "/user/:userId",
        "/:playlistId",
        "/providers/:providerId/models",
        "/models/search",
        "/providers/:providerId/models/:modelId",
        "/providers/:providerId/validate",
        "/features",
        "/levels",
        "/context-aware",
        "/learn",
        "/mood/:mood",
        "/activity/:activity",
        "/similar",
        "/playlist",
        "/:id/explain",
        "/insights",
        "/schema",
        "/current",
        "/update",
        "/test-provider",
        "/config",
        "/mobile",
        "/generate-secret",
        "/audio-features/:trackId",
        "/audio-features/batch",
        "/track/:trackId",
        "/tracks/batch",
        "/process-history",
        "/cached-features",
        "/missing-features",
        "/clear-cache",
        "/upload-csv",
        "/versions",
        "/metrics",
        "/legacy",
        "/auth/spotify",
        "/auth/callback",
        "/api/spotify/recommendations",
        "/api/spotify/playlist"
      ]
    },
    "features": {
      "documented": [
        "🎵 EchoTune AI - Next-Generation Music Discovery Platform",
        "🚀 **NEW: Enhanced MCP Server Ecosystem**",
        "**🤖 Community MCP Servers Integrated**",
        "**🛠️ Existing MCP Infrastructure**",
        "⭐ Revolutionary Features",
        "🤖 **Advanced AI Integration**",
        "🎵 **Smart Music Discovery**",
        "📊 **Comprehensive Analytics Dashboard**",
        "⚙️ **Advanced Configuration System**",
        "🔧 **MCP Server Ecosystem**",
        "📱 **Mobile & Performance Optimization**",
        "🛡️ **Production-Grade Security**",
        "🤖 **MCP-Powered Development Workflow** ⭐ NEW",
        "🚀 Quick Start",
        "⚡ Ubuntu 22.04 One-Click Deployment (NEW)",
        "Interactive setup with domain and SSL configuration",
        "Or with parameters",
        "⚡ DigitalOcean Deployment",
        "🐳 Docker Deployment",
        "Complete Ubuntu 22.04 setup including Docker installation",
        "Use Ubuntu 22.04 optimized configuration",
        "Open http://localhost:3000",
        "Pull and run from Docker Hub",
        "Username: your_docker_username",
        "Password: your_docker_password_or_token",
        "Method 1: Using doctl",
        "Method 2: Manual login",
        "Create GitHub token with packages:read and packages:write scopes",
        "One-click deployment (includes Docker setup for Ubuntu 22.04)",
        "Open http://localhost",
        "Complete setup including Docker installation (following DigitalOcean tutorial)",
        "🐳 Docker Hub Credentials Setup",
        "🚨 Docker Troubleshooting",
        "💻 Local Development",
        "🛠️ Management Commands",
        "Service management",
        "Docker management",
        "🏗️ Architecture",
        "Technology Stack",
        "MCP Server Ecosystem 🤖",
        "Project Structure",
        "🤖 AI & Machine Learning Features",
        "Recommendation Engine",
        "Conversational AI",
        "🚀 Production Deployment",
        "DigitalOcean GitHub Actions Workflow",
        "Available Scripts",
        "Deployment commands",
        "Security & Performance Features",
        "⚙️ Configuration Management",
        "🚀 **Enhanced Advanced Settings Interface**",
        "**🤖 Multi-Provider LLM Configuration**",
        "**🗄️ Database Insights Dashboard**",
        "**📊 System Health Monitor**",
        "🖥️ **Basic Web Configuration Interface**",
        "📱 Mobile Optimization Features",
        "🔧 MCP Server Management",
        "📊 Real-time System Monitoring",
        "📚 Documentation",
        "🔧 Workflow Configuration",
        "GitHub Secrets Required",
        "DigitalOcean Configuration",
        "Spotify API",
        "Security",
        "AI/LLM (Optional)",
        "Workflow Features",
        "Troubleshooting Common Issues",
        "🔧 Development",
        "Prerequisites",
        "Clone and install",
        "Configure environment",
        "Edit .env with your API keys",
        "Development server",
        "📊 Project Status",
        "✅ Completed Features",
        "🚧 In Development",
        "🗺️ Development Roadmap",
        "Phase 1: Core Foundation ✅ COMPLETED",
        "Phase 2: Enhanced Intelligence 🚧 IN PROGRESS",
        "Phase 3: Social & Collaborative Features 📋 PLANNED",
        "Phase 4: Enterprise & Scale 📋 PLANNED",
        "Phase 5: Innovation & Research 💡 VISION",
        "🔐 Authentication & API Configuration",
        "🚀 Quick Authentication Test",
        "📊 Current Deployment Status",
        "🤖 MCP Server Ecosystem Usage",
        "**🚀 Quick MCP Commands**",
        "Test all community MCP servers",
        "Run individual MCP servers",
        "Start the MCP orchestrator (manages all servers)",
        "**📦 Package Management Server**",
        "Check for outdated packages and security vulnerabilities",
        "Example capabilities:",
        "- Check package versions across npm/pip ecosystems",
        "- Security audit with vulnerability detection",
        "- Generate update commands with risk assessment",
        "- Validate EchoTune-specific dependencies",
        "**🔒 Code Sandbox Server**",
        "Execute and validate code in isolated environment",
        "- Execute JavaScript, TypeScript, Python securely",
        "- Validate EchoTune code patterns and best practices",
        "- Test API endpoints with mock scenarios",
        "- Grade code quality with recommendations",
        "**📊 Analytics & Telemetry Server**",
        "Monitor system performance and user analytics",
        "- Track custom events and user behavior",
        "- Generate performance metrics and reports",
        "- A/B testing analysis with statistical significance",
        "- System health monitoring with alerts",
        "**🧪 Testing Automation Server**",
        "Run comprehensive automated testing",
        "- Unit, integration, API, and UI testing",
        "- Performance testing with load simulation",
        "- Security testing and vulnerability scanning",
        "- Generate detailed test reports in multiple formats",
        "**🎯 MCP Workflow Examples**",
        "Comprehensive validation workflow",
        "This workflow:",
        "1. Validates all dependencies and security",
        "2. Executes code validation and testing",
        "3. Monitors performance metrics",
        "4. Generates comprehensive report",
        "Security and quality analysis",
        "1. Security audit of dependencies",
        "2. Code execution validation",
        "3. Analytics event tracking",
        "4. Detailed analysis report",
        "🎵 Music Services",
        "🤖 AI/LLM Providers",
        "📊 Database Services",
        "🚀 Deployment & Container Registries",
        "Current credentials (needs token refresh):",
        "Username: scapedote@outlook.com",
        "Token: dop_v1_afa7b76a55cca84f89f48986d212d8f2fc08de48872034eb7c8cc1ae0978d22e",
        "Get new token from: https://cloud.digitalocean.com/account/api/tokens",
        "Password: your_docker_password",
        "☁️ Cloud Services (Optional)",
        "Access Key ID: YOUR_ACCESS_KEY",
        "Secret Access Key: YOUR_SECRET_KEY",
        "Region: us-east-1",
        "🔧 Testing & Validation",
        "🛡️ Security Best Practices",
        "📋 Current Status",
        "🎯 Implementation Priorities",
        "Immediate Goals (Next 30 Days)",
        "Short-term Goals (Next 90 Days)",
        "Long-term Vision (Next 12 Months)",
        "💡 Feature Suggestions & Contributions",
        "For Users",
        "For Developers",
        "For Researchers",
        "Priority Feature Voting",
        "🤝 Contributing",
        "Quick Start for Contributors",
        "Fork and clone your fork",
        "Setup development environment",
        "Run tests before submitting",
        "Create feature branch and submit PR",
        "🆘 Troubleshooting",
        "Common Issues",
        "Getting Help",
        "❓ Frequently Asked Questions (FAQ)",
        "🚀 Deployment & Setup",
        "1. Check application logs",
        "2. Verify environment variables are set",
        "3. Test health endpoint manually",
        "4. Common fixes:",
        "- Ensure PORT=3000 is set in environment",
        "- Verify DOMAIN matches your actual domain",
        "- Check SPOTIFY_CLIENT_ID and SPOTIFY_CLIENT_SECRET are set",
        "Add user to docker group",
        "Restart Docker service",
        "Log out and back in, then test",
        "🐳 Docker & Container Issues",
        "1. Verify Docker installation",
        "2. Check if ports are already in use",
        "3. Verify Docker Compose syntax",
        "4. Check available resources",
        "1. Create access token at https://hub.docker.com/settings/security",
        "2. Store credentials safely (never in code!)",
        "3. Login and push",
        "🔑 API Keys & Authentication",
        "1. Go to https://developer.spotify.com/dashboard",
        "2. Create new app with these settings:",
        "- App name: Your App Name",
        "- App description: Music recommendation app",
        "- Redirect URI: https://your-domain.com/auth/callback",
        "- API/SDK: Web API",
        "3. Copy Client ID and Client Secret to your .env file",
        "🏥 Health Checks & Monitoring",
        "✅ REQUIRED (app won't start without these)",
        "⚠️ OPTIONAL (warnings OK, app still works)",
        "🌐 Network & SSL Issues",
        "1. Verify domain DNS points to server",
        "2. Check if port 80 is accessible (required for Let's Encrypt)",
        "3. Test certificate generation manually",
        "4. Check certificate status",
        "1. Check if application is listening on all interfaces",
        "Should show 0.0.0.0:3000, not 127.0.0.1:3000",
        "2. Check firewall rules",
        "3. For cloud servers, check security groups/firewall rules in provider dashboard",
        "🔧 Development & Contributing",
        "1. Clone and install dependencies",
        "2. Set up environment (minimal for development)",
        "Edit .env with:",
        "NODE_ENV=development",
        "PORT=3000",
        "3. Start development server",
        "App available at http://localhost:3000",
        "Run all tests",
        "Run specific test categories",
        "Run tests with coverage",
        "📄 License",
        "Third-Party Services",
        "🙏 Acknowledgments",
        "🌟 Support the Project",
        "🎯 Deployment Phase Checklist",
        "Phase 1: Foundation Infrastructure ✅ COMPLETED",
        "Phase 2: Settings & Configuration UI ✅ COMPLETED",
        "Phase 3: Testing & Validation Infrastructure ✅ COMPLETED",
        "Phase 4: Production Readiness ✅ COMPLETED",
        "Phase 5: Advanced Features ✅ COMPLETED",
        "Phase 6: MCP Server Full Automation ✅ COMPLETED (January 2025)",
        "🚀 Self-Configurable Platform Roadmap",
        "🎯 Goal: Fully Self-Configurable, Secure, and User-Friendly Platform",
        "Immediate Priorities (Next 30 Days)",
        "Medium-term Vision (Next 6 Months)",
        "🔧 Technical Implementation Progress",
        "Backend Infrastructure ✅ COMPLETED",
        "Frontend Interface ✅ IMPLEMENTED (Testing Required)",
        "Deployment & Operations ✅ COMPLETED",
        "📈 Success Metrics",
        "Configuration Simplicity",
        "Security Compliance",
        "User Experience",
        "Platform Reliability",
        "📋 Last Updated**: January 8, 2025 | **📦 Version**: 2.3.0 | **🚀 Status",
        "🎯 Production-Ready AI Music Discovery Platform",
        "NEW: Enhanced MCP Server Ecosystem",
        "comprehensive Model Context Protocol (MCP) server ecosystem** with **8+ integrated servers",
        "🤖 Community MCP Servers Integrated",
        "📦 Package Management Server",
        "🔒 Code Sandbox Server",
        "📊 Analytics & Telemetry Server",
        "🧪 Testing Automation Server",
        "🛠️ Existing MCP Infrastructure",
        "🎨 Mermaid Diagrams",
        "📁 Filesystem Operations",
        "🌐 Browser Automation",
        "🎵 Spotify Integration",
        "Advanced AI Integration",
        "Multi-Provider LLM Support",
        "Intelligent Music Conversations",
        "Context-Aware Recommendations",
        "Real-time Provider Testing",
        "Smart Music Discovery",
        "Spotify Integration",
        "Advanced Discovery Modes",
        "ML-Powered Recommendations",
        "Audio Feature Analysis",
        "Comprehensive Analytics Dashboard",
        "Live Database Insights",
        "Listening Pattern Analysis",
        "Performance Monitoring",
        "User Engagement Metrics",
        "Advanced Configuration System",
        "Enhanced Settings Interface",
        "LLM Provider Management",
        "Database Management Tools",
        "System Health Monitor",
        "MCP Server Ecosystem",
        "12 Fully Integrated Servers",
        "100% Automation Success Rate",
        "Real-time Validation",
        "Mobile & Performance Optimization",
        "Progressive Web App",
        "Device Intelligence",
        "Performance Modes",
        "Touch-Optimized Interface",
        "Production-Grade Security",
        "SSL/TLS Encryption",
        "API Security",
        "OAuth 2.0 Integration",
        "Data Protection",
        "MCP-Powered Development Workflow",
        "Automated Code Analysis",
        "Performance Testing",
        "Comprehensive Validation",
        "Security Auditing",
        "Testing Automation",
        "Package Management",
        "Get running in under 5 minutes",
        "DigitalOcean",
        "Docker",
        "Local Dev",
        "For Ubuntu 22.04 LTS servers - Complete automated setup:",
        "What this installs:",
        "[Complete Ubuntu 22.04 Guide →](docs/deployment/UBUNTU22_COMPLETE_GUIDE.md)",
        "🆕 Enhanced for Ubuntu 22.04!",
        "Automated GitHub Actions Deployment with Container Registry:",
        "Fork this repository",
        "Generate fresh DigitalOcean API token",
        "Delete all existing tokens first",
        "Full Access",
        "Quick DigitalOcean deployment",
        "New Ubuntu 22.04 Features:",
        "Automatic IP detection",
        "Smart SSL handling",
        "Enhanced security",
        "Production monitoring",
        "Set up DigitalOcean secrets",
        "Authenticate with DigitalOcean",
        "Test your authentication",
        "Push to main branch",
        "Monitor deployment",
        "⚠️ Current Issue",
        "One-Click Basic Deploy (Alternative):",
        "🆕 Enhanced Ubuntu 22.04 Support!",
        "Ultra-Simple One-Command Deployment (Ubuntu 22.04):",
        "Manual Docker Deployment:",
        "Docker Hub Image Available:",
        "Container Registry Authentication:",
        "Docker Hub:",
        "DigitalOcean Container Registry:",
        "GitHub Container Registry:",
        "Ultra-Simple One-Command Deployment:",
        "Ubuntu 22.04 with Docker Setup:",
        "🎬 [View Deployment Demo](scripts/deployment/deployment-demo.sh)",
        "[Enhanced Docker Guide](DOCKER_ENHANCED_GUIDE.md)",
        "For pushing to Docker Hub Container Registry:",
        "Create Docker Hub Access Token:",
        "Set up credentials in environment:",
        "Login and push:",
        "Important Security Notes:",
        "Never commit Docker Hub credentials to code",
        "Use GitHub Secrets or environment variables",
        "Use access tokens instead of passwords",
        "Limit token permissions to only what's needed",
        "Common Docker Build Issues:",
        "Build fails with permission errors:",
        "Health check failures (503 errors):",
        "Container won't start:",
        "Ubuntu Server Setup Issues:",
        "Docker installation fails:",
        "Firewall blocking connections:",
        "SSL certificate issues:",
        "Backend",
        "Frontend",
        "Database",
        "MCP Ecosystem",
        "Infrastructure",
        "Deployment",
        "Core Infrastructure Servers:",
        "GitHub MCP Server",
        "File System MCP Server",
        "SQLite/PostgreSQL MCP Servers",
        "Memory MCP Server",
        "Music Intelligence Servers:",
        "YouTube MCP Server",
        "Audio Analysis Server",
        "Web Search Server",
        "Development Automation:",
        "Browser Automation",
        "Webhook Processing",
        "🧠 Collaborative Filtering",
        "🎵 Content-Based Filtering",
        "🔮 Deep Learning",
        "📈 Real-time Learning",
        "💬 Natural Language Processing",
        "🎯 Mood Detection",
        "🔄 Multi-Provider Support",
        "📊 Analytics Integration",
        "🐳 Multi-Service Container Build",
        "📦 Container Registry Integration",
        "🔄 App Platform Deployment",
        "🛡️ Security Scanning",
        "📊 Health Monitoring",
        "⚡ Auto-Scaling",
        "Quick Setup:",
        "🔐 OAuth 2.0",
        "⚡ Rate Limiting",
        "🛡️ Input Validation",
        "🔒 SSL/TLS",
        "Enhanced Advanced Settings Interface",
        "`/settings`",
        "🤖 Multi-Provider LLM Configuration",
        "OpenAI Integration",
        "Google Gemini",
        "OpenRouter",
        "Real-time Testing",
        "🗄️ Database Insights Dashboard",
        "Live MongoDB Analytics",
        "Collection Management",
        "Interactive Tools",
        "📊 System Health Monitor",
        "Real-time Status",
        "Component Monitoring",
        "Performance Metrics",
        "Automated Validation",
        "Basic Web Configuration Interface",
        "General Settings",
        "Mobile & Responsive",
        "Device Detection",
        "Touch Optimization",
        "Responsive Controls",
        "Always Available",
        "Configurable",
        "Configuration Guide",
        "DigitalOcean Deployment",
        "Quick Start Guide",
        "Enhanced Docker Guide",
        "Ubuntu Deployment",
        "API Documentation",
        "Development Guide",
        "Database Architecture",
        "MCP Servers Guide",
        "🚀 Automatic Deployment",
        "🧪 Comprehensive Testing",
        "🐳 Multi-Container Build",
        "🔍 Security Scanning",
        "🔄 Reusable Templates",
        "Deployment Failures:",
        "Container Registry Issues:",
        "Application Issues:",
        "[Complete Troubleshooting Guide](DEPLOYMENT.md#--monitoring-and-troubleshooting)",
        "MCP Server Full Automation",
        "Strategic Workflow Optimization",
        "Automated Code Validation",
        "Status: 100% Complete",
        "Basic Music Recommendation Engine",
        "AI Chat Interface",
        "Production Infrastructure",
        "Status: 75% Complete",
        "Advanced ML Models",
        "Improved AI Conversations",
        "Real-time Analytics",
        "Mobile Progressive Web App",
        "Status: 0% Complete • Target: Q2 2025",
        "Social Music Discovery",
        "Collaborative Playlists",
        "Community Features",
        "Advanced Sharing",
        "Status: 0% Complete • Target: Q3 2025",
        "Enterprise Features",
        "Advanced Analytics",
        "Platform Integrations",
        "Scalability Enhancements",
        "Status: 0% Complete • Target: Q4 2025",
        "Cutting-Edge AI",
        "Emerging Technologies",
        "Research Initiatives",
        "Open Source Ecosystem",
        "Deployment Infrastructure Status:",
        "Docker & Docker Hub",
        "GitHub Container Registry",
        "AWS ECR, Azure ACR, Google GCR",
        "DigitalOcean Spaces",
        "DigitalOcean API Services",
        "Current Issue:",
        "OAuth Configuration Status:",
        "Localhost Development:",
        "Production Server:",
        "Spotify Redirect URIs:",
        "Action Required:",
        "Model Context Protocol (MCP) server ecosystem** with **8+ integrated servers",
        "🚀 Quick MCP Commands",
        "🎯 MCP Workflow Examples",
        "Full Project Validation:",
        "Code Analysis Workflow:",
        "OpenAI",
        "Anthropic Claude",
        "MongoDB Atlas",
        "Supabase",
        "Docker Hub",
        "Google Cloud",
        "Test individual services:",
        "Generate comprehensive report:",
        "Never commit secrets",
        "Rotate tokens regularly",
        "Use minimal permissions",
        "Monitor token usage",
        "Enable 2FA",
        "Working Services:",
        "Needs Configuration:",
        "Complete Setup Guide:",
        "Complete Phase 2 Analytics",
        "Mobile PWA Launch",
        "Performance Optimization",
        "Documentation Enhancement",
        "Social Features Beta",
        "Multi-platform Support",
        "Enhanced Security",
        "Enterprise Product",
        "Global Expansion",
        "Research Partnerships",
        "Open Source Community",
        "Feature Requests",
        "Bug Reports",
        "User Testing",
        "Feedback",
        "Code Contributions",
        "Plugin Development",
        "Documentation",
        "Testing",
        "ML Model Contributions",
        "Dataset Collaboration",
        "Academic Partnerships",
        "Publication Collaboration",
        "Q1 2025 Survey",
        "Community Priorities",
        "🔑 Spotify Authentication",
        "🐳 Docker Issues",
        "🔧 Performance",
        "🌐 SSL Problems",
        "Q: Why is my DigitalOcean deployment failing with 503 health check errors?",
        "Q: Docker build fails with \"permission denied\" errors?",
        "Q: Health check returns warnings - is this normal?",
        "200 status",
        "503 status",
        "Warnings",
        "Q: Container won't start on Ubuntu server?",
        "Q: How do I push to Docker Hub registry?",
        "Q: Do I need Spotify API keys to try the application?",
        "Mock AI provider",
        "SQLite database",
        "Basic chat interface",
        "Spotify features",
        "Q: Where do I get Spotify API credentials?",
        "Q: How do I secure API keys in production?",
        "Environment variables",
        "GitHub Secrets",
        "DigitalOcean App Secrets",
        "Docker secrets",
        "Never commit .env files",
        "Q: What does each health check status mean?",
        "healthy",
        "warning",
        "unhealthy",
        "not_configured",
        "Q: Which services are required vs optional?",
        "Q: SSL certificate errors on Ubuntu server?",
        "Q: Can't access application from outside the server?",
        "Q: How do I set up the development environment?",
        "Q: How do I run tests?",
        "Q: How do I report bugs or request features?",
        "Bug reports",
        "Feature requests",
        "Documentation issues",
        "Enhancement proposals",
        "Spotify Web API",
        "OpenAI API",
        "[Spotify](https://developer.spotify.com/documentation/web-api/)",
        "[OpenAI](https://openai.com/)** & **[Google Gemini](https://ai.google.dev/)",
        "[Node.js](https://nodejs.org/)** & **[React](https://reactjs.org/)",
        "[Docker](https://www.docker.com/)** & **[DigitalOcean](https://www.digitalocean.com/)",
        "Star this repository",
        "Report bugs",
        "Share with friends",
        "Contribute code",
        "Dynamic Nginx Configuration",
        "Enhanced Environment Management",
        "React Router & SPA Support",
        "Comprehensive Settings Interface",
        "Enhanced API Endpoints",
        "Automated Deployment Validation",
        "Configuration Validation Scripts",
        "React Application Configuration",
        "Comprehensive Documentation",
        "Security Hardening",
        "Enhanced Monitoring",
        "Advanced Configuration",
        "Comprehensive Automation System",
        "Advanced Development Workflow",
        "Production-Ready Automation",
        "Complete Settings UI Testing",
        "Enhanced Security Configuration",
        "Automated SSL Management",
        "Configuration Import/Export",
        "Multi-Tenant Support",
        "Advanced AI Configuration",
        "Enhanced Analytics Dashboard",
        "Mobile Configuration App",
        "Configuration Marketplace",
        "Advanced Deployment Automation",
        "Integrated Development Environment",
        "Advanced Security Compliance",
        "AI-Powered Configuration",
        "Edge Computing Support",
        "Enterprise Integration",
        "Configuration as Code",
        "Dynamic Configuration System",
        "Security & Performance",
        "Modern Settings UI",
        "Infrastructure as Code",
        "Target",
        "Current",
        "🎵 Ready to discover your next favorite song?",
        "Version 2.1.0",
        "### 🤖 **Advanced AI Integration**",
        "Analysis** - Deep analysis of tempo, energy, valence, and musical characteristics",
        "- **Frontend**: React, Vite for modern web experience",
        "extraction and similarity matching",
        "### Recommendation Engine",
        "matching with Spotify's analysis",
        "a comprehensive automated deployment system with:",
        "- **🔐 OAuth 2.0** - Secure Spotify authentication",
        "a revolutionary configuration system with a modern, comprehensive web interface:",
        "- **Device Detection**: Automatic mobile/tablet/desktop identification",
        "- **🚀 Automatic Deployment** - Triggers on push to main branch",
        "- ✅ Core music recommendation engine with ML algorithms and automated validation",
        "rate limiting, input validation, HTTPS with automated monitoring",
        "- Advanced deep learning recommendation models",
        "- User preference learning system",
        "analysis and clustering",
        "📋 PLANNED",
        "Beta** - Limited social recommendation testing",
        "Suggestions & Contributions",
        "in the app",
        "Voting",
        "by participating in our quarterly roadmap surveys:",
        "branch and submit PR",
        "requests**: https://github.com/dzp5103/Spotify-echo/discussions",
        "- 📢 **Share with friends** and on social media",
        "- Settings UI usage and configuration documented",
        "✅ COMPLETED",
        "🎵 EchoTune AI - API Documentation",
        "Overview",
        "Base URL",
        "Authentication",
        "Spotify OAuth 2.0",
        "Core Endpoints",
        "🎧 Music Recommendations",
        "GET /recommendations",
        "POST /recommendations/feedback",
        "🤖 AI Chat Interface",
        "POST /chat/message",
        "📊 User Analytics",
        "GET /user/listening-history",
        "GET /user/top-genres",
        "🔄 Playlist Management",
        "POST /playlists/generate",
        "Error Handling",
        "HTTP Status Codes",
        "Error Response Format",
        "Rate Limiting",
        "SDKs and Examples",
        "JavaScript/Node.js",
        "Python",
        "Get recommendations",
        "Send chat message",
        "Webhooks",
        "Playlist Updates",
        "Support",
        "Parameters:",
        "Response:",
        "Request Body:",
        "General endpoints",
        "Recommendation endpoints",
        "Chat endpoints",
        "Endpoint Setup:",
        "Issues",
        "Discord",
        "Last Updated",
        "API Version",
        "🚀 EchoTune AI - Complete DigitalOcean Deployment Guide",
        "🎯 Quick Start (Recommended)",
        "Automated GitHub Actions Deployment",
        "Fork https://github.com/dzp5103/Spotify-echo to your GitHub account",
        "Method 1: Push to main branch (triggers automatic deployment)",
        "Method 2: Manual trigger via GitHub Actions",
        "Go to Actions → \"DigitalOcean Production Deployment\" → Run workflow",
        "📋 Detailed Setup Instructions",
        "Step 1: Spotify API Configuration",
        "Step 2: DigitalOcean Setup",
        "Step 3: GitHub Actions Configuration",
        "Optional",
        "Step 4: Deployment Execution",
        "🔧 Alternative Deployment Methods",
        "One-Click Deploy (Basic)",
        "Manual App Platform Setup",
        "🛡️ Security Configuration",
        "Environment Variables",
        "SSL/TLS Configuration",
        "Security Headers",
        "📊 Monitoring and Troubleshooting",
        "Health Checks",
        "Check application health",
        "Expected response:",
        "Common Issues and Solutions",
        "1. Health Check Failures (503 Errors)",
        "Check application logs",
        "Common fixes:",
        "1. Verify PORT=3000 is set",
        "2. Check DOMAIN matches your actual domain",
        "3. Ensure Spotify credentials are valid",
        "4. Verify container is binding to 0.0.0.0:3000",
        "Test health endpoint",
        "2. Deployment Failures",
        "Check GitHub Actions logs",
        "Look for specific error messages",
        "Common issues:",
        "1. Invalid DigitalOcean credentials",
        "2. Container registry permissions",
        "3. Resource limits exceeded",
        "4. Invalid environment variables",
        "Verify secrets are correctly set",
        "3. Application Startup Issues",
        "Check app logs",
        "Common causes:",
        "1. Missing required environment variables",
        "2. Database connection timeouts (should be warnings only)",
        "3. Invalid Spotify redirect URI",
        "4. Port binding issues",
        "Verify environment configuration",
        "4. Database Connection Warnings",
        "This is NORMAL and expected behavior",
        "The app works without external databases",
        "If you want to connect a database:",
        "1. Set up MongoDB Atlas or DigitalOcean Managed Database",
        "2. Add MONGODB_URI to environment variables",
        "3. Restart the application",
        "Health check will show \"warning\" for optional services",
        "Application remains fully functional",
        "DigitalOcean built-in monitoring",
        "App Platform → Your App → Insights",
        "Custom monitoring endpoints",
        "🚀 Scaling and Optimization",
        "Horizontal Scaling",
        "DigitalOcean App Platform",
        "App Settings → Resources → Instances",
        "Increase instance count based on traffic",
        "Auto-scaling configuration:",
        "Min instances: 1",
        "Max instances: 3-5 (depending on plan)",
        "Environment variables for optimization",
        "Database optimizations",
        "CDN Configuration",
        "DigitalOcean Spaces CDN (optional)",
        "For static assets and improved global performance",
        "Configure in App Platform → Settings → Domains",
        "💰 Cost Estimation",
        "🔄 CI/CD Pipeline",
        "📞 Getting Help",
        "Support Channels",
        "Common Support Requests",
        "1. Fork the Repository",
        "2. Set Up DigitalOcean",
        "3. Configure GitHub Secrets",
        "4. Deploy",
        "5. Monitor Deployment",
        "Create Spotify App",
        "Get Credentials",
        "Create DigitalOcean Account",
        "Generate API Token",
        "Create Container Registry",
        "Generate Registry Token",
        "Required GitHub Secrets:",
        "Trigger Deployment",
        "Monitor Progress",
        "Create App",
        "Configure Environment",
        "Set Resource Limits",
        "Required Variables:",
        "Optional Variables:",
        "Problem",
        "Solutions",
        "Key Metrics to Monitor",
        "Monitoring Tools",
        "Basic Deployment",
        "Production Deployment",
        "Build Stage",
        "Test Stage",
        "Deploy Stage",
        "Monitor Stage",
        "GitHub Issues",
        "GitHub Discussions",
        "DigitalOcean Support",
        "Deployment Issues",
        "Environment Configuration",
        "Performance Issues",
        "Cost Questions",
        "Ready to deploy?",
        "🔧 EchoTune AI - Configuration Management Guide",
        "🎛️ Configuration Interface Access",
        "Web Interface",
        "API Access",
        "Get current configuration",
        "Update configuration",
        "Get mobile settings",
        "Update mobile settings",
        "⚙️ General Configuration Options",
        "Music Discovery Settings",
        "Performance Settings",
        "UI/UX Settings",
        "Privacy & Security Settings",
        "🖥️ MCP Server Configuration",
        "Available MCP Servers",
        "MCP Server Configuration",
        "📱 Mobile & Responsive Configuration",
        "Device Optimization Settings",
        "Responsive Design Settings",
        "Performance Optimization Settings",
        "Auto-Detection Features",
        "🔄 Real-time System Monitoring",
        "System Health Metrics",
        "Status Indicators",
        "🔧 Configuration Storage",
        "Storage Locations",
        "Configuration Persistence",
        "Backup and Recovery",
        "Backup current configuration",
        "Restore configuration",
        "🚀 Advanced Configuration",
        "Environment Variable Integration",
        "MCP Server Credentials",
        "Core Application",
        "Programmatic Configuration Management",
        "🔍 Troubleshooting",
        "Common Configuration Issues",
        "Configuration Validation",
        "Reset to Defaults",
        "Reset all configuration to defaults",
        "Restart application to regenerate with defaults",
        "📊 Configuration Best Practices",
        "Security Considerations",
        "Mobile Experience",
        "General Configuration",
        "Recommendation Engine Options:",
        "Audio Quality Options:",
        "Discovery Mode Options:",
        "Theme Options:",
        "Device Type",
        "Screen Resolution",
        "Touch Capability",
        "Orientation",
        "Network Type",
        "Device Performance",
        "Main Application Status",
        "MCP Server Status",
        "Database Connectivity",
        "Last Update Time",
        "Healthy/Running",
        "Warning",
        "Error/Unhealthy",
        "Unknown",
        "General Config",
        "Mobile Config",
        "MCP Server Not Starting",
        "Settings Not Persisting",
        "Mobile Settings Not Applied",
        "Type Checking",
        "Range Validation",
        "Dependency Checking",
        "Security Validation",
        "and audio characteristics",
        "The mobile responsive manager automatically detects:",
        "for mobile devices",
        "👨‍💻 EchoTune AI - Developer Setup and Contributing Guide",
        "🚀 Quick Start for Contributors",
        "1-Minute Setup",
        "Fork and clone repository",
        "Install dependencies",
        "Set up environment",
        "Start development server",
        "Open in browser",
        "🏗️ Project Architecture",
        "💻 Development Environment",
        ".env file for development",
        "Optional: Spotify API (for full functionality)",
        "Optional: AI providers (mock provider works without keys)",
        "GEMINI_API_KEY=your_gemini_key",
        "OPENAI_API_KEY=your_openai_key",
        "Optional: Database (SQLite fallback available)",
        "MONGODB_URI=mongodb://localhost:27017/echotune_dev",
        "Security (generate random strings)",
        "Development Scripts",
        "Development server with hot reload",
        "Production build",
        "Start production server",
        "Run tests",
        "Lint code",
        "Fix linting issues",
        "Format code with Prettier",
        "Type checking (if using TypeScript)",
        "Health check",
        "Clean build artifacts",
        "VS Code Setup",
        "Docker Development Environment",
        "Start development environment",
        "Development with hot reload",
        "Run tests in container",
        "Shell access",
        "Stop development environment",
        "🧪 Testing",
        "Test Structure",
        "Running Tests",
        "Run specific test suites",
        "Run tests in watch mode",
        "Run specific test file",
        "Debug tests",
        "Generate test report",
        "Writing Tests",
        "🔧 Code Style and Standards",
        "ESLint Configuration",
        "Prettier Configuration",
        "Git Hooks (Husky)",
        "Coding Standards",
        "🚀 Contributing Workflow",
        "Development Process",
        "Branch Naming Convention",
        "Feature branches",
        "Bug fixes",
        "Performance improvements",
        "Refactoring",
        "Commit Message Format",
        "Format: type(scope): description",
        "Examples:",
        "Pull Request Template",
        "Description",
        "Changes Made",
        "Screenshots",
        "Breaking Changes",
        "Checklist",
        "🐛 Debugging",
        "Development Debugging",
        "Performance Debugging",
        "📚 Learning Resources",
        "Codebase Understanding",
        "Key Concepts",
        "External Documentation",
        "🎯 Common Development Tasks",
        "Adding a New AI Provider",
        "Creating a New API Endpoint",
        "Adding Frontend Components",
        "Support Resources",
        "Before Asking for Help",
        "Getting Code Reviews",
        "Required:",
        "Optional:",
        "That's it!",
        "Frontend:",
        "React 18",
        "Socket.io Client",
        "Backend:",
        "Node.js 20",
        "Express.js",
        "Socket.io",
        "Passport.js",
        "AI/ML:",
        "OpenAI GPT",
        "Custom ML",
        "Python scripts",
        "Database:",
        "MongoDB",
        "SQLite",
        "Infrastructure:",
        "GitHub Actions",
        "Minimal setup for development:",
        "Recommended extensions (`.vscode/extensions.json`):",
        "VS Code settings (`.vscode/settings.json`):",
        "For consistent development across teams:",
        "Unit test example (Jest + React Testing Library):",
        "Integration test example:",
        "`.eslintrc.js`:",
        "`.prettierrc`:",
        "Pre-commit hooks:",
        "JavaScript/React Best Practices:",
        "Function Components",
        "Async/Await",
        "PropTypes",
        "Destructuring",
        "Arrow Functions",
        "Comments",
        "Example React Component:",
        "Node.js Backend Best Practices:",
        "Fork Repository",
        "Create Branch",
        "Develop",
        "Document",
        "Submit PR",
        "When creating a PR, include:",
        "Example PR Description:",
        "VS Code Debug Configuration (`.vscode/launch.json`):",
        "Common Debugging Techniques:",
        "Start here for understanding the codebase:",
        "`src/server.js`",
        "`src/frontend/App.jsx`",
        "`src/chat/providers/`",
        "`src/spotify/auth/`",
        "`src/utils/health-check.js`",
        "1. Health Check System:",
        "2. AI Provider System:",
        "3. Spotify Integration:",
        "4. Database Layer:",
        "Node.js",
        "Contributing Guide",
        "Check existing issues",
        "Read documentation",
        "Try debugging",
        "Provide context",
        "Tips for effective code reviews:",
        "Small PRs",
        "Clear descriptions",
        "Add tests",
        "Follow conventions",
        "Be responsive",
        "Ready to contribute?",
        "Happy coding! 🎵",
        "branch from main",
        "branches",
        "🏗️ EchoTune AI - System Architecture Documentation",
        "📋 Table of Contents",
        "🎯 Architecture Overview",
        "High-Level Architecture Diagram",
        "Core Principles",
        "🧩 System Components",
        "Frontend Components",
        "Web Application",
        "Mobile Compatibility",
        "Backend Services",
        "Authentication Service (`src/api/auth/`)",
        "Chat API Service (`src/api/routes/chat.js`)",
        "Recommendation Engine (`src/ml/recommendation-engine.js`)",
        "Spotify Integration Service (`src/spotify/`)",
        "MCP (Model Context Protocol) Server Architecture",
        "MCP Orchestrator (`mcp-server/orchestrator.js`)",
        "🔄 Data Flow",
        "User Interaction Flow",
        "Data Processing Pipeline",
        "Real-time Recommendation Flow",
        "🗄️ Database Architecture",
        "MongoDB Collections Schema",
        "Users Collection",
        "Listening History Collection",
        "Recommendations Collection",
        "Chat Sessions Collection",
        "Database Indexes",
        "Redis Cache Architecture",
        "🔌 API Architecture",
        "RESTful API Design",
        "API Versioning",
        "Resource Hierarchies",
        "GraphQL Integration (Future Enhancement)",
        "WebSocket Architecture",
        "🤖 AI/ML Architecture",
        "Machine Learning Pipeline",
        "LLM Integration Architecture",
        "Model Training Pipeline",
        "ML model training architecture",
        "OAuth 2.0 Flow Architecture",
        "API Rate Limiting Strategy",
        "Data Synchronization",
        "🔐 Security Architecture",
        "Authentication & Authorization",
        "Data Encryption",
        "📈 Scalability & Performance",
        "Horizontal Scaling Strategy",
        "Docker Compose scaling configuration",
        "Caching Strategy",
        "Database Optimization",
        "🚀 Deployment Architecture",
        "Containerization Strategy",
        "Multi-stage Dockerfile for optimization",
        "Create non-root user",
        "Install security updates",
        "Copy application",
        "Use dumb-init for proper signal handling",
        "DigitalOcean App Platform specification",
        "CI/CD Pipeline",
        "GitHub Actions workflow",
        "🔍 Monitoring & Observability",
        "Health Monitoring",
        "Logging Architecture",
        "📊 Technology Stack",
        "Core Technologies",
        "AI/ML Stack",
        "External Integrations",
        "Development Tools",
        "Microservices Architecture",
        "Event-Driven Design",
        "API-First Approach",
        "Scalable by Design",
        "Security by Default",
        "Observability",
        "Technology",
        "State Management",
        "Styling",
        "Features",
        "Performance",
        "Responsive Design",
        "PWA Features",
        "Touch Optimized",
        "Runtime",
        "Framework",
        "Build Tool",
        "Container",
        "LLM Providers",
        "ML Framework",
        "Feature Engineering",
        "Model Training",
        "Model Serving",
        "MCP Servers",
        "ESLint",
        "Prettier",
        "Puppeteer",
        "Nodemon",
        "dotenv",
        "Architecture Version",
        "Next Review",
        "Engineering]",
        "extraction",
        "Extraction]",
        "Object",
        "'features:${trackId}', // TTL: 30 days",
        "Engineering\"",
        "similarity model",
        "= self.feature_store.get_audio_features()",
        "= await this.spotify.getAudioFeatures(batch);",
        "Engineering** | pandas, NumPy | Data preprocessing |",
        "📚 EchoTune AI - Documentation Organization Plan",
        "Current State Analysis",
        "🎯 Reorganization Strategy",
        "1. Core Documentation (Root Level)",
        "2. Structured Documentation (`docs/` folder)",
        "`/docs/architecture/`",
        "`/docs/deployment/`",
        "`/docs/api/`",
        "`/docs/guides/`",
        "`/docs/reports/` (Archive)",
        "3. Files to Remove/Consolidate",
        "Duplicate/Redundant Files:",
        "Report Files (Archive):",
        "🚀 Implementation Plan",
        "Phase 1: Create Structure",
        "Phase 2: Consolidate Content",
        "Phase 3: Improve Navigation",
        "📁 Final Structure Preview",
        "📊 Cleanup Metrics",
        "Before Cleanup:",
        "After Cleanup:",
        "🎯 Benefits",
        "53 markdown files",
        "~780KB",
        "Low discoverability",
        "High maintenance overhead",
        "Organized",
        "Improved navigation",
        "Reduced maintenance",
        "Improved Developer Experience",
        "Reduced Cognitive Load",
        "Better Maintenance",
        "Professional Appearance",
        "Easier Onboarding",
        "Status",
        "Estimated Time",
        "Impact",
        "MCP Servers Integration Guide",
        "Integrated MCP Servers",
        "1. Mermaid Diagram Generator (`mcp-mermaid`)",
        "2. FileScopeMCP Repository Manager",
        "3. Browserbase Cloud Automation",
        "Configuration",
        "Browserbase Configuration",
        "Integration Scripts",
        "Run all MCP server demonstrations",
        "Test individual servers",
        "Purpose",
        "Capabilities",
        "Usage Example",
        "MCP Servers Integration Summary",
        "✅ Successfully Integrated MCP Servers",
        "1. 🎨 mcp-mermaid - Workflow Visualization",
        "2. 📁 FileScopeMCP - Repository Management",
        "3. 🌐 Browserbase - Cloud Browser Automation",
        "4. 🤖 Puppeteer Server - Local Browser Automation",
        "5. 🎵 Spotify Server - Music Integration",
        "🚀 Enhanced MCP Orchestrator",
        "Key Endpoints:",
        "📊 Integration Test Results",
        "Test Coverage:",
        "🛠️ Quick Start Commands",
        "Start MCP Orchestrator",
        "Test All Integrations",
        "Generate Workflow Diagrams",
        "Analyze Repository",
        "Check Server Health",
        "📁 Generated Artifacts",
        "Workflow Diagrams (in `docs/diagrams/`)",
        "🎯 Impact on EchoTune AI",
        "For Development",
        "For Production",
        "For Presentations & Issues",
        "🔧 Configuration",
        "Environment Variables (.env)",
        "Browserbase (for cloud browser testing)",
        "Spotify (for music integration)",
        "MCP Server",
        "✨ Next Steps",
        "5 comprehensive MCP servers",
        "Repository",
        "Coordinates all 5 MCP servers",
        "Provides REST API endpoints",
        "Offers comprehensive testing",
        "Handles server lifecycle management",
        "Supports parallel operations",
        "100% Success Rate",
        "Visual Documentation",
        "Repository Management",
        "Testing Infrastructure",
        "Code Quality",
        "Quick Testing",
        "Workflow Visualization",
        "Repository Tools",
        "Workflow Diagrams",
        "Repository Analysis",
        "Testing Documentation",
        "Add Browserbase credentials",
        "Explore advanced diagram types",
        "Create custom workflow automations",
        "Integrate with CI/CD",
        "MCP Integration Test Report",
        "Summary",
        "Test Results",
        "Health Check",
        "Servers List",
        "Mermaid Diagrams",
        "File Operations",
        "Comprehensive Integration",
        "MCP Servers Integration Status",
        "✅ Successfully Integrated",
        "🔧 Available for Use",
        "Usage Examples",
        "Generate Diagrams",
        "Analyze Files",
        "Next Steps",
        "Total Tests",
        "Passed",
        "Failed",
        "Success Rate",
        "Timestamp",
        "Result",
        "mcp-mermaid",
        "FileScopeMCP",
        "@browserbasehq/mcp-server-browserbase",
        "Puppeteer Server",
        "Spotify Server",
        "Configure Spotify API",
        "Explore advanced features",
        "Create custom MCP integrations",
        "🚀 EchoTune AI - Quick Start Guide",
        "⚡ Choose Your Deployment Method",
        "🌐 DigitalOcean One-Click",
        "1. Clone repository",
        "2. Configure environment",
        "Edit .env.production with your Spotify API credentials",
        "3. Deploy with Docker Compose",
        "4. Open http://localhost:3000",
        "2. Install dependencies",
        "3. Configure environment",
        "Edit .env with your settings (Spotify API optional for demo)",
        "4. Start development server",
        "5. Open http://localhost:3000",
        "🔧 Required Configuration",
        "Spotify API Setup (Optional for Demo)",
        "Core application",
        "LLM Providers (optional)",
        "Database (optional)",
        "✅ Verify Installation",
        "Test Features",
        "🚀 Next Steps",
        "Check logs",
        "Or for local development",
        "Change port in .env",
        "Or kill process using port 3000",
        "Get Help",
        "🎵 Ready to Discover Music?",
        "Fastest production deployment with auto-scaling and SSL",
        "What you get:",
        "For any server with Docker - consistent across all platforms",
        "Perfect for testing and development",
        "Minimum configuration:",
        "Complete configuration:",
        "Open the application:",
        "Try demo chat:",
        "Spotify login:",
        "Voice interface:",
        "Application won't start:",
        "Spotify authentication not working:",
        "Port already in use:",
        "Enjoy your personalized music discovery experience! 🎶",
        "1. **Open the application:** http://localhost:3000",
        "📚 EchoTune AI - Documentation Index",
        "🏗️ Architecture & Design",
        "🚀 Deployment & Operations",
        "📖 Developer Guides",
        "🔌 API Reference",
        "📊 Reports & Analysis",
        "🛠️ Tools & Utilities",
        "📋 Project Organization",
        "Directory Structure",
        "🎯 Documentation by User Type",
        "👨‍💻 Developers",
        "🚀 DevOps Engineers",
        "🤝 Contributors",
        "🏢 Product Managers",
        "📈 Documentation Standards",
        "✅ Documentation Quality Guidelines",
        "🔄 Maintenance Schedule",
        "🔍 Finding Information",
        "Quick Reference",
        "Search Tips",
        "Documentation Issues",
        "Technical Support",
        "[README.md](../README.md)",
        "[API Documentation](../API_DOCUMENTATION.md)",
        "[Contributing](../CONTRIBUTING.md)",
        "[System Architecture](architecture/ARCHITECTURE.md)",
        "[Database Schema](architecture/database-schema.md)",
        "[Security Model](guides/security-model.md)",
        "[DigitalOcean Deployment](deployment/digitalocean-deployment.md)",
        "[Docker Guide](deployment/docker-guide.md)",
        "[Local Development](deployment/deployment-guide.md)",
        "[Troubleshooting](deployment/troubleshooting.md)",
        "[Coding Standards](guides/coding-standards.md)",
        "[GitHub Automation](guides/github-automation.md)",
        "[Database Management](guides/MONGODB_SETUP.md)",
        "[Agent System](guides/AGENTS.md)",
        "[Enhanced API Features](api/ENHANCED_API_FEATURES.md)",
        "[OpenAPI Specification](api/openapi-spec.yaml)",
        "[Authentication Details](api/authentication.md)",
        "[Cleanup Plan](DOCUMENTATION_CLEANUP_PLAN.md)",
        "[Integration Reports](reports/archived/)",
        "[Testing Results](reports/archived/)",
        "[Copilot Commands](guides/COPILOT_SLASH_COMMANDS.md)",
        "[Data Management](guides/DATA_MANAGEMENT.md)",
        "[Prompt System](guides/PROMPT_SYSTEM_GUIDE.md)",
        "Clear Structure",
        "Complete Examples",
        "Up-to-date",
        "Accessible",
        "Searchable",
        "Weekly",
        "Monthly",
        "Quarterly",
        "As needed",
        "Missing Information",
        "Outdated Content",
        "New Guide Needed",
        "General Questions",
        "Documentation Version",
        "Maintainer",
        "### 🏢 Product Managers",
        "overview",
        "change",
        "Requests**: Follow the contribution guidelines",
        "🚀 EchoTune AI API v2.1.0 - Enhanced Features Documentation",
        "📋 Overview",
        "🎯 New Features",
        "1. **Performance Monitoring System** 📊",
        "2. **Advanced Caching System** 🔄",
        "3. **Enhanced Security Manager** 🛡️",
        "4. **Comprehensive Health Check System** 📋",
        "5. **OpenAPI 3.0 Specification** 📝",
        "6. **API Versioning System** 🔀",
        "7. **Enhanced Response Formatting** 📊",
        "🎛️ Configuration",
        "Caching",
        "Package.json Scripts",
        "Performance monitoring",
        "Cache management",
        "Security monitoring",
        "Health monitoring",
        "🚀 Usage Examples",
        "1. Enhanced Recommendations with Caching",
        "2. Comprehensive Error Handling",
        "3. Security Middleware Integration",
        "📈 Performance Metrics",
        "Typical Performance Improvements",
        "Monitoring Dashboards",
        "🔧 Migration Guide",
        "From v1 to v2",
        "🎯 Next Steps",
        "📚 Additional Resources",
        "Performance Monitoring System",
        "Location",
        "API Endpoints",
        "Advanced Caching System",
        "API Cache",
        "Recommendations Cache",
        "User Data Cache",
        "Audio Features Cache",
        "Chat Context Cache",
        "Enhanced Security Manager",
        "Advanced Rate Limiting",
        "Suspicious Activity Detection",
        "Input Validation & Sanitization",
        "IP Blocking",
        "Rate Limiting Strategies",
        "Comprehensive Health Check System",
        "Spotify API Health",
        "AI Provider Status",
        "System Resources",
        "External Services",
        "Health Check Endpoints",
        "OpenAPI 3.0 Specification",
        "Access",
        "API Versioning System",
        "Enhanced Response Formatting",
        "Response Time",
        "Database Load",
        "Memory Usage",
        "Update Dependencies",
        "API Responses",
        "Enable Redis Caching",
        "Set up Monitoring",
        "Configure Alerts",
        "API Analytics",
        "### 1. **Performance Monitoring System** 📊",
        "Cache**: 6-hour TTL for track audio features",
        "- **Advanced Rate Limiting**: Multiple rate limit strategies per endpoint type",
        "EchoTune AI - API Documentation",
        "📚 API Reference",
        "🎵 Music Endpoints",
        "Get User's Top Tracks",
        "Get Recommendations",
        "💬 Chat Endpoints",
        "Send Chat Message",
        "Switch LLM Provider",
        "🔍 Health and Monitoring",
        "Security Stats",
        "📊 Analytics Endpoints",
        "User Listening History",
        "Music Trends",
        "🔒 Security",
        "Error Responses",
        "🚀 WebSocket Events",
        "Real-time Chat",
        "Available Events",
        "📝 Example Requests",
        "cURL Examples",
        "Get recommendations with auth",
        "JavaScript Examples",
        "Python Examples",
        "🛠️ Development",
        "API Testing",
        "Run API tests",
        "Test specific endpoint",
        "Load testing",
        "Local Development",
        "Start API server",
        "API will be available at http://localhost:3000/api",
        "Production",
        "Development",
        "Standard",
        "Authenticated",
        "- [Authentication Guide](auth.md) - Spotify OAuth setup",
        "EchoTune AI Database Architecture Guide",
        "📊 Dataset Analysis",
        "Current Data Profile",
        "Data Structure Overview",
        "🏗️ Database Platform Comparison",
        "1. MongoDB (Recommended for ML/Analytics)",
        "2. Supabase (PostgreSQL) (Recommended for Applications)",
        "3. Digital Ocean Managed Databases",
        "🎯 Recommended Architecture",
        "Hybrid Multi-Database Approach",
        "Primary Database: MongoDB Atlas",
        "Secondary Database: Supabase",
        "🚀 Setup Instructions",
        "MongoDB Atlas Setup",
        "1. Create MongoDB Atlas Account",
        "Install MongoDB tools",
        "2. Create Cluster",
        "3. Configure Security",
        "Database user",
        "Network Access",
        "Production: Specific IPs only",
        "4. Environment Configuration",
        "Add to .env",
        "Supabase Setup",
        "1. Create Supabase Project",
        "2. Configure Environment",
        "3. Create Tables",
        "Digital Ocean Setup (Optional for Production)",
        "1. Create DO Account and Database",
        "Install doctl CLI",
        "or download from https://github.com/digitalocean/doctl",
        "Authenticate",
        "Create database cluster",
        "2. Configure Database",
        "Get connection details",
        "Create database and user",
        "📈 Performance Optimization",
        "MongoDB Indexing Strategy",
        "PostgreSQL Indexing Strategy",
        "🔄 Data Migration Scripts",
        "CSV to MongoDB Migration",
        "!/usr/bin/env python3",
        "CSV to Supabase Migration",
        "🔧 Audio Features Enhancement",
        "Missing Audio Features Strategy",
        "Performance Recommendations",
        "MongoDB Optimizations",
        "Supabase Optimizations",
        "General Optimizations",
        "MongoDB Atlas (M10 Development)",
        "Supabase (Pro Plan)",
        "Digital Ocean (Basic Droplet + Managed DB)",
        "Recommended Development Setup",
        "Production Scaling Path",
        "🛠️ Development Workflow",
        "Quick Setup Commands",
        "Interactive database setup wizard",
        "Populate audio features (mock mode for testing)",
        "Migrate to MongoDB",
        "Migrate to Supabase",
        "Test database connections",
        "Development Phases",
        "Records",
        "Columns",
        "Time Span",
        "Unique Tracks",
        "Unique Artists",
        "Listening Hours",
        "Strengths:",
        "Use Cases:",
        "Estimated Storage:",
        "Data Model",
        "Scaling",
        "Backup",
        "Extract unique track URIs",
        "Batch fetch audio features",
        "Update existing records",
        "Handle rate limiting",
        "Cache results",
        "Compute",
        "Data Transfer",
        "Backups",
        "Monthly Estimate",
        "Storage",
        "Bandwidth",
        "MongoDB Atlas M0 (Free)",
        "Supabase Free",
        "Total Development Cost",
        "Phase 1 (MVP)",
        "Phase 2 (Beta)",
        "Phase 3 (Production)",
        "Staging",
        "Analytics",
        "- **Time Span**: 14 years (2010-2024)",
        "danceability, energy, valence, tempo, etc.",
        "engineering and model training",
        "~400MB",
        "and notifications",
        "~450MB",
        "Service     │ │",
        "- **Scaling**: Auto-scaling clusters",
        "- **Data Model**: Normalized relational tables",
        "index for ML queries",
        "doc['audio_features'] = {k: v for k, v in doc['audio_features'].items() if pd.notna(v)}",
        "Enhancement",
        "columns but they're mostly empty. We need to populate them using the Spotify Web API.",
        "Strategy",
        "(mock mode for testing)",
        "and machine learning workflows.",
        "🚀 EchoTune AI - One-Click Deployment Setup Guide",
        "📋 Prerequisites",
        "🔐 Required Secrets Configuration",
        "1. DigitalOcean App Platform Deployment",
        "Required Secret:",
        "How to get your DigitalOcean API Token:",
        "2. Optional Secrets (for additional deployment methods)",
        "For Docker Hub Deployment:",
        "For DigitalOcean Droplet Deployment:",
        "For Enhanced Security:",
        "🚀 How to Deploy",
        "Method 1: Automatic Deployment (Recommended)",
        "Method 2: Manual Deployment",
        "📊 Deployment Status",
        "🔧 Post-Deployment Configuration",
        "1. Access Your Application",
        "2. Configure Spotify Integration (Optional but Recommended)",
        "3. Enable AI Features (Optional)",
        "Common Issues:",
        "Debug Commands:",
        "Check app status",
        "View app details",
        "🆘 Getting Help",
        "🔒 Security Best Practices",
        "Log in to DigitalOcean Control Panel",
        "Navigate to API Section",
        "Generate New Token",
        "Read and Write",
        "Copy Token",
        "Push to Main Branch",
        "Go to GitHub Actions",
        "Run Workflow",
        "Build Status",
        "App Platform",
        "Live URL",
        "\"Missing DIGITALOCEAN_ACCESS_TOKEN secret\"",
        "\"App deployment failed\"",
        "\"Health check failed\"",
        "DigitalOcean App Platform Docs",
        "GitHub Actions for DigitalOcean",
        "EchoTune AI Documentation",
        "Review DigitalOcean console",
        "Open an issue",
        "Consult the troubleshooting section",
        "Rotate API tokens regularly",
        "Use environment-specific secrets",
        "Monitor deployment logs",
        "Enable DigitalOcean monitoring",
        "Set up alerts",
        "Ready to deploy? Follow this guide and your EchoTune AI will be live in minutes!",
        "(Optional)",
        "🚀 EchoTune AI - DigitalOcean Production Deployment Guide",
        "DigitalOcean Setup",
        "Required Information",
        "Domain Configuration",
        "🛠️ Quick Deployment (Automated)",
        "Option 1: One-Command Deployment",
        "Download and run the automated deployment script",
        "Option 2: Manual Download and Run",
        "Clone the repository",
        "Make the script executable",
        "Run the deployment",
        "📝 Manual Deployment (Step-by-Step)",
        "Step 1: Server Preparation",
        "Update the system",
        "Install essential packages",
        "Create deployment user",
        "Step 2: Install Docker",
        "Add Docker repository",
        "Install Docker",
        "Start Docker and add user to docker group",
        "Step 3: Configure Firewall",
        "Configure UFW firewall",
        "Step 4: Deploy Application",
        "Switch to deployment user",
        "Navigate to deployment directory",
        "Copy production environment template",
        "Edit configuration (see Configuration section below)",
        "Step 5: SSL Certificates",
        "Install certbot",
        "Obtain SSL certificate",
        "Copy certificates",
        "Step 6: Deploy with Docker",
        "Switch back to deployment user",
        "Build and start services",
        "Check status",
        "⚙️ Configuration",
        "Domain and Server Configuration",
        "Security (CHANGE THESE!)",
        "Spotify API (REQUIRED)",
        "Database Configuration",
        "AI Provider API Keys",
        "SSL Configuration",
        "Database Setup Options",
        "Option 1: MongoDB Atlas (Recommended)",
        "Option 2: DigitalOcean Managed Database",
        "Option 3: Self-Hosted (Included in docker-compose)",
        "🧪 Testing and Validation",
        "Automated Testing Script",
        "!/bin/bash",
        "save as test-deployment.sh",
        "Test 1: Check if containers are running",
        "Test 2: HTTP Health Check",
        "Test 3: HTTPS Health Check",
        "Test 4: Domain Health Check",
        "Test 5: SSL Certificate Check",
        "Test 6: Database Connectivity",
        "Test 7: Redis Connectivity",
        "Test 8: API Endpoints",
        "Manual Testing Commands",
        "Check container status",
        "Test health endpoints",
        "Check SSL certificate",
        "Monitor resource usage",
        "Check database connectivity",
        "Install Apache Bench for load testing",
        "Basic load test (100 requests, 10 concurrent)",
        "API load test",
        "WebSocket test (requires wscat)",
        "🔧 Management and Maintenance",
        "Service Management",
        "Start all services",
        "Stop all services",
        "Restart services",
        "Check service status",
        "View service logs",
        "Docker Management",
        "View running containers",
        "View logs",
        "Restart specific service",
        "Update and redeploy",
        "SSL Certificate Renewal",
        "Manual renewal",
        "Check auto-renewal setup",
        "Copy renewed certificates",
        "Backup and Restore",
        "Manual backup",
        "Restore from backup",
        "Monitoring and Logs",
        "Application logs",
        "Nginx logs",
        "Docker logs",
        "System resource monitoring",
        "Network monitoring",
        "🔐 Security Best Practices",
        "1. Update Default Passwords",
        "2. Firewall Configuration",
        "Review current rules",
        "Add specific IP restrictions if needed",
        "3. SSL Security",
        "4. Regular Updates",
        "Update system packages",
        "Update Docker images",
        "Update application",
        "5. Security Monitoring",
        "Check fail2ban status",
        "Monitor auth logs",
        "Check for unauthorized access",
        "🐛 Troubleshooting",
        "1. Containers Not Starting",
        "Check disk space",
        "Check memory usage",
        "Restart Docker",
        "2. SSL Certificate Issues",
        "Check certificate validity",
        "Renew certificate",
        "Check certificate chain",
        "3. Database Connection Issues",
        "Test MongoDB connection",
        "Check MongoDB logs",
        "Test Redis connection",
        "4. Domain/DNS Issues",
        "Check DNS resolution",
        "Test from external servers",
        "5. Performance Issues",
        "Check resource usage",
        "Monitor system resources",
        "Check application logs for errors",
        "Log Analysis",
        "Find errors in application logs",
        "Find slow requests in nginx logs",
        "Check for 500 errors",
        "Recovery Procedures",
        "1. Complete Service Restart",
        "2. Database Recovery",
        "Stop application",
        "Start application",
        "3. Rollback Deployment",
        "Revert to previous commit",
        "Rebuild and redeploy",
        "📞 Support and Resources",
        "Monitoring Endpoints",
        "Log Locations",
        "Emergency Contacts",
        "🎉 Deployment Complete!",
        "Domain",
        "Primary IP",
        "Reserved IP",
        "Minimum Droplet",
        "Recommended",
        "API Health",
        "Application",
        "Application Logs",
        "Nginx Logs",
        "System Logs",
        "Docker Logs",
        "Server Status",
        "Domain Status",
        "SSL Status",
        "Primary URL",
        "🚀 DigitalOcean App Platform Deployment Guide",
        "Required Accounts and Information",
        "Required Environment Variables",
        "Production Settings",
        "Security (REQUIRED for production)",
        "Optional: Database Configuration",
        "Optional: AI Providers",
        "🏗️ App Platform Configuration",
        "Deployment Settings",
        "Entry Point Files",
        "🚀 Deployment Steps",
        "Step 1: Prepare Repository",
        "Step 2: Create App on DigitalOcean",
        "Step 3: Configure Environment Variables",
        "Step 4: Configure Spotify App",
        "Step 5: Deploy Application",
        "🔧 Build Optimization",
        "Docker Build Issues (Resolved)",
        "Recommended instance sizes:",
        "- basic-xxs: Development/testing ($5/month)",
        "- basic-xs: Small production ($12/month)",
        "- basic-s: Medium production ($25/month)",
        "Environment Variables Security",
        "CORS Configuration",
        "SSL/TLS",
        "📊 Monitoring and Logs",
        "App Platform Monitoring",
        "Custom Monitoring",
        "Monitor specific components",
        "🔄 Continuous Deployment",
        "Automatic Deployments",
        "Manual Deployments",
        "Rollback Process",
        "🌍 Custom Domain Setup",
        "Step 1: Add Domain",
        "Step 2: Configure DNS",
        "Step 3: Update Environment Variables",
        "🚨 Troubleshooting",
        "Common Build Issues",
        "Solution: Ensure all dependencies are in package.json",
        "Already resolved in updated Dockerfile",
        "The build now uses system browsers instead of downloading",
        "Resolved: Root-level server.js now exists",
        "App Platform will use: npm start -> node server.js",
        "Runtime Issues",
        "Check redirect URI matches exactly:",
        "App Platform: https://your-app.ondigitalocean.app/auth/callback",
        "Custom domain: https://yourdomain.com/auth/callback",
        "Verify in App Platform console:",
        "- All required variables are set",
        "- Sensitive variables marked as SECRET",
        "- No typos in variable names",
        "Check application logs in console",
        "Test health endpoint manually",
        "Verify database connections if configured",
        "Emergency Procedures",
        "App Platform Pricing (as of 2024)",
        "Additional Costs",
        "Cost Optimization Tips",
        "📚 Resources",
        "🎉 Success!",
        "Build Configuration:",
        "Build Command",
        "Run Command",
        "Environment",
        "Node Version",
        "App Specification (app.yaml):",
        "`server.js`",
        "`index.js`",
        "`src/index.js`",
        "Access App Platform:",
        "Connect Repository:",
        "Configure Build Settings:",
        "Output Directory",
        "Source Directory",
        "Review Configuration:",
        "Deploy:",
        "Verify Deployment:",
        "Key Improvements:",
        "Environment Variables for Browser Automation:",
        "App Platform Specific Settings:",
        "Runtime Logs",
        "Build Logs",
        "Metrics",
        "Alerts",
        "Issue: \"Cannot find module\" errors",
        "Issue: Playwright/Puppeteer install fails",
        "Issue: \"ENOENT: no such file or directory, open 'server.js'\"",
        "Issue: Spotify authentication fails",
        "Issue: Environment variables not loaded",
        "Issue: Health check fails",
        "Application Down:",
        "Build Failures:",
        "Custom Domain",
        "SSL Certificate",
        "Build Minutes",
        "Automatic SSL/TLS",
        "Scalable Infrastructure",
        "Continuous Deployment",
        "Built-in Monitoring",
        "Professional Reliability",
        "DNS Configuration Guide for EchoTune AI",
        "Required DNS Settings for Multiple Servers",
        "1. Basic DNS Configuration",
        "For each server deployment, configure these DNS records:",
        "A Record (Root Domain)",
        "A Record (WWW Subdomain)",
        "2. Multiple Server Configuration",
        "Server 1 Example:",
        "Server 2 Example:",
        "3. Popular DNS Providers Configuration",
        "Cloudflare",
        "Namecheap",
        "GoDaddy",
        "Google Domains",
        "4. DNS Validation Commands",
        "Check A Record Resolution",
        "Check root domain",
        "Check www subdomain",
        "Check Global DNS Propagation",
        "Check from multiple locations",
        "Online DNS Checking Tools",
        "5. SSL Certificate Considerations",
        "Let's Encrypt Requirements",
        "Verify DNS Before SSL",
        "Test HTTP access (before SSL setup)",
        "6. Troubleshooting DNS Issues",
        "Issue: \"DNS_PROBE_FINISHED_NXDOMAIN\"",
        "Issue: \"SSL Certificate Generation Failed\"",
        "Issue: \"Site loads but shows wrong content\"",
        "DNS Propagation Time",
        "7. Multi-Server Deployment Best Practices",
        "Unique Configuration Per Server",
        "Environment Variables Per Server",
        "Server 1",
        "Server 2",
        "Spotify App Configuration",
        "8. Verification Checklist",
        "9. Post-Deployment DNS Updates",
        "DNS Records",
        "DNS Checker",
        "DNS Propagation",
        "MX Toolbox",
        "DNS propagation is complete",
        "Port 80 is accessible",
        "No existing web server",
        "Domain points to correct IP",
        "Solution",
        "Typical time",
        "Maximum time",
        "TTL setting",
        "Unique domain name",
        "Unique IP address",
        "Unique SSL certificates",
        "Separate database",
        "Unique API credentials",
        "Increase TTL",
        "Enable Cloudflare proxy",
        "Add CNAME records",
        "Configure MX records",
        "EchoTune AI - Docker Build Notes",
        "Production Build",
        "Development/Analysis Dependencies",
        "Option 1: Install in development virtual environment (Recommended)",
        "Create development virtual environment",
        "Option 2: Use multi-stage Docker build for development",
        "Use python:3.11-slim instead of alpine for easier package compilation",
        "Install system dependencies",
        "Install all requirements",
        "Option 3: Install additional packages at runtime",
        "What's included in production build:",
        "What's excluded from production build:",
        "EchoTune AI - Enhanced Deployment Script Demo",
        "Key Enhancements Delivered",
        "✅ Permissive Permissions (777)",
        "All deployment directories now use 777 permissions",
        "... and all other directories",
        "✅ Fully Open Firewall",
        "UFW is completely disabled for maximum permissiveness",
        "✅ Full Idempotency",
        "Safe to run multiple times - the script checks and updates everything",
        "✅ Enhanced Docker Management",
        "Always ensures latest Docker with proper permissions",
        "Removes old installations if needed",
        "Sets up user permissions correctly",
        "Configures Docker daemon for production",
        "✅ Comprehensive Dependencies",
        "Auto-installs/updates:",
        "- Node.js 20.x with latest npm",
        "- Python 3 with essential packages",
        "- Docker and Docker Compose",
        "- Build tools (gcc, g++, make, cmake)",
        "- System utilities and monitoring tools",
        "✅ Force Reset Option",
        "Complete clean and reinstall",
        "✅ Enhanced Command Line Options",
        "Standard deployment",
        "Force reset and redeploy",
        "Verbose deployment with detailed logs",
        "Preview what would be done (no actual changes)",
        "Deploy to custom domain",
        "Deploy to custom IP",
        "Combined options",
        "Get help",
        "Check version",
        "Zero Manual Intervention Features",
        "✅ Automated SSL Certificate Handling",
        "✅ Automated User and Directory Setup",
        "✅ Automated Service Configuration",
        "Enhanced Error Handling",
        "✅ Robust Error Recovery",
        "Script continues on non-critical errors",
        "Comprehensive logging with timestamps",
        "Graceful cleanup on failures",
        "Detailed error messages and recovery suggestions",
        "✅ Enhanced Logging Levels",
        "Comprehensive Deployment Summary",
        "✅ System Status",
        "✅ Container and Service Status",
        "✅ Management Information",
        "✅ Next Steps and Documentation",
        "Preserved Original Features",
        "✅ All Original Functionality Maintained",
        "Testing Results",
        "✅ Comprehensive Test Suite",
        "Run the test suite",
        "Results: 13/13 tests passing",
        "Script Statistics",
        "Migration from Original Script",
        "Standard deployment (same as before)",
        "Or with enhanced options",
        "Functions",
        "Command Line Options",
        "drop-in replacement",
        "### ✅ Automated SSL Certificate Handling",
        "### ✅ All Original Functionality Maintained",
        "documentation",
        "🚀 EchoTune AI - Modular Deployment Guide",
        "🎯 Quick Start Options",
        "Option 1: Complete Automated Deployment",
        "One command deploys everything",
        "Option 2: Step-by-Step Deployment",
        "Run each phase individually",
        "Option 3: Targeted Problem Solving",
        "Fix specific issues",
        "📖 Detailed Script Documentation",
        "1. deploy-wizard.sh - Universal Orchestration",
        "Interactive deployment",
        "Non-interactive with custom domain",
        "Skip specific phases",
        "Dry run (show what would be done)",
        "2. deploy-install.sh - System Dependencies",
        "3. deploy-permissions.sh - User Setup and Permissions",
        "4. deploy-environment.sh - Environment Configuration",
        "With domain and email",
        "Interactive prompts",
        "5. deploy-app.sh - Application Deployment",
        "6. deploy-fix.sh - Error Analysis and Repair",
        "Full analysis and automatic fixes",
        "Analysis only (no fixes)",
        "🔧 Environment File Management",
        "Automatic Environment Setup",
        "Environment Files Created",
        "Production Environment (`/opt/echotune/.env`)",
        "Development Environment (`./env`)",
        "Required Spotify API Setup",
        "📊 Monitoring and Management",
        "Service Management Commands",
        "Application service",
        "Nginx service",
        "Application health",
        "Service status",
        "Port checks",
        "Log Files",
        "🚨 Troubleshooting Guide",
        "1. Permission Denied",
        "2. Service Won't Start",
        "Check logs first",
        "Run error analysis",
        "Check environment configuration",
        "3. Port Already in Use",
        "Find process using port",
        "Restart service",
        "4. SSL Certificate Issues",
        "Check SSL files",
        "Regenerate certificates",
        "5. Dependency Issues",
        "Reinstall dependencies",
        "Or run complete dependency fix",
        "6. Database Connection Issues",
        "Test connection",
        "Error Analysis Process",
        "🔄 Deployment Scenarios",
        "New Installation",
        "Complete fresh installation",
        "Update Existing Installation",
        "Update application only",
        "Fix any issues that arise",
        "Fix Broken Installation",
        "Analyze issues first",
        "Apply automatic fixes",
        "Re-run specific phases if needed",
        "Development Setup",
        "Skip installation if already done",
        "Or run just environment setup",
        "📚 Advanced Configuration",
        "Custom Domain Deployment",
        "Selective Phase Execution",
        "Skip phases you don't need",
        "Verbose Debugging",
        "Enable detailed logging",
        "Non-Interactive Automation",
        "For automation scripts",
        "🛡️ Security Considerations",
        "Permissive Configuration",
        "Production Hardening",
        "Useful Commands",
        "Quick status check",
        "View recent logs",
        "Restart everything",
        "Full error analysis",
        "deploy-wizard.sh",
        "deploy-install.sh",
        "deploy-permissions.sh",
        "deploy-environment.sh",
        "deploy-app.sh",
        "deploy-fix.sh",
        "What it installs",
        "What it configures",
        "What it does",
        "Files Created",
        "What it deploys",
        "Services Created",
        "What it analyzes",
        "What it fixes",
        "Generated Reports",
        "Fetches Templates",
        "Generates Secrets",
        "Configures Domain",
        "Creates Documentation",
        "Errors",
        "Nginx Access",
        "Nginx Error",
        "Systemd",
        "Symptoms",
        "Run Error Analysis",
        "Check Generated Report",
        "Review Logs",
        "Apply Recommended Fixes",
        "Re-run Analysis",
        "Directory Permissions",
        "Firewall",
        "Environment Setup",
        "Error Reports",
        "Deployment Status",
        "Error Logs",
        "🚀 EchoTune AI - One-Click Deployment Scripts",
        "🔧 deploy-doctl.sh",
        "🚀 deploy-dotcl.sh",
        "🎯 Quick Start",
        "Clone repository",
        "Set DigitalOcean API token",
        "Deploy with standard automation",
        "Or deploy with enhanced features",
        "Full production deployment with custom domain",
        "Enhanced production deployment with monitoring",
        "🔐 Authentication",
        "Secure Token Management",
        "Token Requirements",
        "🛠️ Installation",
        "Automatic Installation",
        "Manual doctl Installation",
        "Verify",
        "📊 Feature Comparison",
        "🚀 Deployment Options",
        "App Platform Deployment (Default)",
        "Basic App Platform deployment",
        "Production App Platform with database",
        "Droplet Deployment",
        "Basic Droplet deployment",
        "High-performance Droplet",
        "Enhanced Deployments (dotcl)",
        "Interactive wizard",
        "Full-featured deployment",
        "Kubernetes deployment",
        "📈 Advanced Features (dotcl)",
        "Real-time Monitoring",
        "Start monitoring dashboard",
        "Features:",
        "- Live application metrics",
        "- Resource utilization tracking",
        "- Network traffic analysis",
        "- Error rate monitoring",
        "- Performance insights",
        "Security Management",
        "Security scan and hardening",
        "- Vulnerability scanning",
        "- SSL/TLS configuration analysis",
        "- Firewall optimization",
        "- Compliance checking (GDPR, SOC2)",
        "- Security header validation",
        "Cost & Performance Optimization",
        "Analyze and optimize",
        "- Monthly cost breakdown",
        "- Resource right-sizing recommendations",
        "- Performance bottleneck analysis",
        "- Auto-scaling optimization",
        "- Database query optimization",
        "Backup Management",
        "Create backup",
        "Schedule automated backups",
        "🔧 Configuration Options",
        "Command Line Arguments",
        "deploy-doctl.sh Options",
        "deploy-dotcl.sh Commands",
        "Configuration File (dotcl)",
        "dotcl-config.yaml",
        "System Requirements",
        "Required Tools (Auto-installed)",
        "DigitalOcean Account Setup",
        "🎯 Use Cases",
        "Development Environment",
        "Quick development deployment",
        "Staging Environment",
        "Staging with monitoring",
        "Production Environment",
        "Full production setup",
        "Disaster Recovery",
        "Create full backup",
        "⚠️ Troubleshooting",
        "Authentication Problems",
        "Check token format",
        "Test token manually",
        "Re-authenticate",
        "Installation Issues",
        "Permission denied",
        "Missing dependencies",
        "Script execution",
        "Deployment Failures",
        "Debug mode",
        "Check system requirements",
        "Validate configuration",
        "Getting Support",
        "Video Tutorials",
        "Community",
        "🏆 Best Practices",
        "Cost Management",
        "Operational Excellence",
        "Professional-grade deployment using official DigitalOcean CLI",
        "Enhanced deployment with advanced automation features",
        "Environment Variable",
        "Interactive Prompt",
        "Configuration File",
        "Format",
        "Scopes",
        "Source",
        "Kubernetes",
        "Database Creation",
        "SSL/Domain Setup",
        "Security Features",
        "Cost Optimization",
        "Auto-scaling",
        "Performance Tuning",
        "Interactive Wizard",
        "Memory",
        "Network",
        "🎵 Happy Deploying with EchoTune AI! 🎵",
        "### 🚀 deploy-dotcl.sh",
        "- Real-time monitoring dashboard",
        "./deploy-dotcl.sh --interactive",
        "Comparison",
        "| doctl Standard | dotcl Enhanced |",
        "(dotcl)",
        "# - Live application metrics",
        "# - Vulnerability scanning",
        "# - Monthly cost breakdown",
        "monitoring: true",
        "🚀 One-Click Deployment Guide",
        "🌟 **Enhanced Quick Deploy Options**",
        "1. **DigitalOcean App Platform (Recommended)**",
        "2. **Enhanced One-Click Script (Any Platform)**",
        "Download and run with enhanced error handling",
        "Or clone first for full validation",
        "3. **Docker Deployment**",
        "Quick Docker run",
        "Or with docker-compose",
        "4. **GitHub Codespaces (Instant Demo)**",
        "🔧 **Environment Configuration**",
        "**Required for Full Functionality**",
        "Spotify API (Get from https://developer.spotify.com/dashboard)",
        "AI Providers (Optional - uses demo mode if not set)",
        "Database (Optional - uses SQLite if not set)",
        "**Demo Mode (No API Keys Needed)**",
        "🌊 **DigitalOcean App Platform - Detailed Guide**",
        "**Step 1: Deploy**",
        "**Step 2: Configure (Optional)**",
        "**Step 3: Custom Domain (Optional)**",
        "**Cost Breakdown:**",
        "💧 **DigitalOcean Droplet Deployment**",
        "**Quick Setup Script**",
        "Create Ubuntu 22.04 droplet, then run:",
        "**Manual Setup**",
        "1. Create Ubuntu 22.04 droplet",
        "2. SSH into droplet",
        "3. Run setup",
        "**Recommended Droplet Sizes:**",
        "🐳 **Docker Deployment Guide**",
        "**Simple Docker Run**",
        "**Docker Compose (Recommended)**",
        "Edit .env with your credentials",
        "Deploy",
        "**Docker Deployment on Cloud Platforms**",
        "**AWS ECS**",
        "Use the provided app.yaml adapted for ECS",
        "Or deploy directly from Docker Hub",
        "**Google Cloud Run**",
        "**Azure Container Instances**",
        "🚀 **GitHub Actions Auto-Deployment**",
        "**Setup Auto-Deploy**",
        "**Available Workflows**",
        "✅ **Enhanced Post-Deployment Validation**",
        "**Automatic Validation with Comprehensive Checks**",
        "Validate your deployment with enhanced testing",
        "For remote deployments",
        "Run comprehensive deployment tests",
        "**Enhanced Validation Features**",
        "**Manual Health Checks**",
        "**Quick Feature Test**",
        "🔒 **Security & Production Hardening**",
        "**Automatic Security (App Platform)**",
        "**Droplet Security Hardening**",
        "Run security hardening script",
        "🔍 **Enhanced Troubleshooting**",
        "**Common Issues with Solutions**",
        "**❌ Package Installation Failed**",
        "Enhanced error handling provides specific guidance",
        "Check the detailed error message for:",
        "1. Network connectivity issues",
        "2. Package repository problems",
        "3. Insufficient disk space",
        "4. Permission issues",
        "**❌ Permission Errors**",
        "Enhanced permission handling provides safe operations",
        "If permission issues occur:",
        "Fix directory ownership",
        "Fix Docker group membership",
        "Fix directory permissions",
        "**❌ Deployment Failed**",
        "Enhanced scripts provide detailed error context",
        "Check deployment logs and follow provided guidance",
        "Re-run deployment (idempotent)",
        "Check deployment logs",
        "Validate deployment health",
        "**❌ Environment Configuration Issues**",
        "Enhanced validation catches common problems",
        "Create proper .env file:",
        "Validate environment",
        "Check environment variables",
        "**Enhanced Debugging Tools**",
        "Run specific diagnostic tests",
        "Check script syntax",
        "Validate Docker setup",
        "**Getting Help**",
        "🎵 **What's Next?**",
        "Enhanced Quick Deploy Options",
        "DigitalOcean App Platform (Recommended)",
        "✅ Why App Platform:",
        "⚡ Deploy Process:",
        "Enhanced One-Click Script (Any Platform)",
        "🎯 Enhanced Features:",
        "Robust Package Installation",
        "Smart Error Recovery",
        "Permission Management",
        "Idempotent Operations",
        "Auto-platform Detection",
        "🔧 Auto-detects and optimizes for:",
        "Docker Deployment",
        "GitHub Codespaces (Instant Demo)",
        "Required for Full Functionality",
        "Demo Mode (No API Keys Needed)",
        "DigitalOcean App Platform - Detailed Guide",
        "Step 1: Deploy",
        "Step 2: Configure (Optional)",
        "Step 3: Custom Domain (Optional)",
        "Cost Breakdown:",
        "Starter:",
        "Basic:",
        "Professional:",
        "DigitalOcean Droplet Deployment",
        "Quick Setup Script",
        "Manual Setup",
        "Recommended Droplet Sizes:",
        "$6/month:",
        "$12/month:",
        "$24/month:",
        "Docker Deployment Guide",
        "Simple Docker Run",
        "Docker Compose (Recommended)",
        "Docker Deployment on Cloud Platforms",
        "AWS ECS",
        "Google Cloud Run",
        "Azure Container Instances",
        "GitHub Actions Auto-Deployment",
        "Setup Auto-Deploy",
        "Available Workflows",
        "Continuous Deployment:",
        "Manual Deployment:",
        "Multi-Platform:",
        "Enhanced Post-Deployment Validation",
        "Automatic Validation with Comprehensive Checks",
        "Enhanced Validation Features",
        "Package Installation Testing",
        "Permission Validation",
        "Error Handling Verification",
        "Environment Validation",
        "Service Health Checks",
        "Idempotency Testing",
        "Manual Health Checks",
        "Quick Feature Test",
        "Access main interface:",
        "Test chat:",
        "Check dashboard:",
        "Try voice interface:",
        "Test mobile:",
        "Security & Production Hardening",
        "Automatic Security (App Platform)",
        "Droplet Security Hardening",
        "Includes:",
        "Enhanced Troubleshooting",
        "Common Issues with Solutions",
        "❌ Package Installation Failed",
        "❌ Permission Errors",
        "❌ Deployment Failed",
        "❌ Environment Configuration Issues",
        "Enhanced Debugging Tools",
        "Documentation:",
        "Bug Reports:",
        "Community:",
        "What's Next?",
        "🎵 Configure Spotify Integration",
        "🤖 Enhance AI Features",
        "📊 Set Up Analytics",
        "🌐 Production Optimization",
        "📱 Mobile Experience",
        "🎉 Enjoy your AI-powered music discovery platform!",
        "### **Step 3: Custom Domain (Optional)**",
        "Test**",
        "3. **📊 Set Up Analytics**",
        "- Set up push notifications",
        "🚀 EchoTune AI Pre-Installation Requirements Guide",
        "🔑 Required API Keys & Secrets",
        "1. Spotify Developer Account (REQUIRED for Production)",
        "2. Google Gemini API Key (Recommended for AI Features)",
        "3. OpenAI API Key (Alternative to Gemini)",
        "4. Database Configuration",
        "Option A: MongoDB Atlas (Recommended)",
        "Option B: Local MongoDB",
        "🌐 Domain & DNS Requirements",
        "Domain Registration",
        "Server Requirements",
        "📋 Pre-Installation Checklist",
        "✅ Essential Information",
        "✅ Spotify API (Required for Production)",
        "✅ AI Provider (Optional but Recommended)",
        "✅ Database (Choose One)",
        "✅ DNS Configuration",
        "🔧 Deployment Modes",
        "1. Production Mode",
        "2. Demo Mode",
        "3. Development Mode",
        "🚀 Quick Start Commands",
        "Interactive Wizard (Recommended)",
        "Download and run the wizard",
        "Manual Download and Run",
        "Download the wizard",
        "Make executable and run",
        "🔒 Security Notes",
        "Protect Your Secrets",
        "Recommended Security Practices",
        "🆘 Troubleshooting Common Issues",
        "\"DNS_PROBE_FINISHED_NXDOMAIN\"",
        "\"Connection Refused\" during SSL setup",
        "\"Spotify API Invalid Redirect URI\"",
        "\"MongoDB Connection Failed\"",
        "\"Python Package Installation Failed\"",
        "📞 Support Resources",
        "before",
        "Setup Instructions:",
        "App Name",
        "App Description",
        "Redirect URI",
        "Website",
        "Client ID",
        "Client Secret",
        "Required Scopes:",
        "Required DNS Records:",
        "Popular Domain Registrars:",
        "Minimum Specifications:",
        "Popular VPS Providers:",
        "Requirements",
        "Recommended for",
        "Never commit API keys",
        "Use environment variables",
        "Generate strong passwords",
        "Enable UFW firewall",
        "Keep SSL certificates updated",
        "DNS Configuration",
        "Run the deployment wizard",
        "Follow the interactive prompts",
        "Verify the deployment",
        "Test the health endpoint",
        "Configure additional features",
        "Ready to deploy your AI-powered music platform!",
        "🚀 EchoTune AI - Production Deployment Guide",
        "Production Readiness Status: ✅ READY",
        "🎯 Quick Production Deployment",
        "One-Command Deployment",
        "1. SSH into your server",
        "2. Clone repository and install doctl with GH_PAT",
        "Set GitHub PAT for authentication (if available)",
        "Auto-install doctl with GH_PAT integration",
        "3. Run automated deployment",
        "4. Configure credentials (REQUIRED)",
        "Update SPOTIFY_CLIENT_ID and SPOTIFY_CLIENT_SECRET",
        "5. Restart services",
        "🛠️ doctl Auto-Installation with GitHub PAT",
        "Quick Installation",
        "Basic installation",
        "With environment variables",
        "In CI/CD pipeline",
        "Authentication Workflow",
        "Required for GitHub integration",
        "Required for DigitalOcean operations",
        "Optional - fallback authentication",
        "Usage in CI/CD",
        "GitHub Actions example",
        "Manual doctl Setup",
        "Download and install doctl manually",
        "📋 Manual Production Setup",
        "1. System Requirements",
        "Start Docker",
        "2. Application Deployment",
        "Edit .env with your production settings",
        "3. Required Environment Variables",
        "Core Configuration",
        "Security (Auto-generated by deployment script)",
        "Optional: LLM Providers",
        "Optional: Database",
        "4. Production Services",
        "Using Docker (Recommended)",
        "Or using PM2",
        "🔒 Security Configuration",
        "SSL/HTTPS Setup",
        "Install Certbot",
        "Get SSL certificate",
        "Auto-renewal",
        "Add: 0 12 * * * /usr/bin/certbot renew --quiet",
        "Firewall Configuration",
        "🏥 Health Monitoring",
        "Application Status",
        "Expected healthy response:",
        "Docker operations",
        "📊 Production Features",
        "✅ Fully Functional",
        "🔄 Environment Detection",
        "🛠️ Troubleshooting",
        "Application Won't Start",
        "Verify environment",
        "Check port availability",
        "Database Connection Issues",
        "Check MongoDB connection",
        "Ensure connection string is correct and IP is whitelisted",
        "SQLite fallback should work automatically",
        "SSL Certificate Issues",
        "Verify certificate",
        "Renew manually",
        "Check Nginx configuration",
        "Enable Nginx caching",
        "Add to nginx.conf:",
        "Monitor application performance",
        "🔄 Maintenance",
        "Regular Tasks",
        "Backup data",
        "Monitor logs",
        "Updates and Security",
        "System updates",
        "Docker image updates",
        "Certificate renewal (automatic via cron)",
        "API Credentials",
        "🎉 Success Indicators",
        "Last Validated:",
        "Readiness Score:",
        "Auto-Detection",
        "Latest Version",
        "GH_PAT Integration",
        "Fallback Options",
        "Validation",
        "GitHub CLI Authentication",
        "Token Management",
        "doctl Configuration",
        "Database Layer",
        "AI Chat System",
        "Production Mode",
        "Demo Mode",
        "Production Readiness",
        "Congratulations! Your EchoTune AI instance is production-ready!",
        "- **Auto-Detection**: Automatically detects platform (Linux/macOS) and architecture",
        "OPENAI_API_KEY=your_openai_api_key  # Alternative to Gemini",
        "### ✅ Fully Functional",
        "EchoTune AI - Production Deployment Optimization Guide",
        "Problem Statement Analysis",
        "Current Deployment Issues",
        "Specific Issues Identified",
        "Node.js Dependencies",
        "Python Dependencies",
        "System Dependencies",
        "Optimization Solutions",
        "1. Production-Optimized Deployment Script",
        "2. Minimal Requirements File",
        "3. Optimized Dockerfile",
        "4. Production Package Configuration",
        "Deployment Comparison",
        "Resource Usage Comparison",
        "Feature Comparison",
        "Implementation Steps",
        "1. Use Optimized Deployment Script",
        "Copy and run the optimized deployment script",
        "2. Build Minimal Docker Image",
        "Build optimized container",
        "Run with resource constraints",
        "3. Validate Optimization",
        "Run validation tests",
        "Check for unwanted packages",
        "Security Benefits",
        "Reduced Attack Surface",
        "Production Security Hardening",
        "Performance Benefits",
        "Faster Deployment",
        "Better Resource Utilization",
        "Operational Benefits",
        "Simplified Maintenance",
        "Migration Path",
        "For Existing Deployments",
        "For New Deployments",
        "Troubleshooting",
        "If Features Are Missing",
        "Missing ML Capabilities",
        "Install ML packages separately if needed",
        "Missing Development Tools",
        "Use full package.json for development",
        "Monitoring and Validation",
        "Continuous Validation",
        "Resource usage",
        "Dependency validation",
        "Conclusion",
        "Unnecessary Dependencies",
        "Coding Agent Tools",
        "Heavy ML Packages",
        "Resource Waste",
        "Testing Frameworks",
        "Build Tools",
        "Audio Processing",
        "Key Features",
        "Configuration Flags",
        "Includes Only",
        "Excludes",
        "Optimizations",
        "Fewer Dependencies",
        "No Browser Tools",
        "No Development Tools",
        "Minimal Base Image",
        "Non-root User",
        "Read-only Filesystems",
        "Minimal Permissions",
        "No Development Ports",
        "68% Smaller Images",
        "60% Faster Builds",
        "50% Lower Memory",
        "CPU Efficiency",
        "Memory Efficiency",
        "Disk Efficiency",
        "Network Efficiency",
        "Fewer Updates",
        "Easier Debugging",
        "Better Monitoring",
        "Cleaner Logs",
        "Lower Resource Requirements",
        "Reduced Bandwidth",
        "Faster Scaling",
        "Backup Current Deployment",
        "Test Optimized Version",
        "Gradual Migration",
        "Check Excluded Dependencies",
        "Add Specific Packages",
        "Use Separate Containers",
        "Automated Tests",
        "Resource Monitoring",
        "Security Scanning",
        "68% reduction in Docker image size",
        "82% fewer Node.js dependencies",
        "60% faster build times",
        "50% lower memory usage",
        "Improved security posture",
        "Better production performance",
        "| Original | Optimized | Notes |",
        "Are Missing",
        "set during development while deploying only essential components to production.",
        "🆘 EchoTune AI - Comprehensive Troubleshooting Guide",
        "🔍 Quick Diagnosis",
        "Health Check First",
        "Common Status Responses",
        "🚨 Application Issues",
        "1. Application Won't Start",
        "Check if port is in use",
        "Kill process using port 3000",
        "Install missing dependencies",
        "Fix environment variables",
        "Edit .env with proper values",
        "2. Chat Interface Not Working",
        "Option 1: Use demo mode (works without API keys)",
        "Option 2: Add valid API keys",
        "Restart application",
        "3. Spotify OAuth Errors",
        "Check Spotify app configuration",
        "Redirect URI must exactly match:",
        "Verify credentials in .env",
        "Test OAuth endpoint",
        "4. Database Connection Issues",
        "Check MongoDB connection string format",
        "Correct: mongodb+srv://user:pass@cluster.mongodb.net/dbname",
        "Check network access in MongoDB Atlas",
        "SQLite files should appear in project directory",
        "SQLite works without external database",
        "Application automatically falls back to SQLite",
        "🤖 MCP Tools Issues",
        "Enhanced File Utilities Not Working",
        "Browser Automation Issues",
        "Install browser dependencies",
        "Test browser tools",
        "Check Puppeteer installation",
        "Comprehensive Validator Failures",
        "Run full system validation",
        "Check individual components",
        "⚡ Performance Issues",
        "Slow Health Checks",
        "Development mode skips slow network checks",
        "Check current performance",
        "Memory Issues",
        "Check system resources",
        "EchoTune AI requirements:",
        "- Minimum: 1GB RAM, 5GB disk",
        "- Recommended: 2GB RAM, 10GB disk",
        "🔒 SSL & Security Issues",
        "Let's Encrypt Certificate Problems",
        "Check domain DNS",
        "Should return your server IP",
        "Verify port 80 is accessible",
        "Manual certificate generation",
        "Check certificate status",
        "Security Headers Missing",
        "Check security headers",
        "Test rate limiting",
        "Should show 429 (rate limited) after threshold",
        "Container Won't Start",
        "Check Docker daemon",
        "Check container logs",
        "Rebuild containers",
        "Check resource allocation",
        "Port Conflicts",
        "Use different ports",
        "This uses alternative port configuration",
        "🔧 Debug Mode",
        "Enable Debug Logging",
        "Add to .env file",
        "Debug Output Examples",
        "Successful startup",
        "Common warnings (acceptable)",
        "📊 Monitoring & Diagnostics",
        "Check endpoint response times",
        "Network Diagnostics",
        "Test external API access",
        "Test DNS resolution",
        "Self-Help Resources",
        "Community Support",
        "When Reporting Issues",
        "1. System information",
        "2. Health check output",
        "3. Recent logs",
        "4. Environment (without secrets)",
        "🔄 Recovery Procedures",
        "Complete Reset (Development)",
        "Clean reset",
        "Restart",
        "Backup & Restore",
        "Backup SQLite database",
        "Backup configuration",
        "Browser Tools Failing",
        "Comprehensive Validator Errors",
        "Workflow Issues",
        "GitHub Actions Failing",
        "Cache Issues",
        "Application Issues",
        "Linting Errors",
        "Test Failures",
        "Slow MCP Operations",
        "Memory Leaks",
        "🔧 Diagnostic Commands",
        "System Health Check",
        "Comprehensive system validation",
        "Quick health check",
        "MCP servers status",
        "Performance Diagnostics",
        "MCP integration test with performance metrics",
        "File utilities performance",
        "Browser tools performance",
        "Workflow Analysis",
        "Analyze workflow efficiency",
        "Generate optimization report",
        "Check workflow status",
        "🐛 Debug Mode",
        "Verbose Testing",
        "Run tests with detailed output",
        "Run specific test files",
        "Run performance tests",
        "MCP Debug Mode",
        "🔍 Log Analysis",
        "Check for errors in application logs",
        "Monitor real-time logs",
        "MCP Operation Logs",
        "View recent MCP operations",
        "Check for failed operations",
        "Workflow Logs",
        "Check GitHub Actions logs locally",
        "📞 Getting Additional Help",
        "Generate Support Information",
        "Create comprehensive diagnostic report",
        "EchoTune AI Support Information",
        "System Information",
        "MCP Status",
        "Recent Errors",
        "Package Info",
        "Performance Report",
        "Generate performance report",
        "Security Audit",
        "Run security audit",
        "⚡ Quick Fixes",
        "Reset to Clean State",
        "Clean install",
        "Reset MCP servers",
        "Clear caches",
        "Emergency Recovery",
        "Or restore specific files",
        "Minimal Working Configuration",
        "Set minimal environment",
        "Test basic functionality",
        "\"healthy\"",
        "\"warning\"",
        "\"unhealthy\"",
        "Diagnose",
        "MongoDB Issues",
        "SQLite Fallback",
        "Check allowed directories",
        "Verify file permissions",
        "Expected Performance",
        "Optimization",
        "Check Health Endpoint",
        "Validate Environment",
        "Test Connectivity",
        "🎯 Still having issues?",
        "Configure browser path",
        "Fix security issues",
        "Set required environment variables",
        "Check workflow syntax",
        "Optimize workflows",
        "Apply optimizations",
        "Clear npm cache",
        "Update cache keys",
        "Run automatic fixes",
        "Fix specific error types",
        "Check test environment",
        "Fix common issues",
        "Check connection strings",
        "Use SQLite fallback",
        "Check performance metrics",
        "Optimize operations",
        "Clear audit logs",
        "Enable garbage collection",
        "Monitor memory usage",
        "Optimize batch sizes",
        "unavailable",
        "Ubuntu 22.04 LTS Complete Deployment Guide for EchoTune AI",
        "⚡ Quick Start",
        "Option 1: Ultra-Fast One-Command Deployment",
        "Complete setup including Docker installation (recommended)",
        "Option 2: Clone and Deploy",
        "Run Ubuntu 22 setup script",
        "🔧 System Requirements",
        "Minimum Requirements",
        "Recommended Production Setup",
        "Prerequisites Checklist",
        "🚀 Pre-Installation Setup",
        "1. Connect to Your Ubuntu 22.04 Server",
        "SSH into your server",
        "Switch to root or ensure sudo access",
        "2. Update System Packages",
        "Update package lists and upgrade system",
        "Install essential tools",
        "3. Configure Basic Security",
        "Verify firewall status",
        "🎯 One-Click Installation",
        "Features Included:",
        "Run Installation:",
        "Download and run the Ubuntu 22.04 setup script",
        "Post-Installation Verification:",
        "Verify Docker installation",
        "Verify Node.js installation",
        "Verify nginx installation",
        "Check if echotune user was created",
        "🔧 Manual Installation",
        "1. Install Docker Engine for Ubuntu 22.04",
        "Remove any old Docker installations",
        "Add Docker's official GPG key",
        "Add Docker repository for Ubuntu 22.04 (jammy)",
        "Update package index and install Docker",
        "Start and enable Docker",
        "Add your user to docker group (replace 'username' with your username)",
        "2. Install Node.js 20.x LTS",
        "Add NodeSource repository",
        "Install Node.js",
        "Install PM2 globally",
        "3. Install nginx",
        "Install nginx",
        "Enable and start nginx",
        "Verify nginx is running",
        "4. Install SSL Tools",
        "Install Certbot for Let's Encrypt",
        "5. Create Application Environment",
        "Create echotune user and directories",
        "Create necessary directories",
        "Add echotune to docker group",
        "1. Deploy EchoTune AI Application",
        "Switch to echotune user and directory",
        "Copy and configure environment",
        "2. Configure Environment Variables",
        "=== REQUIRED SETTINGS ===",
        "Replace with your domain",
        "Spotify API (get from https://developer.spotify.com/)",
        "Generate secure secrets",
        "SSL paths (will be created during SSL setup)",
        "=== OPTIONAL SETTINGS ===",
        "AI providers (demo works without these)",
        "Database (MongoDB Atlas or local)",
        "🔒 SSL Setup",
        "Option 1: Let's Encrypt (Recommended)",
        "Stop nginx temporarily",
        "Copy certificates to application directory",
        "Set up automatic renewal",
        "Start nginx again",
        "Option 2: Self-Signed Certificate (Development)",
        "Generate self-signed certificate",
        "Set proper permissions",
        "🌐 Domain Configuration",
        "1. DNS Setup",
        "Check your server's public IP",
        "Configure DNS records (do this in your domain registrar):",
        "A record: your-domain.com -> YOUR_SERVER_IP",
        "A record: www.your-domain.com -> YOUR_SERVER_IP",
        "2. Configure nginx",
        "Use the Ubuntu 22.04 optimized nginx configuration",
        "Substitute environment variables",
        "Enable the site",
        "Test nginx configuration",
        "Reload nginx",
        "🚀 Deployment",
        "1. Build and Start Application",
        "Switch to application directory as echotune user",
        "Install dependencies and build",
        "Start with Docker Compose",
        "2. Verify Deployment",
        "Check Docker containers",
        "Check nginx status",
        "3. Test External Access",
        "Test HTTP access (should redirect to HTTPS)",
        "Test HTTPS access",
        "📊 Monitoring & Maintenance",
        "Helpful Management Commands",
        "Application management",
        "System management",
        "Regular Maintenance Tasks",
        "Update system packages (monthly)",
        "Clean Docker resources (weekly)",
        "Backup Procedures",
        "Create backup script",
        "Backup application data",
        "Backup MongoDB (if using)",
        "Clean old backups (keep last 7 days)",
        "Set up daily backup cron job",
        "1. Docker Installation Issues",
        "Issue: \"docker: command not found\"",
        "Solution: Reinstall Docker",
        "Issue: Permission denied for docker commands",
        "Solution: Add user to docker group",
        "Log out and back in",
        "2. nginx Configuration Issues",
        "Issue: nginx fails to start",
        "Solution: Check configuration syntax",
        "Issue: SSL certificate errors",
        "Solution: Verify certificate paths and permissions",
        "3. Application Issues",
        "Issue: Application won't start",
        "Solution: Check logs and environment",
        "Solution: Verify application is running and accessible",
        "Issue: Let's Encrypt certificate failed",
        "Solution: Check domain DNS and firewall",
        "Issue: Certificate expired",
        "Solution: Renew certificate",
        "Issue: High memory usage",
        "Solution: Monitor and optimize",
        "Consider upgrading server resources",
        "Issue: Slow response times",
        "Solution: Check nginx and application logs",
        "Debug Commands",
        "System information",
        "Network diagnostics",
        "Docker diagnostics",
        "nginx diagnostics",
        "🎯 Production Optimization",
        "Disable unused services",
        "Configure automatic security updates",
        "Set up fail2ban for intrusion protection",
        "Optimize system limits",
        "Optimize kernel parameters",
        "Monitoring Setup",
        "Install monitoring tools",
        "Set up log rotation",
        "Access Your Application:",
        "Need Help?",
        "Docker Engine",
        "Docker Compose",
        "Node.js 20.x LTS",
        "SSL Tools",
        "User Setup",
        "Helpful Aliases",
        "Check Logs First",
        "Common Log Locations",
        "🎵 Your AI-powered music discovery platform is ready to rock!",
        "Included:",
        "🚀 EchoTune AI - Complete Ubuntu Deployment Guide",
        "🔧 Prerequisites",
        "⚡ Quick Deployment (Recommended)",
        "📖 Manual Step-by-Step Deployment",
        "Step 1: Install Dependencies",
        "Update system",
        "Install Node.js 20.x",
        "Install Docker Compose",
        "Install certbot for SSL",
        "Step 2: Clone and Setup Application",
        "Copy environment configuration",
        "Spotify API Configuration",
        "Security Secrets (Generate new values!)",
        "Step 4: Configure nginx",
        "Create nginx configuration",
        "Step 5: SSL Certificate Setup",
        "Create webroot directory",
        "Setup auto-renewal",
        "Step 6: Create System Service",
        "Create systemd service",
        "Security settings",
        "Move application to /opt",
        "Enable and start service",
        "Option 1: Docker Compose (Recommended)",
        "Create environment file",
        "Edit .env.production with your settings",
        "Start services",
        "Option 2: Docker Run",
        "Pull the image",
        "Run the container",
        "Building Custom Image",
        "Build image",
        "Run your custom image",
        "☁️ DigitalOcean Deployment",
        "Option 1: App Platform (Recommended)",
        "Option 2: One-Click Deploy",
        "Option 3: Droplet Deployment",
        "Create Ubuntu 22.04 droplet (2GB+ RAM recommended)",
        "SSH into droplet",
        "Clone and deploy",
        "📦 DockerHub Integration",
        "Automated Builds",
        "Manual Docker Push",
        "Login to DockerHub",
        "Push image",
        "Tag specific version",
        "Use Published Image",
        "Pull from DockerHub",
        "Run published image",
        "🔒 SSL Configuration",
        "Automatic SSL (Recommended)",
        "SSL is configured automatically with the wizard",
        "Manual SSL Setup",
        "Obtain certificate",
        "Test renewal",
        "Custom SSL Certificates",
        "Copy your certificates",
        "Update nginx configuration",
        "Update ssl_certificate and ssl_certificate_key paths",
        "Check if port is available",
        "Test SSL configuration",
        "Docker Issues",
        "Check Docker status",
        "nginx Issues",
        "View error logs",
        "Check application performance",
        "Docker health (if using Docker)",
        "Log Management",
        "View application logs",
        "View nginx logs",
        "Backup Setup",
        "Backup database (if using local database)",
        "mongodump --out $BACKUP_DIR/mongodb_$DATE",
        "Clean old backups (keep 30 days)",
        "Schedule daily backups",
        "Security Updates",
        "Update Node.js dependencies",
        "🔧 Configuration Reference",
        "Port Configuration",
        "File Locations",
        "📞 Support",
        "Quick Commands Reference",
        "Update SSL",
        "Fork the repository",
        "Go to DigitalOcean App Platform",
        "Create New App",
        "Select your fork",
        "Configure settings",
        "Set environment variables",
        "Set up DockerHub secrets",
        "Push changes",
        "Images are pushed",
        "nginx config",
        "SSL certificates",
        "🎉 Congratulations!",
        "🎵 EchoTune AI - Clean Deployment Guide",
        "🚀 **Ultra-Simple Deployment Options**",
        "🧙‍♂️ **Option 1: Interactive Wizard (Recommended for Beginners)**",
        "Download and run the interactive wizard",
        "Or if you've cloned the repository",
        "⚡ **Option 2: Clean Deploy Script (For Quick Setup)**",
        "One-command deployment with auto-detection",
        "Or locally",
        "Force specific deployment methods",
        "🌊 **Option 3: One-Click Cloud Deploy**",
        "📊 **Deployment Method Comparison**",
        "🛠️ **System Requirements**",
        "**Minimum Requirements:**",
        "**Optional for Enhanced Features:**",
        "**Quick Install Commands:**",
        "⚙️ **Configuration Made Easy**",
        "**Spotify Integration (Recommended)**",
        "**AI Enhancement (Optional)**",
        "🚀 **Quick Commands Reference**",
        "**NPM Scripts (Available after setup)**",
        "Start the application",
        "Run health checks",
        "Start MCP automation server",
        "Test deployment components",
        "Quick deployment commands",
        "**Direct Scripts**",
        "Interactive wizard (best for beginners)",
        "Clean deployment (quick setup)",
        "Force local development",
        "Force Docker deployment",
        "🎯 **Deployment Flows**",
        "**🧙‍♂️ Wizard Flow (Recommended)**",
        "**⚡ Clean Deploy Flow**",
        "🔧 **Troubleshooting**",
        "**Common Issues & Solutions**",
        "Update Node.js (macOS)",
        "Update Node.js (Linux)",
        "Fix npm permissions (Linux/macOS)",
        "Alternative: use npx instead of global installs",
        "Find process using port 3000",
        "Kill process",
        "Or use different port",
        "Start Docker service (Linux)",
        "🎉 **Success! What's Next?**",
        "**🎵 Immediate Actions**",
        "**🔧 Advanced Features**",
        "**📊 Analytics & Monitoring**",
        "🌟 **Why Choose EchoTune AI?**",
        "Ultra-Simple Deployment Options",
        "Option 1: Interactive Wizard (Recommended for Beginners)",
        "✨ What the wizard does:",
        "Option 2: Clean Deploy Script (For Quick Setup)",
        "🎯 Features:",
        "Option 3: One-Click Cloud Deploy",
        "Benefits:",
        "Deployment Method Comparison",
        "Minimum Requirements:",
        "Optional for Enhanced Features:",
        "Quick Install Commands:",
        "macOS:",
        "Ubuntu/Debian:",
        "CentOS/RHEL:",
        "Windows:",
        "Configuration Made Easy",
        "Spotify Integration (Recommended)",
        "Create Spotify App:",
        "Get Credentials:",
        "AI Enhancement (Optional)",
        "OpenAI Setup:",
        "Google Gemini Setup:",
        "NPM Scripts (Available after setup)",
        "Direct Scripts",
        "Deployment Flows",
        "🧙‍♂️ Wizard Flow (Recommended)",
        "Introduction",
        "System Check",
        "Method Selection",
        "Success",
        "⚡ Clean Deploy Flow",
        "Prerequisites Check",
        "Environment Detection",
        "Instructions",
        "Common Issues & Solutions",
        "Node.js Version Issues:",
        "Permission Issues:",
        "Port Already in Use:",
        "Docker Issues:",
        "📚 Documentation:",
        "🐛 Support:",
        "Success! What's Next?",
        "🎵 Immediate Actions",
        "Visit your app",
        "Connect Spotify",
        "Try the AI chat",
        "Upload listening data",
        "🔧 Advanced Features",
        "Enable MCP automation",
        "Configure additional AI providers",
        "Set up MongoDB",
        "Deploy to production",
        "📊 Analytics & Monitoring",
        "Health endpoint",
        "API status",
        "Metrics dashboard",
        "Why Choose EchoTune AI?",
        "AI-Powered",
        "Personalized",
        "Conversational",
        "Automated",
        "Extensible",
        "Production-Ready",
        "Ready to discover your next favorite song? Let's get started! 🎶",
        "- **MongoDB**: For advanced data storage",
        "🚀 EchoTune AI - Complete Deployment Guide",
        "🎯 Quick Deployment Summary",
        "🌊 DigitalOcean App Platform (Recommended)",
        "One-Click Deploy",
        "Quick Start",
        "Edit .env with your settings",
        "Deploy with Docker Compose",
        "Production Setup",
        "Use production compose file",
        "Scale services",
        "Services Included",
        "🔮 Universal Script Deployment",
        "One-Command Deploy",
        "Download and run universal deployment script",
        "What It Does",
        "Advanced Options",
        "Custom deployment with specific options",
        "🔧 Manual Deployment",
        "Install Node.js 20",
        "Install additional tools",
        "Step 2: Clone and Setup",
        "Step 3: Configure SSL",
        "Setup SSL certificates",
        "Step 4: Configure Nginx",
        "Copy nginx configuration",
        "Enable site",
        "Step 5: Setup System Service",
        "⚙️ Environment Configuration",
        "Required Variables",
        "Spotify API (required for full functionality)",
        "Optional Variables",
        "AI Providers (demo mode if not set)",
        "Database (SQLite fallback if not set)",
        "🏥 Health Check & Validation",
        "Basic Health Check",
        "Expected Response",
        "Performance Validation",
        "Test response times",
        "Expected: < 100ms for /health, < 500ms for others",
        "🔒 Security Hardening",
        "Automatic Security (Universal Script)",
        "Manual Security Setup",
        "Configure firewall",
        "Install fail2ban",
        "Configure rate limiting in nginx",
        "(Handled automatically by our nginx config)",
        "Common fixes",
        "Check MongoDB status",
        "For remote MongoDB, verify connection string",
        "SQLite fallback works without external database",
        "📊 Deployment Comparison",
        "Performance Benchmarks",
        "When to Use Each",
        "Universal Script",
        "echotune-app",
        "echotune-nginx",
        "echotune-mongodb",
        "echotune-redis",
        "Database connection failed:",
        "DigitalOcean App Platform:",
        "Docker:",
        "Universal Script:",
        "Manual Setup:",
        "Configure API Keys",
        "Monitor Performance",
        "SSL Renewal",
        "🌟 Need help?",
        "- ✅ Automatic SSL certificates",
        "🎵 EchoTune AI - Digital Ocean Deployment Guide",
        "Digital Ocean Account Setup",
        "Spotify Developer Setup",
        "Server Setup",
        "Step 1: Create Digital Ocean Droplet",
        "Step 2: Initial Server Access",
        "Connect to your droplet (replace with your IP)",
        "Create application user (if connecting as root)",
        "Step 3: Enhanced Automated Setup",
        "Download and run the comprehensive setup script",
        "Step 1: DNS Configuration",
        "Step 2: Verify DNS Propagation",
        "Check DNS propagation",
        "Verify from multiple locations",
        "Application Deployment",
        "Step 1: Environment Configuration (Automated)",
        "The deployment scripts automatically:",
        "✅ Detect existing .env files",
        "✅ Validate required environment variables",
        "✅ Use existing values where possible",
        "✅ Apply production defaults automatically",
        "✅ Provide clear error messages for missing variables",
        "Production Settings (auto-configured for production)",
        "Monitoring",
        "Generate secure session secret",
        "Generate JWT secret",
        "Step 2: Automated Database Configuration",
        "Step 3: One-Command Deployment",
        "Automatic SSL Setup (Recommended)",
        "SSL is configured automatically during deployment",
        "Manual setup if needed:",
        "Manual SSL Configuration",
        "Generate certificates manually",
        "SSL Certificate Monitoring",
        "Step 1: Run Security Hardening Script",
        "Step 2: Security Verification",
        "Check firewall status",
        "Verify SSH configuration",
        "Check for security updates",
        "Step 3: Additional Security Measures",
        "Only allow necessary ports",
        "Step 1: Comprehensive Monitoring",
        "Check monitoring service status",
        "View monitoring logs",
        "Check system metrics",
        "Step 2: Health Check Endpoints",
        "Step 3: Alerting Configuration",
        "Backup Configuration",
        "Step 1: Automated Backup Setup",
        "Run manual backup",
        "View backup status",
        "Step 2: Backup Scheduling",
        "View backup schedule",
        "Backup runs daily at 2 AM by default",
        "Logs available in /opt/echotune/logs/backup.log",
        "Step 3: Remote Backup (Optional)",
        "Maintenance Procedures",
        "Maintenance Commands",
        "View application status",
        "System resource usage",
        "Disk usage",
        "Network connections",
        "Memory usage",
        "View system logs",
        "Automated Edge Case Handling",
        "The scripts will automatically:",
        "1. Search multiple locations for .env files",
        "2. Create from template if none found",
        "3. Apply production defaults",
        "4. Provide clear guidance on required values",
        "Automatic validation catches missing variables:",
        "Smart validation detects common issues:",
        "If you encounter: \"fatal: destination path '.' already exists and is not an empty directory\"",
        "The improved deployment scripts now handle this automatically:",
        "Resolution options:",
        "Option 1: Clean and restart (recommended for fresh setups)",
        "Option 2: Backup and clean",
        "Option 3: Manual git initialization (if you have important files)",
        "Test environment detection and validation",
        "Check which .env file is being used",
        "Validate environment without deploying",
        "Check current environment configuration",
        "Test with production settings",
        "View detailed logs",
        "Validate environment is properly loaded",
        "Check environment configuration in container",
        "Restart services with fresh environment",
        "Renew certificate manually",
        "Test certificate configuration",
        "Check Docker resource usage",
        "Check disk I/O",
        "Optimize if needed",
        "Test external connectivity",
        "Check firewall",
        "Test port accessibility",
        "Application Optimization",
        "System Optimization",
        "Optimize swap usage",
        "Increase file descriptor limits",
        "Clean up unused resources",
        "Optimize Docker daemon",
        "[Service]",
        "ExecStart=",
        "ExecStart=/usr/bin/dockerd --log-driver=json-file --log-opt max-size=10m --log-opt max-file=3",
        "Network Optimization",
        "Already optimized in nginx.conf:",
        "Scaling Considerations",
        "Vertical Scaling (Single Server)",
        "Monitor resource usage trends",
        "Horizontal Scaling (Multiple Servers)",
        "Monitoring at Scale",
        "Configure log shipping to external service",
        "Options: ELK Stack, Splunk, DataDog, LogDNA",
        "Implement metrics collection",
        "Options: Prometheus + Grafana, DataDog, New Relic",
        "Monthly Cost Breakdown",
        "Support and Resources",
        "Monitoring Resources",
        "Recommended Specifications:",
        "Ubuntu 22.04 LTS",
        "intelligent environment detection and configuration",
        "What the enhanced setup script does:",
        "Auto-detects existing .env files",
        "Preserves existing configuration",
        "Validates system requirements",
        "Installs all dependencies",
        "Creates secure application structure",
        "Configures production optimizations",
        "Prepares SSL certificate setup",
        "Applies security hardening",
        "Intelligent Environment Handling:",
        "Detect and configure environment automatically",
        "automatically detects and uses existing .env files",
        "Automated Environment Detection:",
        "If you already have a .env file configured",
        "If you need to create a new .env file",
        "Required Configuration (automatically validated):",
        "Automatic Production Updates:",
        "Generate Secure Secrets:",
        "detects and validates database connections",
        "MongoDB Atlas (automatically tested):",
        "Redis Configuration (automatically tested):",
        "Digital Ocean Databases (automatically detected):",
        "fully automated deployment",
        "What the automated deployment does:",
        "Auto-detects .env files",
        "Validates all environment variables",
        "Tests database connections",
        "Creates backups",
        "Sets up SSL certificates",
        "Builds and starts services",
        "Configures monitoring",
        "Generates deployment reports",
        "Validates application health",
        "Example output:",
        "Network Security:",
        "Application Security:",
        "Available Health Checks:",
        "Example Health Check:",
        "Email Alerts:",
        "Slack Integration:",
        "AWS S3 Configuration:",
        "SSH/SCP Configuration:",
        "Daily:",
        "Weekly:",
        "Monthly:",
        "Application Management:",
        "System Monitoring:",
        "Log Management:",
        "Missing .env File:",
        "Partial Environment Configuration:",
        "Invalid Configuration Format:",
        "Environment File Location Priority:",
        "Current directory",
        "Application directory",
        "Working directory",
        "Repository Cloning Issues:",
        "Environment Configuration Problems:",
        "Application Won't Start:",
        "SSL Certificate Issues:",
        "Database Connection Problems:",
        "Performance Issues:",
        "Network Connectivity:",
        "Security Incident:",
        "Database Issues:",
        "Caching Configuration:",
        "Performance Settings:",
        "Memory Management:",
        "Docker Optimization:",
        "nginx Configuration:",
        "Upgrade Droplet Size:",
        "Resource Monitoring:",
        "Load Balancer Setup:",
        "Database Scaling:",
        "CDN Integration:",
        "Centralized Logging:",
        "Metrics Collection:",
        "Total** | **~$13/month** | **~$43-63/month",
        "Use appropriate droplet sizes",
        "Enable backup retention policies",
        "Optimize Docker images",
        "Use CDN for static assets",
        "Production-Ready Infrastructure",
        "Comprehensive Security",
        "Automated Monitoring",
        "Backup & Recovery",
        "Scalability Planning",
        "🚀 DigitalOcean Deployment Guide for EchoTune AI",
        "Required Accounts",
        "Required Services",
        "Local Tools (for manual setup)",
        "🔧 Initial Setup",
        "1. DigitalOcean Account Setup",
        "2. Spotify Developer Setup",
        "3. Database Setup (Optional)",
        "🔐 Secrets Configuration",
        "Repository Secrets Setup",
        "Core DigitalOcean Secrets",
        "DigitalOcean API Access Token",
        "DigitalOcean Container Registry Token",
        "App Platform App ID (optional for new deployments)",
        "Spotify API Secrets",
        "Spotify Client Credentials",
        "Security Secrets",
        "Application Security Keys (generate secure random strings)",
        "Database Secrets (if using managed database)",
        "MongoDB Connection String",
        "AI/LLM Secrets (optional)",
        "Google Gemini API Key",
        "OpenAI API Key",
        "Default LLM Provider",
        "3. Environment Variables",
        "🔄 Workflow Usage",
        "Automatic Deployment",
        "Manual Deployment",
        "Deployment Process",
        "📦 Container Registry Setup",
        "Registry Configuration",
        "Image Optimization",
        "🎯 App Platform Configuration",
        "Service Architecture",
        "Resource Configuration",
        "Production resource recommendations",
        "Custom Domains",
        "Application Monitoring",
        "Debugging Commands",
        "View build logs",
        "Get app information",
        "List all deployments",
        "Get specific deployment",
        "Monitor deployment in real-time",
        "⚙️ Advanced Configuration",
        "Multi-Environment Setup",
        "Custom Registry Namespace",
        "Create custom registry namespace",
        "Update workflow environment variables",
        "Blue-Green Deployment",
        "Deploy to staging slot first",
        "Test staging deployment",
        "Promote to production",
        "Backup and Disaster Recovery",
        "🔧 Optimization Tips",
        "🚨 Important Notes",
        "Set up DigitalOcean accounts",
        "Configure GitHub secrets",
        "DigitalOcean Container Registry",
        "DigitalOcean Managed Database",
        "Configure App Settings",
        "Create MongoDB Database",
        "Navigate to Repository Settings",
        "Add Required Secrets",
        "Manual dispatch",
        "Navigate to GitHub Actions",
        "Building",
        "Registry Push",
        "Security Scan",
        "Login to Registry",
        "Test Image Push",
        "Registry Management",
        "Multi-stage builds",
        "Alpine Linux base",
        "Non-root user",
        "Health checks",
        "Cache optimization",
        "Add Domain to App",
        "Configure DNS",
        "App Platform Metrics",
        "Container Registry Monitoring",
        "Build Failures",
        "Registry Push Failures",
        "App Platform Deployment Issues",
        "Health Check Failures",
        "Spotify Integration Issues",
        "Create Environment-Specific App Specs",
        "Environment-Specific Secrets",
        "Branch-Based Deployment",
        "Database Backup",
        "Application Backup",
        "Disaster Recovery Plan",
        "Right-Size Resources",
        "Registry Cleanup",
        "Database Performance",
        "Application Performance",
        "Updates",
        "🎵 Ready to deploy your music discovery platform?",
        "# Repository → Settings → Environments",
        "🐳 Quick Start",
        "Option 2: Docker Run (Simple)",
        "Docker Compose Configuration",
        "Development Deployment",
        "Start in development mode",
        "Stop services",
        "Build and start production services",
        "Scale application",
        "Custom Domain with SSL",
        "Update docker-compose.yml with your domain",
        "Then deploy with SSL-enabled nginx",
        "SSL with Let's Encrypt",
        "Add to docker-compose.yml",
        "Network Security",
        "Custom network configuration",
        "📊 Monitoring and Health Checks",
        "Built-in Health Checks",
        "Resource Limits",
        "🔧 Maintenance",
        "Backup volumes",
        "Restore volumes",
        "Pull latest images",
        "Restart with new images",
        "Clean old images",
        "Export logs",
        "Find processes using port",
        "Change port in docker-compose.yml",
        "Check container resources",
        "Increase memory limits",
        "Multi-stage Build",
        "Production optimized Dockerfile",
        "Caching Strategies",
        "Add Redis for caching",
        "🐳 Enhanced Docker Deployment Guide for EchoTune AI",
        "📋 Quick Start Options",
        "Option 1: One-Click Deployment (Recommended)",
        "Option 2: Manual Setup",
        "1. Setup Docker for Ubuntu 22.04",
        "2. Deploy EchoTune AI",
        "Option 3: Advanced Setup",
        "1. Install Docker following DigitalOcean tutorial",
        "2. Clone repository",
        "4. Deploy with optimized Dockerfile",
        "🛠️ Installation Methods",
        "Ubuntu 22.04 Docker Installation",
        "Enhanced setup with optimization",
        "Or use the simplified command",
        "Production deployment",
        "With optimized Dockerfile",
        "📊 Docker Optimization Features",
        "Real-time monitoring",
        "Performance analysis",
        "Health report",
        "Resource Optimization",
        "Full optimization",
        "Specific optimizations",
        "🔧 Configuration Management",
        "Required Spotify API configuration",
        "Database configuration",
        "Multi-Environment Support",
        "🏗️ Docker Architecture",
        "Multi-Stage Builds",
        "Build stage",
        "... build process",
        "Production stage",
        "... optimized runtime",
        "Development stage",
        "... development tools",
        "Container Services",
        "Network Architecture",
        "📈 Performance Optimizations",
        "Docker Daemon Configuration",
        "Build Optimizations",
        "Resource Management",
        "🔐 Security Features",
        "Container Security",
        "📊 Monitoring and Maintenance",
        "Container monitoring",
        "Automated Health Checks",
        "🚀 Deployment Workflows",
        "Development Workflow",
        "1. Start development environment",
        "2. Make changes to code",
        "... development work",
        "3. Test changes",
        "4. Rebuild if needed",
        "5. View logs",
        "1. Update code",
        "2. Update environment",
        "3. Deploy new version",
        "4. Verify deployment",
        "Database backup",
        "Volume backup",
        "🔧 Troubleshooting",
        "Health Check Commands",
        "System health",
        "Container status",
        "Service health",
        "Database connectivity",
        "Analyze performance",
        "Monitor resources",
        "Generate report",
        "📚 Advanced Features",
        "Custom Docker Images",
        "Production optimized",
        "Minimal runtime",
        "Multi-Platform Builds",
        "Build for multiple architectures",
        "Container Orchestration",
        "🌐 DigitalOcean Integration",
        "App Platform Deployment",
        "app-platform.yaml",
        "Container Registry",
        "Tag image",
        "📝 Helper Commands Reference",
        "Project Management",
        "`.env` file",
        "Builder stage",
        "App Container",
        "Nginx Container",
        "MongoDB Container",
        "Redis Container",
        "Monitoring Container",
        "BuildKit",
        "Layer Caching",
        "Multi-platform",
        "Non-root execution",
        "Read-only filesystem",
        "Security options",
        "Secret management",
        "Isolated networks",
        "TLS termination",
        "Rate limiting",
        "Structured logging",
        "Log rotation",
        "Centralized collection",
        "Permission Denied",
        "Port Already in Use",
        "Docker Swarm",
        "### Performance Monitoring",
        "### Container Security",
        "### Custom Docker Images",
        "EchoTune AI - Enhanced Deployment Guide",
        "Quick Deployment Options",
        "1. Standard Production Deployment",
        "Full production deployment with all features",
        "2. Simplified Deployment",
        "Quick deployment for development/testing",
        "3. DigitalOcean Quick Deploy",
        "Optimized for DigitalOcean droplets",
        "New Features",
        "Enhanced Health Monitoring",
        "Security Enhancements",
        "Testing Suite",
        "Management Commands",
        "Integration",
        "Debugging",
        "Health diagnostics",
        "System resources",
        "Port conflicts",
        "Docker issues",
        "Permission issues",
        "### Enhanced Health Monitoring",
        "Ubuntu Server Deployment Guide",
        "🚀 Ubuntu 22.04 LTS Quick Start",
        "One-command installation for Ubuntu 22.04",
        "⚡ Quick Deployment",
        "Install Certbot for SSL",
        "Step 2: Clone and Configure",
        "Step 3: SSL Configuration",
        "Test automatic renewal",
        "Build application",
        "Step 5: Configure nginx",
        "🛡️ SSL Configuration",
        "Automatic SSL with Let's Encrypt",
        "Auto-renewal (automatically set up)",
        "Manual SSL Certificate",
        "Add SSL configuration paths",
        "1. Permission Denied Errors",
        "Fix all permission issues",
        "2. Service Not Starting",
        "Analyze and fix issues",
        "Renew certificates",
        "Restart nginx",
        "📊 Monitoring",
        "System Monitoring",
        "Network status",
        "Clean Docker images",
        "Backup database",
        "Apply security updates",
        "🆕 NEW: Ubuntu 22.04 LTS Guide Available!",
        "[Ubuntu 22.04 Complete Deployment Guide](UBUNTU22_COMPLETE_GUIDE.md)",
        "[View Complete Ubuntu 22.04 Guide →](UBUNTU22_COMPLETE_GUIDE.md)",
        "Deployment Pipeline",
        "🤖 AI Agent Instructions for MCP Server Integration",
        "Internal MCP Servers Cheatsheet",
        "1. Sequential Thinking MCP Server",
        "2. FileScopeMCP",
        "3. Screenshot Website Fast",
        "4. Browserbase Cloud Automation",
        "5. Mermaid Diagram Generator",
        "6. Browser Automation (Puppeteer)",
        "7. Spotify MCP Server",
        "Community MCP Servers Integration",
        "Code Intelligence Enhancement",
        "API Testing Automation",
        "AI Agent Workflow Patterns",
        "1. Feature Development Workflow",
        "2. Bug Investigation Workflow",
        "Best Practices for AI Agents",
        "1. Server Selection Strategy",
        "2. Error Handling and Fallbacks",
        "3. Security Considerations",
        "Integration Testing for AI Agents",
        "Automated Validation Script",
        "Best Use Cases",
        "Quick Commands",
        "Server",
        "Agent Usage Strategy",
        "Local vs Cloud",
        "Sequential Thinking",
        "Screenshot",
        "Community Servers",
        "Environment Variable Validation",
        "{ energy: 0.7, valence: 0.8 }",
        "Community MCP Servers - Curated Collection",
        "1. Introduction: What are MCP Servers?",
        "2. Workflow: Finding, Installing, and Integrating MCP Servers",
        "Step 1: Search for MCP Servers",
        "Step 2: Evaluate Compatibility",
        "Step 3: Install the MCP Server",
        "Step 4: Integrate with Coding Agent",
        "3. High-Priority MCP Servers for EchoTune AI",
        "A. GitHub MCP Server (Official)",
        "B. PostgreSQL Database MCP Server",
        "C. Brave Search MCP Server",
        "D. File System MCP Server",
        "E. SQLite Database MCP Server",
        "F. Memory MCP Server (Knowledge Graph)",
        "G. Puppeteer Browser Automation",
        "4. Specialized Community MCP Servers for Music Intelligence",
        "Music & Audio Processing Servers",
        "A. Audio Analysis MCP Server",
        "B. YouTube Music Integration",
        "Database & Analytics Servers",
        "C. MongoDB Integration",
        "D. Time Series Data Analysis",
        "AI & Machine Learning Servers",
        "E. OpenAI Integration",
        "F. Prompt Management",
        "Web & API Integration Servers",
        "G. Web Scraping & Content Extraction",
        "H. API Testing & Monitoring",
        "5. Additional Resources",
        "Official MCP Resources",
        "Community Platforms",
        "Development Resources",
        "6. Implementation Guide for EchoTune AI",
        "Installation Process",
        "Recommended Implementation Priority",
        "Phase 1: Core Infrastructure (Week 1-2)",
        "Phase 2: Enhanced Intelligence (Week 3-4)",
        "Phase 3: Advanced Features (Week 5-6)",
        "Phase 4: Specialized Music Features (Week 7-8)",
        "Integration Testing Checklist",
        "MCP servers",
        "Repository:",
        "Use Cases for EchoTune AI:",
        "Installation:",
        "MCP Configuration:",
        "Spotify-echo Adaptations:",
        "Configuration:",
        "[Awesome MCP Servers](https://github.com/punkpeye/awesome-mcp-servers)",
        "[MCPdb Directory](https://mcpdb.org/)",
        "[Model Context Protocol Documentation](https://modelcontextprotocol.io/)",
        "[MCP SDK Documentation](https://github.com/modelcontextprotocol/typescript-sdk)",
        "[MCP Discord Server](https://glama.ai/mcp/discord)",
        "[r/mcp Reddit](https://www.reddit.com/r/mcp)",
        "[MCP GitHub Discussions](https://github.com/modelcontextprotocol/servers/discussions)",
        "[Digma AI MCP Server List](https://digma.ai/15-best-mcp-servers/)",
        "[MCP Quickstart Guide](https://glama.ai/blog/2024-11-25-model-context-protocol-quickstart)",
        "Install MCP Server Dependencies",
        "Update MCP Configuration",
        "Configure Environment Variables",
        "SQLite MCP Server",
        "PostgreSQL MCP Server",
        "OpenAI MCP Server",
        "Brave Search MCP Server",
        "MongoDB MCP Server",
        "Puppeteer MCP Server",
        "Playlist Optimization Server",
        "Installation Success",
        "Configuration Valid",
        "Connectivity Test",
        "Performance Impact",
        "Documentation Updated",
        "API Key Management",
        "File System Access",
        "Database Security",
        "** Complete GitHub integration with repository management, PRs, issues, and Actions",
        "** PostgreSQL database integration with schema inspection and query capabilities",
        "** Web search capabilities using Brave's Search API",
        "** Direct local file system access with configurable permissions",
        "** SQLite database operations with built-in analysis features",
        "** Knowledge graph-based persistent memory system",
        "** Browser automation for web scraping and interaction",
        "** Data analysis and processing capabilities",
        "extraction from Spotify track data",
        "** YouTube subtitle and content fetching",
        "** Full-featured MongoDB database operations",
        "** Time-series database operations for InfluxDB",
        "** Direct OpenAI API integration",
        "** LLM prompt management and optimization",
        "** Browser automation and web scraping",
        "** Webhook testing and API monitoring",
        "(Week 5-6)",
        "(Week 7-8)",
        "🤖 EchoTune AI - Copilot Slash Commands",
        "How It Works",
        "Available Commands",
        "📚 Documentation Commands",
        "🎯 Usage Examples",
        "Review all documentation",
        "Focus on API documentation",
        "Generate comprehensive API docs",
        "Create architecture diagrams and documentation",
        "Set up contributing guidelines for developers",
        "Get help and see all commands",
        "Authorization",
        "🎨 Rich Content Generation",
        "🔄 Intelligent Processing",
        "🛡️ Security & Quality",
        "Technical Implementation",
        "Workflow Triggers",
        "Command Processing Flow",
        "Generated Content Quality",
        "Future Enhancements",
        "Planned Commands (Coming Soon)",
        "Advanced Features",
        "Benefits",
        "For Project Maintainers",
        "For Contributors",
        "Parse the command",
        "Execute the requested function",
        "Generate the requested content",
        "Post results as comments",
        "Commit generated files",
        "Comprehensive documentation",
        "Interactive diagrams",
        "Code examples",
        "Professional templates",
        "Context-aware responses",
        "Parameter parsing",
        "Error handling",
        "Automatic file management",
        "Permission validation",
        "Input sanitization",
        "Automated testing",
        "Audit logging",
        "Comment Detection",
        "Authorization Check",
        "Command Parsing",
        "Function Execution",
        "Content Creation",
        "Response Posting",
        "Git Operations",
        "Comprehensive coverage",
        "Industry best practices",
        "Interactive elements",
        "Consistent formatting",
        "Actionable recommendations",
        "Multi-step workflows",
        "Interactive command builders",
        "Integration with external tools",
        "Custom command creation",
        "Instant documentation generation",
        "Consistent quality",
        "Easy customization",
        "Automated workflow",
        "Quality assurance",
        "Contributor onboarding",
        "Professional presentation",
        "Clear guidelines",
        "Comprehensive setup",
        "Professional development",
        "Recognition system",
        "Actions tab",
        "appropriate permissions",
        "command syntax",
        "maintainers",
        "System Status",
        "### 🎨 Rich Content Generation",
        "- **Multi-step workflows** for complex operations",
        "requests",
        "Data Management and MongoDB Integration Guide",
        "📁 Current File Structure",
        "🚀 Data Upload Results",
        "Successfully Uploaded to MongoDB",
        "Storage Statistics",
        "🔧 Optimization Results",
        "File Organization",
        "Performance Indexes Created",
        "📊 MongoDB Schema",
        "Document Structure",
        "🛠️ Usage Commands",
        "Basic Operations",
        "Run full optimization and upload",
        "Upload only (skip file optimization)",
        "Optimize files only (skip upload)",
        "Custom batch size for large datasets",
        "Update mode (upsert existing documents)",
        "Advanced Migration",
        "Direct migration with custom parameters",
        "Migration with updates",
        "📈 Query Examples",
        "Basic Queries",
        "ML-Ready Queries",
        "🔒 Environment Configuration",
        "Required Environment Variables (.env)",
        "MongoDB Atlas Configuration",
        "Application Settings",
        "🚨 Data Quality Notes",
        "Migration Statistics",
        "Known Issues",
        "Collection",
        "Total Documents",
        "Unique Users",
        "Date Range",
        "Data Size",
        "Index Size",
        "Average Document Size",
        "Total Storage",
        "Duplicate Files Removed",
        "Space Saved",
        "Files Reorganized",
        "Directories Created",
        "Primary Indexes",
        "Compound Indexes",
        "Audio Feature Indexes",
        "Text Search Index",
        "Behavioral Indexes",
        "Failed Records",
        "Data Validation",
        "Index Maintenance",
        "Backup Strategy",
        "Data Updates",
        "Data Version",
        "Total Records",
        "Indexes**: Danceability, energy, valence, tempo",
        "for recommendation engine",
        "db.listening_history.find({",
        "(will be populated separately)",
        "MongoDB Connection Setup - EchoTune AI",
        "Connection Details",
        "Setup Status",
        "1. Test Connection",
        "2. Migrate Sample Data",
        "Small test (100 records)",
        "Larger test (1000 records)",
        "3. Full Production Migration",
        "Database Schema",
        "Performance Indexes",
        "Audio Feature Indexes (for ML)",
        "Listening Behavior Indexes",
        "Search Index",
        "Current Database Statistics",
        "Migration Scripts",
        "`scripts/test_mongodb_connection.py`",
        "`scripts/migrate_to_mongodb.py`",
        "`scripts/mongodb_setup_demo.py`",
        "Production Migration",
        "Monitoring and Maintenance",
        "Check Collection Status",
        "Get document count",
        "Get collection stats",
        "Query Examples",
        "Find user's top tracks",
        "Find tracks by audio features",
        "Connection Issues",
        "Migration Issues",
        "Security Notes",
        "MongoDB URI",
        "Username",
        "Password",
        "MongoDB Version",
        "Connection Tested",
        "Database Created",
        "Collection Ready",
        "Sample Migration",
        "Schema Validated",
        "Indexes Created",
        "Storage Size",
        "Full Data Migration",
        "Query Optimization",
        "Access Control",
        "Indexes (for ML)",
        "query = {",
        "EchoTune AI Prompt System Integration Guide",
        "🌟 Overview",
        "📁 Directory Structure",
        "Installation",
        "Basic Usage",
        "List available prompts",
        "Validate prompts",
        "Execute a prompt",
        "GitHub Actions Integration",
        "📋 Available Commands",
        "CLI Commands",
        "Prompt management",
        "Using the unified CLI",
        "Manual Trigger",
        "Programmatic Usage",
        "🎯 Available Prompts",
        "Coding Agent Category",
        "Workflow Category",
        "Analysis Category",
        "Documentation Category",
        "Required for OpenAI models",
        "Required for Google Gemini models",
        "Required for Anthropic Claude models",
        "Model Configuration",
        "📝 Creating New Prompts",
        "Using the CLI",
        "Manual Creation",
        "Prompt Format",
        "🔄 Migration from Legacy Formats",
        "Automatic Migration",
        "Manual Migration",
        "🧪 Testing & Validation",
        "Validate all prompts",
        "Validate specific prompt",
        "Get JSON output",
        "Test with built-in test data",
        "Test specific case",
        "🌐 API Server",
        "Example API Usage",
        "List prompts",
        "Execute prompt",
        "🔗 Integration Examples",
        "Pull Request Analysis",
        "Workflow Optimization",
        "📊 Monitoring & Analytics",
        "Execution Metrics",
        "Logging",
        "🔒 Security Considerations",
        "API Keys",
        "Input Validation",
        "🚀 Performance Optimization",
        "Parallel Execution",
        "🔮 Future Enhancements",
        "Planned Features",
        "Integration Roadmap",
        "💡 Best Practices",
        "Prompt Design",
        "Workflow Integration",
        "Standardized Format",
        "Interchangeable Execution",
        "Validation & Testing",
        "Legacy Support",
        "code-review-analysis",
        "workflow-optimizer",
        "security-scanner",
        "performance-analyzer",
        "api-documenter",
        "readme-enhancer",
        "Clear Instructions",
        "Variable Usage",
        "Test Data",
        "Rate Limits",
        "Local Testing",
        "Version Control",
        "Review",
        "Validation Errors",
        "Execution Failures",
        "- [ ] Visual prompt builder",
        "🔄 GitHub Actions Workflow Guide for EchoTune AI",
        "📋 Workflow Overview",
        "🚀 Main Deployment Workflow",
        "🔄 Reusable Workflows",
        "Docker Build Template",
        "DigitalOcean Deploy Template",
        "🛠️ Workflow Configuration",
        "Required GitHub Secrets",
        "Core DigitalOcean Configuration",
        "Spotify API Integration",
        "Application Security",
        "Optional Secrets",
        "📦 Docker Image Management",
        "Built Images",
        "Image Features",
        "🔍 Testing Pipeline",
        "Test Categories",
        "Test Execution",
        "🛡️ Security Features",
        "Secrets Management",
        "📊 Monitoring and Observability",
        "Deployment Monitoring",
        "Metrics and Logging",
        "🔄 Deployment Process",
        "Automated Deployment Flow",
        "Manual Deployment Options",
        "Via GitHub Actions UI",
        "Available options:",
        "Workflow Failures",
        "Check workflow logs in GitHub Actions",
        "- Missing or invalid secrets",
        "- DigitalOcean quota limits",
        "- Container registry authentication",
        "- App Platform deployment limits",
        "Image Build Failures",
        "Dockerfile syntax errors",
        "Dependency installation failures",
        "Build context size limits",
        "Registry push authentication",
        "App specification validation",
        "Resource allocation limits",
        "Health check failures",
        "Environment variable configuration",
        "Validate deployment configuration",
        "Check DigitalOcean resources",
        "🎯 Best Practices",
        "Security Best Practices",
        "Deployment Timing",
        "Resource Utilization",
        "Scalability Improvements",
        "Tools and CLI",
        "Purpose:",
        "Triggers:",
        "Key Features:",
        "Production:",
        "Staging:",
        "Manual:",
        "echotune-mcp",
        "Security scanning",
        "Proper labeling",
        "Unit Tests",
        "Integration Tests",
        "Security Tests",
        "Linting",
        "Registry",
        "Verification",
        "Notification",
        "Build Phase:",
        "Test Phase:",
        "Registry Push:",
        "Deployment:",
        "Total Time:",
        "Registry Storage:",
        "App Platform:",
        "Build Minutes:",
        "🎵 Ready to deploy? The automation handles everything from code to production!",
        "- **Multi-stage builds** for optimized production images",
        "- Blue-green deployment strategy",
        "🤖 GitHub Coding Agent Guide for EchoTune AI",
        "Project Overview",
        "🎯 Agent Objectives",
        "📁 Project Structure",
        "🔧 Development Automation Patterns",
        "1. Code Generation Templates",
        "Spotify API Service Template",
        "src/api/spotify_service.py",
        "ML Model Template",
        "src/ml/recommendation_model.py",
        "2. Testing Automation",
        "tests/test_spotify_service.py",
        "3. Database Optimization",
        "scripts/merge_csv_data.py",
        "🌐 MCP Server Integration",
        "Browser Automation Configuration",
        "Spotify MCP Server",
        "mcp-server/spotify_server.py",
        "🔄 CI/CD Automation Workflows",
        "Key Automation Points:",
        "GitHub Actions Integration:",
        "🎵 Spotify API Workflow Patterns",
        "Authentication Flow",
        "📋 Development Task Automation",
        "Priority Task List for Agents:",
        "Code Quality Standards:",
        "🚨 Common Pitfalls to Avoid:",
        "📊 Performance Optimization:",
        "🗄️ Database Architecture & Setup",
        "Database Platform Overview",
        "Quick Database Setup",
        "Data Migration Workflow",
        "Performance Optimizations",
        "Cost Estimation",
        "Development (Free Tiers)",
        "Database Schema Examples",
        "MongoDB Document Structure",
        "Supabase Schema",
        "Merge CSV Data",
        "Setup Database",
        "Implement Spotify API",
        "Build ML Pipeline",
        "Create Chat Interface",
        "Add Testing",
        "Deploy MCP Server",
        "JavaScript",
        "API Rate Limits",
        "Data Privacy",
        "Cross-Platform",
        "Digital Ocean",
        "Interactive Setup Wizard",
        "Test Existing Connections",
        "Generate Database Commands",
        "Populate Missing Audio Features",
        "Data Partitioning",
        "according to the project vision.",
        "List[str]):",
        "= features",
        "```python",
        "feature_cols = ['Danceability', 'Energy', 'Valence', 'Tempo', 'Acousticness']",
        "🔧 GitHub Automation Setup Guide",
        "🔐 Required GitHub Secrets and Tokens",
        "1. GitHub Personal Access Token (GH_PAT)",
        "2. Additional Required Secrets",
        "For DigitalOcean Deployment:",
        "For AI Services:",
        "For Security (Auto-generated if not provided):",
        "🤖 GitHub App Alternative (Recommended)",
        "GitHub App Setup:",
        "🔄 Workflow Optimization",
        "Current Workflow Issues:",
        "Recommended Workflow Structure:",
        "Core Workflows (Keep):",
        "Workflows to Consolidate/Disable:",
        "Token Security:",
        "Workflow Security:",
        "🚀 Copilot SWE Agent Configuration",
        "Optimal Settings for auto-review-merge.yml:",
        "Trigger Configuration:",
        "🔍 Troubleshooting Common Issues",
        "\"Invalid workflow file\" Error:",
        "Permission Denied Errors:",
        "Workflow Conflicts:",
        "Authentication Issues:",
        "📋 Verification Checklist",
        "🆘 Emergency Procedures",
        "If Token is Compromised:",
        "If Workflows are Failing:",
        "Required Permissions",
        "Setup Steps",
        "Repository Configuration",
        "App name",
        "Homepage URL",
        "Permissions needed",
        "Events to subscribe to",
        "Install the app",
        "Generate a private key",
        "App ID",
        "Multiple conflicting workflows",
        "Redundant CI/CD pipelines",
        "Inconsistent automation",
        "Security concerns",
        "`auto-review-merge.yml`",
        "`main.yml`",
        "`deploy-one-click.yml`",
        "`unified-optimized-pipeline.yml`",
        "`continuous-agent.yml`",
        "`deploy.yml`",
        "`optimized-pipeline.yml`",
        "`status-notifications.yml`",
        "Rotate tokens immediately",
        "Use fine-grained tokens",
        "Set appropriate expiration",
        "Use GitHub Apps",
        "Limit workflow permissions",
        "Use `secrets` context",
        "Never echo sensitive values",
        "Validate inputs",
        "Use environment protection",
        "GitHub Actions Documentation",
        "GitHub Apps Documentation",
        "Personal Access Tokens",
        "Repository Issues",
        "Security Advisory",
        "Production Optimization Guide",
        "Frontend Optimization",
        "Build with production optimizations",
        "Analyze bundle size",
        "Enable gzip compression in nginx",
        "Backend Optimization",
        "Static asset caching",
        "🛡️ Security Hardening",
        "Production security settings",
        "📊 Monitoring Setup",
        "Application health endpoint",
        "Expected response time: <50ms",
        "Expected uptime: >99.9%",
        "Logging Configuration",
        "Metrics Collection",
        "🗄️ Database Optimization",
        "MongoDB Configuration",
        "Indexing Strategy",
        "Data Archiving",
        "Archive old data",
        "🐳 Docker Optimization",
        "Multi-stage Dockerfile",
        "docker-compose.yml",
        "☁️ Cloud Optimization",
        "Optimized app spec",
        "Enable CDN for static assets",
        ".github/workflows/deploy.yml",
        "Automated Testing",
        "Test pipeline",
        "📈 Scaling Strategies",
        "Load balancer configuration",
        "Database Sharding",
        "🔧 Maintenance Procedures",
        "Automated Backups",
        "backup-script.sh",
        "Health check script",
        "Log Rotation",
        "logrotate configuration",
        "⚡ Performance Benchmarks",
        "Target Metrics",
        "Load Testing",
        "Apache Bench testing",
        "Artillery.io testing",
        "Check disk usage",
        "Check network",
        "Application Debugging",
        "Check error logs",
        "Monitor real-time performance",
        "Time to First Byte",
        "Page Load Time",
        "Availability",
        "Throughput",
        "MCP Servers - Comprehensive Integration Guide",
        "Install all MCP servers",
        "Install specific server",
        "Check all servers",
        "Generate detailed report",
        "Test all servers",
        "Test specific server",
        "Individual Server Configuration",
        "3. MCP Screenshot Website Fast",
        "4. MCP Server Browserbase",
        "6. Browser Automation Server (Puppeteer)",
        "8. GitHub MCP Server",
        "9. SQLite MCP Server",
        "10. Memory MCP Server",
        "11. PostgreSQL MCP Server",
        "12. Brave Search MCP Server",
        "GitHub Integration (optional)",
        "Browserbase Configuration (optional)",
        "Database Configuration (optional)",
        "Search Configuration (optional)",
        "Browser Configuration",
        "Security Configuration",
        "Allowed directories for file operations",
        "GitHub Workflow Integration",
        "Automated CI/CD",
        ".github/workflows/mcp-integration.yml",
        "Manual Workflow Dispatch",
        "Available npm Scripts",
        "MCP Management",
        "Individual Server Management",
        "Direct Script Usage",
        "Using the management script directly",
        "Server Not Found",
        "Permission Errors (FileScopeMCP)",
        "Browserbase Authentication",
        "Health Check Debugging",
        "Detailed health check",
        "Generate diagnostic report",
        "Check individual server",
        "Manual Server Testing",
        "Test sequential thinking server directly",
        "Test screenshot server directly",
        "Parallel Server Startup",
        "Start all MCP servers in background",
        "Integration Examples",
        "Coding Agent Workflow",
        "Automated Testing Workflow",
        "File Processing Workflow",
        "Music Intelligence Workflow",
        "Documentation Generation Workflow",
        "Custom Server Configurations",
        "Production health monitoring",
        "Log monitoring",
        "Contributing",
        "Adding New MCP Servers",
        "Testing Guidelines",
        "single source of truth",
        "Sequential Thinking MCP Server",
        "MCP Screenshot Website Fast",
        "MCP Server Browserbase",
        "Mermaid Diagram Generator",
        "Browser Automation Server (Puppeteer)",
        "Command",
        "Set appropriate environment variables",
        "Configure resource limits",
        "Set up monitoring and health checks",
        "Enable logging and error tracking",
        "EchoTune AI MCP Integration",
        "5. **Memory MCP Server** - Knowledge graph-based persistent memory system",
        "**Command**: `python -m mcp_server_sqlite --db-path data/echotune.db`",
        "requests:"
      ],
      "implemented": [],
      "missing": [],
      "incomplete": []
    },
    "brokenLinks": [
      {
        "text": "📖 Full DigitalOcean Guide",
        "url": "deployment/digitalocean-deployment.md",
        "reason": "File not found"
      },
      {
        "text": "📖 Full Docker Guide",
        "url": "deployment/docker-deployment.md",
        "reason": "File not found"
      },
      {
        "text": "Configure SSL certificates",
        "url": "deployment/ubuntu-deployment.md#ssl-configuration",
        "reason": "File not found"
      },
      {
        "text": "Set up monitoring",
        "url": "deployment/digitalocean-deployment.md#monitoring-and-scaling",
        "reason": "File not found"
      },
      {
        "text": "Configure custom domain",
        "url": "deployment/digitalocean-deployment.md#custom-domain-setup",
        "reason": "File not found"
      },
      {
        "text": "Development setup guide",
        "url": "guides/development.md",
        "reason": "File not found"
      },
      {
        "text": "API documentation",
        "url": "api/README.md",
        "reason": "File not found"
      },
      {
        "text": "Contributing guidelines",
        "url": "../CONTRIBUTING.md",
        "reason": "File not found"
      },
      {
        "text": "Full Documentation",
        "url": "../README.md",
        "reason": "File not found"
      },
      {
        "text": "README.md",
        "url": "../README.md",
        "reason": "File not found"
      },
      {
        "text": "API Documentation",
        "url": "../API_DOCUMENTATION.md",
        "reason": "File not found"
      },
      {
        "text": "Contributing",
        "url": "../CONTRIBUTING.md",
        "reason": "File not found"
      },
      {
        "text": "System Architecture",
        "url": "architecture/ARCHITECTURE.md",
        "reason": "File not found"
      },
      {
        "text": "Database Schema",
        "url": "architecture/database-schema.md",
        "reason": "File not found"
      },
      {
        "text": "Security Model",
        "url": "guides/security-model.md",
        "reason": "File not found"
      },
      {
        "text": "DigitalOcean Deployment",
        "url": "deployment/digitalocean-deployment.md",
        "reason": "File not found"
      },
      {
        "text": "Docker Guide",
        "url": "deployment/docker-guide.md",
        "reason": "File not found"
      },
      {
        "text": "Local Development",
        "url": "deployment/deployment-guide.md",
        "reason": "File not found"
      },
      {
        "text": "Troubleshooting",
        "url": "deployment/troubleshooting.md",
        "reason": "File not found"
      },
      {
        "text": "Coding Standards",
        "url": "guides/coding-standards.md",
        "reason": "File not found"
      },
      {
        "text": "GitHub Automation",
        "url": "guides/github-automation.md",
        "reason": "File not found"
      },
      {
        "text": "Database Management",
        "url": "guides/MONGODB_SETUP.md",
        "reason": "File not found"
      },
      {
        "text": "Agent System",
        "url": "guides/AGENTS.md",
        "reason": "File not found"
      },
      {
        "text": "Enhanced API Features",
        "url": "api/ENHANCED_API_FEATURES.md",
        "reason": "File not found"
      },
      {
        "text": "OpenAPI Specification",
        "url": "api/openapi-spec.yaml",
        "reason": "File not found"
      },
      {
        "text": "Authentication Details",
        "url": "api/authentication.md",
        "reason": "File not found"
      },
      {
        "text": "Cleanup Plan",
        "url": "DOCUMENTATION_CLEANUP_PLAN.md",
        "reason": "File not found"
      },
      {
        "text": "Integration Reports",
        "url": "reports/archived/",
        "reason": "File not found"
      },
      {
        "text": "Testing Results",
        "url": "reports/archived/",
        "reason": "File not found"
      },
      {
        "text": "Copilot Commands",
        "url": "guides/COPILOT_SLASH_COMMANDS.md",
        "reason": "File not found"
      },
      {
        "text": "Data Management",
        "url": "guides/DATA_MANAGEMENT.md",
        "reason": "File not found"
      },
      {
        "text": "Prompt System",
        "url": "guides/PROMPT_SYSTEM_GUIDE.md",
        "reason": "File not found"
      },
      {
        "text": "README.md",
        "url": "../README.md",
        "reason": "File not found"
      },
      {
        "text": "API Documentation",
        "url": "../API_DOCUMENTATION.md",
        "reason": "File not found"
      },
      {
        "text": "Coding Standards",
        "url": "guides/coding-standards.md",
        "reason": "File not found"
      },
      {
        "text": "Architecture",
        "url": "architecture/ARCHITECTURE.md",
        "reason": "File not found"
      },
      {
        "text": "System Architecture",
        "url": "architecture/ARCHITECTURE.md",
        "reason": "File not found"
      },
      {
        "text": "DigitalOcean Deployment",
        "url": "deployment/digitalocean-deployment.md",
        "reason": "File not found"
      },
      {
        "text": "Docker Guide",
        "url": "deployment/docker-guide.md",
        "reason": "File not found"
      },
      {
        "text": "Troubleshooting",
        "url": "deployment/troubleshooting.md",
        "reason": "File not found"
      },
      {
        "text": "Contributing Guidelines",
        "url": "../CONTRIBUTING.md",
        "reason": "File not found"
      },
      {
        "text": "Coding Standards",
        "url": "guides/coding-standards.md",
        "reason": "File not found"
      },
      {
        "text": "GitHub Automation",
        "url": "guides/github-automation.md",
        "reason": "File not found"
      },
      {
        "text": "Agent System",
        "url": "guides/AGENTS.md",
        "reason": "File not found"
      },
      {
        "text": "README.md",
        "url": "../README.md",
        "reason": "File not found"
      },
      {
        "text": "Enhanced API Features",
        "url": "api/ENHANCED_API_FEATURES.md",
        "reason": "File not found"
      },
      {
        "text": "Archived Reports",
        "url": "reports/archived/",
        "reason": "File not found"
      },
      {
        "text": "README.md",
        "url": "../README.md",
        "reason": "File not found"
      },
      {
        "text": "API Documentation",
        "url": "../API_DOCUMENTATION.md",
        "reason": "File not found"
      },
      {
        "text": "deployment/",
        "url": "deployment/",
        "reason": "File not found"
      },
      {
        "text": "guides/coding-standards.md",
        "url": "guides/coding-standards.md",
        "reason": "File not found"
      },
      {
        "text": "architecture/ARCHITECTURE.md",
        "url": "architecture/ARCHITECTURE.md",
        "reason": "File not found"
      },
      {
        "text": "deployment/troubleshooting.md",
        "url": "deployment/troubleshooting.md",
        "reason": "File not found"
      },
      {
        "text": "reports/archived/",
        "url": "reports/archived/",
        "reason": "File not found"
      },
      {
        "text": "OpenAPI Specification",
        "url": "/docs/openapi.yaml",
        "reason": "File not found"
      },
      {
        "text": "Interactive API Documentation",
        "url": "/docs/interactive/",
        "reason": "File not found"
      },
      {
        "text": "Security Configuration Guide",
        "url": "/docs/security-guide.md",
        "reason": "File not found"
      },
      {
        "text": "Performance Optimization Guide",
        "url": "/docs/performance-guide.md",
        "reason": "File not found"
      },
      {
        "text": "Deployment Best Practices",
        "url": "DEPLOYMENT_GUIDE.md",
        "reason": "File not found"
      },
      {
        "text": "Interactive API Documentation",
        "url": "../interactive/",
        "reason": "File not found"
      },
      {
        "text": "OpenAPI Specification",
        "url": "../openapi.yaml",
        "reason": "File not found"
      },
      {
        "text": "WebSocket Documentation",
        "url": "websocket.md",
        "reason": "File not found"
      },
      {
        "text": "Authentication Guide",
        "url": "auth.md",
        "reason": "File not found"
      },
      {
        "text": "Main README",
        "url": "../README.md",
        "reason": "File not found"
      },
      {
        "text": "Development Guide",
        "url": "../CODING_AGENT_GUIDE.md",
        "reason": "File not found"
      },
      {
        "text": "Database Architecture",
        "url": "../DATABASE_ARCHITECTURE_GUIDE.md",
        "reason": "File not found"
      },
      {
        "text": "MCP Integration Guide",
        "url": "./MCP_INTEGRATION_SUMMARY.md",
        "reason": "File not found"
      },
      {
        "text": "Production Deployment Guide",
        "url": "./PRODUCTION_DEPLOYMENT_GUIDE.md",
        "reason": "File not found"
      },
      {
        "text": "Troubleshooting Guide",
        "url": "./TROUBLESHOOTING.md",
        "reason": "File not found"
      },
      {
        "text": "Email Support",
        "url": "mailto:support@echotune.ai",
        "reason": "File not found"
      },
      {
        "text": "troubleshooting guide",
        "url": "TROUBLESHOOTING.md",
        "reason": "File not found"
      },
      {
        "text": "Production Optimization Guide",
        "url": "../guides/production-optimization.md",
        "reason": "File not found"
      },
      {
        "text": "Ubuntu 22.04 Complete Deployment Guide",
        "url": "UBUNTU22_COMPLETE_GUIDE.md",
        "reason": "File not found"
      },
      {
        "text": "View Complete Ubuntu 22.04 Guide →",
        "url": "UBUNTU22_COMPLETE_GUIDE.md",
        "reason": "File not found"
      },
      {
        "text": "Docker Deployment Guide",
        "url": "docker-deployment.md",
        "reason": "File not found"
      },
      {
        "text": "DigitalOcean Deployment Guide",
        "url": "digitalocean-deployment.md",
        "reason": "File not found"
      },
      {
        "text": "Production Optimization Guide",
        "url": "../guides/production-optimization.md",
        "reason": "File not found"
      },
      {
        "text": "Security Best Practices",
        "url": "../guides/security.md",
        "reason": "File not found"
      },
      {
        "text": "Prompt Schema Reference",
        "url": "./schema/prompt-schema.json",
        "reason": "File not found"
      },
      {
        "text": "Configuration Guide",
        "url": "./config/prompt-config.yml",
        "reason": "File not found"
      },
      {
        "text": "Example Prompts",
        "url": "./catalog/",
        "reason": "File not found"
      }
    ],
    "versionMismatches": [
      {
        "file": "README.md",
        "type": "general",
        "version": "2.1.0"
      },
      {
        "file": "DEPLOYMENT.md",
        "type": "general",
        "version": "2.1.0"
      },
      {
        "file": "CONFIGURATION_GUIDE.md",
        "type": "general",
        "version": "2.1.0"
      },
      {
        "file": "CODING_AGENT_GUIDE.md",
        "type": "general",
        "version": "2.1.0"
      },
      {
        "file": "docs/api/ENHANCED_API_FEATURES.md",
        "type": "general",
        "version": "2.1.0"
      },
      {
        "file": "docs/api/ENHANCED_API_FEATURES.md",
        "type": "general",
        "version": "2.1.0"
      },
      {
        "file": "docs/deployment/ENHANCED_DEPLOYMENT_DEMO.md",
        "type": "general",
        "version": "2.0.0"
      },
      {
        "file": "docs/deployment/ONE-CLICK-DEPLOY-GUIDE.md",
        "type": "general",
        "version": "1.109.0"
      },
      {
        "file": "docs/deployment/ONE-CLICK-DEPLOY-GUIDE.md",
        "type": "general",
        "version": "1.109.0"
      },
      {
        "file": "docs/deployment/PRODUCTION_DEPLOYMENT_GUIDE.md",
        "type": "general",
        "version": "1.109.0"
      },
      {
        "file": "docs/deployment/UBUNTU_DEPLOYMENT_GUIDE.md",
        "type": "general",
        "version": "2.1.0"
      },
      {
        "file": "docs/deployment/UBUNTU_DEPLOYMENT_GUIDE.md",
        "type": "general",
        "version": "2.1.0"
      }
    ]
  },
  "recommendations": [
    "Document 71 environment variables used in code",
    "Remove or implement 81 environment variables documented but not used",
    "Document 88 API endpoints that exist in code",
    "Implement or remove documentation for 58 API endpoints",
    "Fix 81 broken internal links in documentation",
    "Create automated documentation validation in CI/CD pipeline",
    "Set up documentation version synchronization with releases"
  ]
}