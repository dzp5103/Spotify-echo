/**
 * Redis Manager Utility
 * Centralized Redis operations for EchoTune AI
 * Generated by configure-redis.js
 */

const Redis = require('redis');

class RedisManager {
  constructor() {
    this.client = null;
    this.isConnected = false;
    this.config = {
      url: process.env.REDIS_URL,
      username: process.env.REDIS_USERNAME,
      password: process.env.REDIS_PASSWORD,
      keyPrefix: process.env.REDIS_KEY_PREFIX || 'echotune:',
      defaultTTL: parseInt(process.env.REDIS_DEFAULT_TTL) || 3600,
      maxRetries: parseInt(process.env.REDIS_MAX_RETRIES) || 3,
      connectTimeout: parseInt(process.env.REDIS_CONNECT_TIMEOUT) || 10000,
    };
  }

  async connect() {
    if (this.client && this.isConnected) {
      return this.client;
    }

    try {
      this.client = Redis.createClient({
        url: this.config.url,
        socket: {
          connectTimeout: this.config.connectTimeout,
        },
        legacyMode: false,
      });

      this.client.on('error', (err) => {
        console.error('Redis client error:', err);
        this.isConnected = false;
      });

      this.client.on('connect', () => {
        this.isConnected = true;
      });

      await this.client.connect();
      return this.client;
    } catch (error) {
      console.error('Failed to connect to Redis:', error);
      throw error;
    }
  }

  async set(key, value, ttl = null) {
    await this.connect();
    const fullKey = this.config.keyPrefix + key;
    const serializedValue = JSON.stringify(value);

    if (ttl) {
      return await this.client.setEx(fullKey, ttl, serializedValue);
    } else {
      return await this.client.set(fullKey, serializedValue);
    }
  }

  async get(key) {
    try {
      await this.connect();
      const fullKey = this.config.keyPrefix + key;
      const value = await this.client.get(fullKey);
      return value ? JSON.parse(value) : null;
    } catch (error) {
      console.error('Redis get error:', error);
      return null;
    }
  }

  async del(key) {
    await this.connect();
    const fullKey = this.config.keyPrefix + key;
    return await this.client.del(fullKey);
  }

  async exists(key) {
    await this.connect();
    const fullKey = this.config.keyPrefix + key;
    return await this.client.exists(fullKey);
  }

  async expire(key, ttl) {
    await this.connect();
    const fullKey = this.config.keyPrefix + key;
    return await this.client.expire(fullKey, ttl);
  }

  async ping() {
    await this.connect();
    return await this.client.ping();
  }

  async close() {
    if (this.client) {
      await this.client.quit();
      this.isConnected = false;
    }
  }

  // Music-specific caching methods
  async cacheAudioFeatures(trackId, features, ttl = 86400) {
    return await this.set(`audio_features:${trackId}`, features, ttl);
  }

  async getAudioFeatures(trackId) {
    return await this.get(`audio_features:${trackId}`);
  }

  async cacheRecommendations(userId, recommendations, ttl = 3600) {
    return await this.set(`recommendations:${userId}`, recommendations, ttl);
  }

  async getRecommendations(userId) {
    return await this.get(`recommendations:${userId}`);
  }

  async cacheUserProfile(userId, profile, ttl = 7200) {
    return await this.set(`user_profile:${userId}`, profile, ttl);
  }

  async getUserProfile(userId) {
    return await this.get(`user_profile:${userId}`);
  }
}

module.exports = new RedisManager();
