# =============================================================================
# EchoTune AI - Production Nginx Configuration
# Generated via Phase 2 deployment configuration process
# =============================================================================

# Security and performance optimizations
server_tokens off;
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection "1; mode=block";
add_header Referrer-Policy "strict-origin-when-cross-origin";

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;

# Cache zones for static content
proxy_cache_path /var/cache/nginx/echotune levels=1:2 keys_zone=echotune_cache:100m max_size=1g inactive=60m use_temp_path=off;

# Gzip compression settings
gzip on;
gzip_vary on;
gzip_min_length 1024;
gzip_proxied any;
gzip_comp_level 6;
gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/json
    application/javascript
    application/xml+rss
    application/atom+xml
    image/svg+xml;

# =============================================================================
# HTTP to HTTPS Redirect Server
# =============================================================================
server {
    listen 80;
    listen [::]:80;
    server_name ${DOMAIN} www.${DOMAIN};

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

# =============================================================================
# Main HTTPS Server Configuration
# =============================================================================
server {
    # SSL Configuration
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${DOMAIN} www.${DOMAIN};

    # SSL Certificate Configuration (Let's Encrypt)
    ssl_certificate ${SSL_CERT_PATH};
    ssl_certificate_key ${SSL_KEY_PATH};
    
    # Modern SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate ${SSL_CERT_PATH};
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.jsdelivr.net; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.spotify.com wss: ws:; media-src 'self' https:;" always;
    
    # General Settings
    client_max_body_size 50M;
    keepalive_timeout 65;
    send_timeout 30;
    
    # Logging
    access_log /var/log/nginx/echotune_access.log;
    error_log /var/log/nginx/echotune_error.log warn;

    # =============================================================================
    # Static File Serving with Caching
    # =============================================================================
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Static-File "true";
        
        # Try to serve static files directly
        try_files $uri @backend;
    }

    # =============================================================================
    # API Routes with Rate Limiting
    # =============================================================================
    
    # Authentication endpoints (stricter rate limiting)
    location ~ ^/api/(auth|login|oauth|callback) {
        limit_req zone=auth burst=10 nodelay;
        proxy_pass http://127.0.0.1:3000;
        include /etc/nginx/proxy_params.conf;
    }
    
    # General API endpoints
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://127.0.0.1:3000;
        include /etc/nginx/proxy_params.conf;
    }
    
    # Health check endpoint (no rate limiting)
    location /health {
        access_log off;
        proxy_pass http://127.0.0.1:3000;
        include /etc/nginx/proxy_params.conf;
    }

    # =============================================================================
    # WebSocket Support for Real-time Features
    # =============================================================================
    location /socket.io/ {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
    }

    # =============================================================================
    # MCP Server Proxy (if needed)
    # =============================================================================
    location /mcp/ {
        limit_req zone=general burst=50 nodelay;
        proxy_pass http://127.0.0.1:3001/;
        include /etc/nginx/proxy_params.conf;
    }

    # =============================================================================
    # Main Application Proxy
    # =============================================================================
    location / {
        limit_req zone=general burst=50 nodelay;
        
        # Try static files first, then proxy to app
        try_files $uri $uri/ @backend;
    }
    
    # Backend application proxy
    location @backend {
        proxy_pass http://127.0.0.1:3000;
        include /etc/nginx/proxy_params.conf;
        
        # Caching for dynamic content (optional)
        proxy_cache echotune_cache;
        proxy_cache_use_stale error timeout invalid_header updating;
        proxy_cache_lock on;
        proxy_cache_valid 200 302 1m;
        proxy_cache_valid 404 1m;
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_no_cache $http_pragma $http_authorization;
    }

    # =============================================================================
    # Error Pages
    # =============================================================================
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /var/www/echotune/error_pages;
    }
    
    location = /50x.html {
        root /var/www/echotune/error_pages;
    }

    # =============================================================================
    # Security: Block Common Attack Patterns
    # =============================================================================
    
    # Block common attack patterns
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block access to sensitive files
    location ~* \.(env|log|bak|config|sql|fla|psd|ini|sh|inc|~|conf)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block user-agent attacks
    if ($http_user_agent ~* (bot|crawler|spider|scraper)) {
        return 444;
    }

    # =============================================================================
    # Monitoring and Metrics
    # =============================================================================
    
    # Nginx status (restrict to local access)
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow ::1;
        deny all;
    }
}

# =============================================================================
# Additional Server Block for www Redirect (Optional)
# =============================================================================
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.${DOMAIN};

    # SSL Configuration (same as main server)
    ssl_certificate ${SSL_CERT_PATH};
    ssl_certificate_key ${SSL_KEY_PATH};
    ssl_protocols TLSv1.2 TLSv1.3;

    # Redirect www to non-www
    return 301 https://${DOMAIN}$request_uri;
}

# =============================================================================
# Configuration Notes:
# =============================================================================
#
# This configuration provides:
# ✅ HTTPS enforcement with modern SSL settings
# ✅ HTTP to HTTPS redirect
# ✅ Security headers and CSP
# ✅ Rate limiting for different endpoints
# ✅ Static file serving with caching
# ✅ WebSocket support for real-time features
# ✅ Gzip compression
# ✅ Error handling
# ✅ Security hardening
# ✅ Performance optimizations
#
# Before using:
# 1. Replace ${DOMAIN} with your actual domain name
# 2. Replace ${SSL_CERT_PATH} with your certificate path
# 3. Replace ${SSL_KEY_PATH} with your private key path
# 4. Create the proxy_params.conf file (see below)
# 5. Create error page directory: /var/www/echotune/error_pages
# 6. Test configuration: nginx -t
# 7. Reload nginx: systemctl reload nginx
#
# =============================================================================