# Optimized Docker Compose for EchoTune AI - Production Ready
version: '3.8'

# Define reusable configurations
x-common-variables: &common-variables
  NODE_ENV: ${NODE_ENV:-production}
  DOMAIN: ${DOMAIN:-localhost}
  FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "50m"
    max-file: "3"
    compress: "true"

x-restart-policy: &restart-policy
  restart: unless-stopped

# Networks with custom configuration
networks:
  echotune-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# Named volumes for data persistence
volumes:
  # SSL certificates and security
  ssl-certs:
    driver: local
  letsencrypt-data:
    driver: local
  
  # Application data
  app-logs:
    driver: local
  app-data:
    driver: local
  static-files:
    driver: local
  
  # Database storage
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  redis-data:
    driver: local
  
  # Nginx and reverse proxy
  nginx-logs:
    driver: local
  nginx-cache:
    driver: local
  certbot-data:
    driver: local

services:
  # Main EchoTune AI application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: ${NODE_ENV:-production}
        BUILD_VERSION: ${BUILD_VERSION:-latest}
    container_name: echotune-app
    <<: *restart-policy
    environment:
      <<: *common-variables
      PORT: 3000
      # Database connections
      MONGODB_URI: ${MONGODB_URI:-mongodb://mongodb:27017/echotune}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      # Security
      SESSION_SECRET: ${SESSION_SECRET:-change_this_in_production}
      JWT_SECRET: ${JWT_SECRET:-change_this_in_production}
      # Performance
      NODE_OPTIONS: "--max-old-space-size=512"
      UV_THREADPOOL_SIZE: 4
    env_file:
      - .env
    volumes:
      - app-logs:/app/logs
      - app-data:/app/data
      - static-files:/app/dist:ro
    networks:
      echotune-network:
        ipv4_address: 172.20.0.10
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=128m
      - /app/temp:noexec,nosuid,size=64m
    mem_limit: 1g
    mem_reservation: 512m
    cpus: '1.0'

  # Optimized Nginx reverse proxy and static file server
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: echotune-nginx
    <<: *restart-policy
    ports:
      - "80:80"
      - "443:443"
    environment:
      <<: *common-variables
      BACKEND_HOST: app
      BACKEND_PORT: 3000
      MAX_REQUEST_SIZE: ${MAX_REQUEST_SIZE:-10m}
      API_RATE_LIMIT: ${API_RATE_LIMIT:-10r/s}
      AUTH_RATE_LIMIT: ${AUTH_RATE_LIMIT:-5r/m}
      GENERAL_RATE_LIMIT: ${GENERAL_RATE_LIMIT:-20r/s}
      SSL_CERT_PATH: ${SSL_CERT_PATH:-/etc/nginx/ssl/default.crt}
      SSL_KEY_PATH: ${SSL_KEY_PATH:-/etc/nginx/ssl/default.key}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL:-admin@${DOMAIN}}
    volumes:
      - ssl-certs:/etc/nginx/ssl
      - letsencrypt-data:/etc/letsencrypt
      - nginx-logs:/var/log/nginx
      - nginx-cache:/var/cache/nginx
      - certbot-data:/var/www/certbot
      - static-files:/var/www/html:ro
    networks:
      echotune-network:
        ipv4_address: 172.20.0.20
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    mem_limit: 256m
    mem_reservation: 128m
    cpus: '0.5'

  # MongoDB for analytics and ML data
  mongodb:
    image: mongo:7.0-jammy
    container_name: echotune-mongodb
    <<: *restart-policy
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD:-secure_mongodb_password}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-echotune}
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
    networks:
      echotune-network:
        ipv4_address: 172.20.0.30
    command: mongod --auth --quiet --logpath /dev/null
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    mem_limit: 1g
    mem_reservation: 512m
    cpus: '1.0'

  # Redis for caching and session storage
  redis:
    image: redis:7.2-alpine
    container_name: echotune-redis
    <<: *restart-policy
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD:-secure_redis_password}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1
      --loglevel warning
    volumes:
      - redis-data:/data
    networks:
      echotune-network:
        ipv4_address: 172.20.0.40
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-secure_redis_password}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging: *default-logging
    security_opt:
      - no-new-privileges:true
    mem_limit: 256m
    mem_reservation: 128m
    cpus: '0.5'

  # Log management service (optional)
  logrotate:
    image: alpine:latest
    container_name: echotune-logrotate
    <<: *restart-policy
    volumes:
      - app-logs:/logs/app:ro
      - nginx-logs:/logs/nginx:ro
    command: >
      sh -c "
        echo '0 2 * * * find /logs -name \"*.log\" -size +100M -exec truncate -s 50M {} \;' > /etc/crontabs/root &&
        crond -f
      "
    networks:
      echotune-network:
        ipv4_address: 172.20.0.50
    profiles:
      - logging
    mem_limit: 32m
    cpus: '0.1'

  # System monitoring (optional)
  monitoring:
    image: prom/node-exporter:latest
    container_name: echotune-monitoring
    <<: *restart-policy
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      echotune-network:
        ipv4_address: 172.20.0.60
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true
    mem_limit: 128m
    cpus: '0.2'

  # Database backup service (optional)
  backup:
    image: alpine:latest
    container_name: echotune-backup
    <<: *restart-policy
    environment:
      MONGODB_URI: mongodb://admin:${MONGODB_ROOT_PASSWORD:-secure_mongodb_password}@mongodb:27017/echotune?authSource=admin
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - mongodb-data:/data/db:ro
      - app-data:/data/app:ro
      - ./backups:/backups
    command: >
      sh -c "
        apk add --no-cache mongodb-tools &&
        echo '$${BACKUP_SCHEDULE} mongodump --uri=\"$${MONGODB_URI}\" --out /backups/\$$(date +%Y%m%d_%H%M%S) && find /backups -type d -mtime +$${BACKUP_RETENTION_DAYS} -exec rm -rf {} +' > /etc/crontabs/root &&
        crond -f
      "
    networks:
      echotune-network:
        ipv4_address: 172.20.0.70
    depends_on:
      mongodb:
        condition: service_healthy
    profiles:
      - backup
    mem_limit: 128m
    cpus: '0.2'

# Additional production profiles
profiles:
  - production
  - development
  - monitoring
  - logging
  - backup