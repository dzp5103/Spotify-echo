{
  "overall": "insufficient",
  "configurationComplete": false,
  "totalKeys": 1,
  "validKeys": 0,
  "missingKeys": 0,
  "failedKeys": 1,
  "services": {
    "mongodb": {
      "status": "failed",
      "error": "MongoDB test failed: Command failed: node -e \"\n                const { MongoClient } = require('mongodb');\n                const client = new MongoClient('mongodb+srv://copilot:DapperMan77@cluster.mongodb.net/echotune_prod', { \n                    serverSelectionTimeoutMS: 5000,\n                    connectTimeoutMS: 5000\n                });\n                client.connect()\n                    .then(() => { console.log('SUCCESS'); client.close(); })\n                    .catch(err => { console.log('ERROR:', err.message); });\n            \"\nnode:internal/modules/cjs/loader:1215\n  throw err;\n  ^\n\nError: Cannot find module 'mongodb'\nRequire stack:\n- /home/runner/work/Spotify-echo/Spotify-echo/[eval]\n    at Module._resolveFilename (node:internal/modules/cjs/loader:1212:15)\n    at Module._load (node:internal/modules/cjs/loader:1043:27)\n    at Module.require (node:internal/modules/cjs/loader:1298:19)\n    at require (node:internal/modules/helpers:182:18)\n    at [eval]:2:41\n    at runScriptInThisContext (node:internal/vm:209:10)\n    at node:internal/process/execution:118:14\n    at [eval]-wrapper:6:24\n    at runScript (node:internal/process/execution:101:62)\n    at evalScript (node:internal/process/execution:133:3) {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/home/runner/work/Spotify-echo/Spotify-echo/[eval]' ]\n}\n\nNode.js v20.19.4\n",
      "duration": "31ms",
      "timestamp": "2025-08-07T06:00:03.339Z"
    }
  },
  "timestamp": "2025-08-07T06:00:03.306Z",
  "recommendations": [
    {
      "priority": "HIGH",
      "category": "Critical Services",
      "message": "Configure these essential services: spotify, openai, security, database",
      "action": "Add API keys to .env file"
    },
    {
      "priority": "MEDIUM",
      "category": "LLM Redundancy",
      "message": "Configure multiple LLM providers for fallback",
      "action": "Add Gemini or Anthropic API keys"
    },
    {
      "priority": "MEDIUM",
      "category": "Automation",
      "message": "MCP Server not running - advanced automation disabled",
      "action": "Run: npm run mcp-server"
    }
  ]
}