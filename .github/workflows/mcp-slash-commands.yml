name: MCP Slash Commands Handler

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

env:
  GITHUB_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
  NODE_ENV: development

jobs:
  parse-slash-commands:
    name: "⚡ Parse MCP Slash Commands"
    runs-on: ubuntu-latest
    if: |
      (github.event.issue.number || github.event.pull_request.number) &&
      (contains(github.event.comment.body, '/run-mcp') ||
       contains(github.event.comment.body, '/mcp-') ||
       contains(github.event.comment.body, '/analyze-gpt5') ||
       contains(github.event.comment.body, '/review-gpt5') ||
       contains(github.event.comment.body, '/optimize-gpt5')) &&
      (github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'COLLABORATOR' ||
       github.event.comment.author_association == 'MEMBER' ||
       github.actor == 'copilot')
    
    outputs:
      command: ${{ steps.parse.outputs.command }}
      target: ${{ steps.parse.outputs.target }}
      context_number: ${{ steps.parse.outputs.context_number }}
      context_type: ${{ steps.parse.outputs.context_type }}
    
    steps:
      - name: Parse Slash Command
        id: parse
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          COMMAND=""
          TARGET=""
          
          echo "🔍 Parsing comment: $COMMENT_BODY"
          
          # Parse MCP commands
          if echo "$COMMENT_BODY" | grep -qi "/run-mcp-all"; then
            COMMAND="run-mcp-all"
          elif echo "$COMMENT_BODY" | grep -qi "/run-mcp-validation"; then
            COMMAND="run-mcp-validation"
          elif echo "$COMMENT_BODY" | grep -qi "/mcp-health-check"; then
            COMMAND="mcp-health-check"
          elif echo "$COMMENT_BODY" | grep -qi "/mcp-discover"; then
            COMMAND="mcp-discover"
          elif echo "$COMMENT_BODY" | grep -qi "/analyze-gpt5"; then
            COMMAND="analyze-gpt5"
          elif echo "$COMMENT_BODY" | grep -qi "/review-gpt5"; then
            COMMAND="review-gpt5"
          elif echo "$COMMENT_BODY" | grep -qi "/optimize-gpt5"; then
            COMMAND="optimize-gpt5"
          elif echo "$COMMENT_BODY" | grep -qi "/approve-merge"; then
            COMMAND="approve-merge"
          elif echo "$COMMENT_BODY" | grep -qi "/force-validation"; then
            COMMAND="force-validation"
          fi
          
          # Extract target if specified
          if echo "$COMMENT_BODY" | grep -qE "(src/|scripts/|\.js|\.py|\.md)"; then
            TARGET=$(echo "$COMMENT_BODY" | grep -oE "(src/[^[:space:]]*|scripts/[^[:space:]]*|[^[:space:]]*\.(js|py|md))" | head -1)
          fi
          
          # Get context information
          if [ "${{ github.event.issue.number }}" != "" ]; then
            CONTEXT_TYPE="issue"
            CONTEXT_NUMBER="${{ github.event.issue.number }}"
          else
            CONTEXT_TYPE="pull_request"
            CONTEXT_NUMBER="${{ github.event.pull_request.number }}"
          fi
          
          echo "command=$COMMAND" >> $GITHUB_OUTPUT
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "context_type=$CONTEXT_TYPE" >> $GITHUB_OUTPUT
          echo "context_number=$CONTEXT_NUMBER" >> $GITHUB_OUTPUT
          
          echo "✅ Parsed command: $COMMAND, target: $TARGET, context: $CONTEXT_TYPE #$CONTEXT_NUMBER"

  execute-mcp-command:
    name: "🚀 Execute MCP Command"
    needs: parse-slash-commands
    runs-on: ubuntu-latest
    if: |
      needs.parse-slash-commands.outputs.command != '' &&
      contains(needs.parse-slash-commands.outputs.command, 'mcp') ||
      contains(needs.parse-slash-commands.outputs.command, 'run-mcp')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --silent
      
      - name: Execute MCP Command
        run: |
          COMMAND="${{ needs.parse-slash-commands.outputs.command }}"
          TARGET="${{ needs.parse-slash-commands.outputs.target }}"
          
          echo "🚀 Executing command: $COMMAND"
          
          case "$COMMAND" in
            "run-mcp-all")
              echo "Running comprehensive MCP validation..."
              if [ -f scripts/comprehensive-mcp-validation.js ]; then
                node scripts/comprehensive-mcp-validation.js --comprehensive > mcp-command-results.log 2>&1 || true
              else
                echo "⚠️ MCP validation script not found" > mcp-command-results.log
              fi
              ;;
            "run-mcp-validation")
              echo "Running MCP validation..."
              if [ -f scripts/comprehensive-mcp-validation.js ]; then
                node scripts/comprehensive-mcp-validation.js --full > mcp-command-results.log 2>&1 || true
              else
                echo "⚠️ MCP validation script not found" > mcp-command-results.log
              fi
              ;;
            "mcp-health-check")
              echo "Running MCP health check..."
              if [ -f scripts/comprehensive-mcp-validation.js ]; then
                node scripts/comprehensive-mcp-validation.js --health-check > mcp-command-results.log 2>&1 || true
              else
                echo "⚠️ MCP validation script not found" > mcp-command-results.log
              fi
              ;;
            "mcp-discover")
              echo "Running MCP discovery..."
              if [ -f scripts/discover-new-mcp-servers.js ]; then
                node scripts/discover-new-mcp-servers.js > mcp-command-results.log 2>&1 || true
              else
                echo "⚠️ MCP discovery script not found" > mcp-command-results.log
              fi
              ;;
            *)
              echo "Unknown MCP command: $COMMAND" > mcp-command-results.log
              ;;
          esac
          
          # Display results
          echo "📊 Command execution completed"
          cat mcp-command-results.log
      
      - name: Post Command Results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const command = '${{ needs.parse-slash-commands.outputs.command }}';
            const contextNumber = '${{ needs.parse-slash-commands.outputs.context_number }}';
            const contextType = '${{ needs.parse-slash-commands.outputs.context_type }}';
            
            let results = '';
            try {
              results = fs.readFileSync('mcp-command-results.log', 'utf8');
            } catch (error) {
              results = 'Command execution completed but no results file found.';
            }
            
            const commandDescriptions = {
              'run-mcp-all': 'Comprehensive MCP Validation',
              'run-mcp-validation': 'Full MCP Validation',
              'mcp-health-check': 'MCP Health Check',
              'mcp-discover': 'MCP Server Discovery'
            };
            
            const description = commandDescriptions[command] || 'MCP Command';
            
            const commentBody = `## ⚡ ${description} Results
            
            **Command**: \`/${command}\`  
            **Executed by**: @${{ github.actor }}  
            **Timestamp**: ${new Date().toISOString()}  
            **Workflow**: [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            <details>
            <summary>📊 Command Output</summary>
            
            \`\`\`
            ${results}
            \`\`\`
            
            </details>
            
            ### 🔄 Available Follow-up Commands
            
            - \`/run-mcp-all\` - Run comprehensive MCP validation
            - \`/mcp-health-check\` - Quick health check
            - \`/mcp-discover\` - Discover new MCP servers
            - \`/analyze-gpt5\` - Trigger GPT-5 analysis
            
            *Command executed by MCP Slash Commands Handler*`;
            
            // Post comment
            if (contextType === 'issue') {
              await github.rest.issues.createComment({
                issue_number: contextNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              await github.rest.pulls.createReviewComment({
                pull_number: contextNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
                commit_id: context.sha,
                path: 'README.md',
                line: 1
              }).catch(() => {
                // Fallback to regular comment
                return github.rest.issues.createComment({
                  issue_number: contextNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
              });
            }

  execute-gpt5-command:
    name: "🤖 Execute GPT-5 Command"
    needs: parse-slash-commands
    runs-on: ubuntu-latest
    if: |
      needs.parse-slash-commands.outputs.command != '' &&
      contains(needs.parse-slash-commands.outputs.command, 'gpt5')
    
    steps:
      - name: Trigger Enhanced GPT-5 Workflow
        uses: actions/github-script@v7
        with:
          script: |
            const command = '${{ needs.parse-slash-commands.outputs.command }}';
            const target = '${{ needs.parse-slash-commands.outputs.target }}';
            const contextNumber = '${{ needs.parse-slash-commands.outputs.context_number }}';
            
            // Map slash commands to workflow inputs
            let tasks = 'analyze';
            if (command === 'review-gpt5') {
              tasks = 'review';
            } else if (command === 'optimize-gpt5') {
              tasks = 'optimize';
            }
            
            // Post immediate confirmation comment
            const confirmationComment = `## 🤖 GPT-5 Analysis Initiated
            
            **Command**: \`/${command}\`  
            **Tasks**: ${tasks}  
            **Target**: ${target || 'Repository-wide'}  
            **Triggered by**: @${{ github.actor }}
            **Model**: GPT-5 Enhanced Multimodal
            
            🚀 **Status**: Triggering comprehensive analysis workflow...
            
            **What's happening:**
            - 📊 Repository structure analysis
            - 🔍 Code quality review
            - 🎯 Target-specific deep analysis
            - 🔧 MCP integration validation
            - ⚡ Performance optimization insights
            
            **Track Progress**: [View workflow runs](${{ github.server_url }}/${{ github.repository }}/actions)
            
            *Results will be posted when analysis is complete (typically 2-3 minutes)*`;
            
            await github.rest.issues.createComment({
              issue_number: contextNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: confirmationComment
            });
            
            // Trigger the enhanced GPT-5 workflow via repository dispatch
            try {
              await github.rest.repos.createDispatchEvent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                event_type: 'gpt5-analyze',
                client_payload: {
                  pr_number: contextNumber,
                  model: 'gpt-5',
                  tasks: tasks,
                  target: target || '',
                  triggered_by: '${{ github.actor }}',
                  trigger_type: 'slash_command',
                  command: command
                }
              });
              
              console.log(`✅ Successfully triggered GPT-5 analysis for ${command}`);
              
            } catch (error) {
              console.error('Failed to trigger GPT-5 workflow:', error);
              
              // Post error comment
              const errorComment = `## ❌ GPT-5 Analysis Failed to Start
              
              **Command**: \`/${command}\`  
              **Error**: ${error.message}
              
              **Troubleshooting:**
              - Check if the GPT-5 workflow file exists and is valid
              - Ensure proper permissions for repository dispatch events
              - Try again in a few minutes
              
              **Manual Alternative**: 
              You can manually trigger the workflow from the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions/workflows/gpt5-advanced-multimodel.yml)`;
              
              await github.rest.issues.createComment({
                issue_number: contextNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: errorComment
              });
            }

  execute-admin-command:
    name: "🔐 Execute Admin Command"
    needs: parse-slash-commands
    runs-on: ubuntu-latest
    if: |
      needs.parse-slash-commands.outputs.command != '' &&
      (contains(needs.parse-slash-commands.outputs.command, 'approve') ||
       contains(needs.parse-slash-commands.outputs.command, 'force')) &&
      (github.event.comment.author_association == 'OWNER' ||
       github.event.comment.author_association == 'COLLABORATOR')
    
    steps:
      - name: Execute Admin Command
        uses: actions/github-script@v7
        with:
          script: |
            const command = '${{ needs.parse-slash-commands.outputs.command }}';
            const contextNumber = '${{ needs.parse-slash-commands.outputs.context_number }}';
            const contextType = '${{ needs.parse-slash-commands.outputs.context_type }}';
            
            let commentBody = '';
            
            if (command === 'approve-merge') {
              commentBody = `## 🔓 Admin Override: Merge Approved
              
              **Override by**: @${{ github.actor }} (${github.event.comment.author_association})  
              **Timestamp**: ${new Date().toISOString()}
              
              This PR has been approved for merge by an administrator, bypassing validation requirements.
              
              **⚠️ Note**: Use admin overrides carefully and ensure manual verification has been performed.`;
              
              // Set a success status check to enable merge
              if (contextType === 'pull_request') {
                await github.rest.repos.createCommitStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.sha,
                  state: 'success',
                  target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
                  description: 'Admin override - merge approved',
                  context: 'MCP Validation Gateway / Admin Override'
                });
              }
              
            } else if (command === 'force-validation') {
              commentBody = `## ⚡ Force Validation Triggered
              
              **Requested by**: @${{ github.actor }} (${github.event.comment.author_association})  
              **Timestamp**: ${new Date().toISOString()}
              
              Force validation has been requested. Triggering comprehensive MCP validation workflow...
              
              **Note**: This will run validation even if not normally required for this PR type.`;
              
              // Trigger the MCP validation workflow with force option
              try {
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'agent-mcp-automation.yml',
                  ref: context.ref || 'main',
                  inputs: {
                    validation_level: 'comprehensive',
                    force_validation: 'true'
                  }
                });
              } catch (error) {
                commentBody += `\n\n⚠️ **Warning**: Failed to trigger validation workflow automatically. Please run manually.`;
              }
            }
            
            // Post comment
            await github.rest.issues.createComment({
              issue_number: contextNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });