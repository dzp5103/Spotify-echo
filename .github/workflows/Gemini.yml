name: Enhanced Gemini Code Reviews

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
      - 'scripts/**' 
      - 'mcp-server/**'
      - 'tests/**'
      - '.gemini/**'
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'mcp-server/**'

env:
  GEMINI_MODEL: "gemini-2.0-flash-exp"

jobs:
  gemini-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Log review context
        run: |
          echo "🤖 Gemini Code Review Analysis"
          echo "==============================="
          echo "Event: ${{ github.event_name }}"
          echo "Model: ${{ env.GEMINI_MODEL }}"
          echo "PR Number: ${{ github.event.pull_request.number || 'N/A' }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

      - name: 🔍 Analyze changed files
        id: files
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "📁 Changed files for review:"
          echo "$changed_files" | while read file; do
            if [[ -n "$file" ]]; then
              echo "  📄 $file"
            fi
          done
          
          file_count=$(echo "$changed_files" | wc -l)
          echo "📊 Total files changed: $file_count"

      - name: 🤖 Enhanced Gemini AI Code Review
        uses: truongnh1992/gemini-ai-code-reviewer@v6.5.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GEMINI_MODEL: ${{ env.GEMINI_MODEL }}
          INPUT_EXCLUDE: "node_modules,dist,build,coverage,.git,*.min.js,package-lock.json,*.log"
          INPUT_INCLUDE: "src,scripts,mcp-server,tests,.github/workflows,.gemini"

      - name: 📊 Review completion summary
        if: always()
        run: |
          echo "🎯 Gemini Code Review Completed"
          echo "==============================="
          echo "Status: ${{ job.status }}"
          echo "Model Used: ${{ env.GEMINI_MODEL }}"
          echo "Review Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "📝 Review comments have been added to PR #${{ github.event.pull_request.number }}"
          fi
          
          echo "✅ Enhanced review with music domain expertise completed"

      - name: 🔍 Test Gemini integration
        if: github.event_name == 'pull_request'
        run: |
          echo "🧪 Testing Gemini Integration..."
          
          # Check if .gemini directory exists and has proper structure
          if [[ -d ".gemini" ]]; then
            echo "✅ .gemini configuration directory found"
            
            for file in config.json rules.md prompts.md workflow.yml; do
              if [[ -f ".gemini/$file" ]]; then
                echo "✅ $file exists"
              else
                echo "❌ $file missing"
              fi
            done
          else
            echo "❌ .gemini configuration directory not found"
          fi
          
          echo "📊 Gemini integration validation completed"

  auto-comment:
    runs-on: ubuntu-latest
    needs: gemini-analysis
    if: github.event_name == 'pull_request' && always()
    
    steps:
      - name: 📝 Add enhanced review summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const reviewStatus = '${{ needs.gemini-analysis.result }}';
            const prNumber = context.issue.number;
            
            const comment = `
            ## 🤖 Enhanced Gemini Code Review Summary
            
            **Review Status**: ${reviewStatus === 'success' ? '✅ Completed' : '❌ Failed'}
            **Model Used**: ${{ env.GEMINI_MODEL }}
            **Timestamp**: ${new Date().toISOString()}
            
            ### 🎯 Review Focus Areas
            - **Music Domain Logic**: Spotify API usage, audio features, recommendation algorithms
            - **Security Analysis**: API key handling, input validation, authentication flows
            - **Performance Optimization**: Database queries, memory usage, async operations
            - **Code Quality**: Modern JavaScript/TypeScript patterns, error handling
            
            ### 📊 Analysis Results
            ${reviewStatus === 'success' ? 
              '✅ Detailed review comments have been added inline to your code.' : 
              '❌ Review process encountered issues. Please check the workflow logs.'}
            
            ### 💡 Next Steps
            1. Review the inline comments and suggestions
            2. Address any security or performance concerns
            3. Consider the music domain recommendations
            4. Test changes with the Gemini integration tools
            
            ---
            *Powered by Google Gemini AI with music domain expertise*
            `;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
