name: üöÄ One-Click Deploy to DigitalOcean

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment Target'
        required: true
        default: 'digitalocean-app-platform'
        type: choice
        options:
        - digitalocean-app-platform
        - digitalocean-droplet
        - docker-hub
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      enable_monitoring:
        description: 'Enable Health Monitoring'
        required: true
        default: true
        type: boolean

  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'app.yaml'

  pull_request:
    branches: [ main ]
    types: [closed]
    paths:
      - 'src/**'
      - 'package.json'
      - 'Dockerfile'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.9'
  APP_NAME: 'echotune-ai'

jobs:
  # Build and test job
  build-and-test:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üì¶ Install Dependencies
      run: |
        npm ci --only=production
        if [ -f requirements-production.txt ]; then
          pip install -r requirements-production.txt
        fi
        
    - name: üß™ Run Health Checks
      run: |
        npm run health-check || echo "Health check will be performed post-deployment"
        
    - name: üèóÔ∏è Test Docker Build
      run: |
        docker build -t ${{ env.APP_NAME }}:test .
        echo "‚úÖ Docker build successful"
        
    outputs:
      build-success: ${{ job.status == 'success' }}

  # Deploy to DigitalOcean App Platform
  deploy-app-platform:
    name: üåä Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      needs.build-and-test.outputs.build-success == 'true' && 
      (github.event.inputs.deploy_target == 'digitalocean-app-platform' || 
       github.event_name == 'push' || 
       (github.event_name == 'pull_request' && github.event.pull_request.merged == true))
    
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ env.APP_NAME }}-${{ github.sha }}.ondigitalocean.app
      
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üîß Install DigitalOcean CLI
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: üìù Prepare App Configuration
      run: |
        echo "üìù Preparing DigitalOcean App Platform configuration..."
        
        # Create app spec with dynamic values
        cp app.yaml app-deploy.yaml
        
        # Update repository information
        sed -i "s|repo: dzp5103/Spotify-echo|repo: ${{ github.repository }}|g" app-deploy.yaml
        sed -i "s|branch: main|branch: ${{ github.ref_name }}|g" app-deploy.yaml
        
        # Add environment-specific configurations
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          sed -i "s|name: echotune-ai|name: echotune-ai-staging|g" app-deploy.yaml
          sed -i "s|value: production|value: staging|g" app-deploy.yaml
        fi
        
        echo "‚úÖ App configuration prepared"
        
    - name: üîê Configure App Secrets
      run: |
        echo "üîê Setting up secure environment variables..."
        
        # Generate secure secrets if not provided
        if [ -z "${{ secrets.SESSION_SECRET }}" ]; then
          SESSION_SECRET=$(openssl rand -hex 32)
          echo "SESSION_SECRET=$SESSION_SECRET" >> $GITHUB_ENV
        else
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> $GITHUB_ENV
        fi
        
        if [ -z "${{ secrets.JWT_SECRET }}" ]; then
          JWT_SECRET=$(openssl rand -hex 32)
          echo "JWT_SECRET=$JWT_SECRET" >> $GITHUB_ENV  
        else
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
        fi
        
        echo "‚úÖ Secrets configured"
        
    - name: üöÄ Deploy to App Platform
      run: |
        echo "üåä Deploying EchoTune AI to DigitalOcean App Platform..."
        
        # Check if app already exists
        APP_EXISTS=$(doctl apps list --format ID,Spec.Name --no-header | grep -w "${{ env.APP_NAME }}" | wc -l || echo "0")
        
        if [ "$APP_EXISTS" -gt 0 ]; then
          echo "üìù Updating existing app..."
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep -w "${{ env.APP_NAME }}" | awk '{print $1}')
          
          # Update the app with new configuration
          doctl apps update $APP_ID --spec app-deploy.yaml --wait
          
          echo "APP_ID=$APP_ID" >> $GITHUB_ENV
        else
          echo "üÜï Creating new app..."
          
          # Create new app and capture the ID
          CREATE_OUTPUT=$(doctl apps create --spec app-deploy.yaml --format ID --no-header --wait)
          APP_ID=$(echo "$CREATE_OUTPUT" | head -1)
          
          echo "APP_ID=$APP_ID" >> $GITHUB_ENV
        fi
        
        echo "‚úÖ Deployment completed! App ID: $APP_ID"
        
    - name: üîç Get Deployment Information
      run: |
        echo "üîç Retrieving deployment information..."
        
        # Get app details
        APP_INFO=$(doctl apps get ${{ env.APP_ID }} --format ID,Spec.Name,ActiveDeployment.ID,LiveURL --no-header)
        APP_URL=$(echo "$APP_INFO" | awk '{print $NF}')
        
        if [ -z "$APP_URL" ] || [ "$APP_URL" = "<no value>" ]; then
          # Fallback URL construction
          APP_URL="https://${{ env.APP_NAME }}-${{ github.sha }}.ondigitalocean.app"
        fi
        
        echo "üåê Application URL: $APP_URL"
        echo "APP_URL=$APP_URL" >> $GITHUB_ENV
        
        # Output deployment details
        echo "üìä Deployment Details:"
        echo "   - App ID: ${{ env.APP_ID }}"
        echo "   - URL: $APP_URL"
        echo "   - Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo "   - Branch: ${{ github.ref_name }}"
        echo "   - Commit: ${{ github.sha }}"
        
    - name: üè• Health Check
      if: github.event.inputs.enable_monitoring != 'false'
      run: |
        echo "üîç Performing deployment health check..."
        
        # Wait for deployment to be ready
        sleep 60  # Give more time for DigitalOcean deployment
        
        HEALTH_URL="${{ env.APP_URL }}/health"
        
        for i in {1..15}; do
          echo "‚è≥ Health check attempt $i/15..."
          
          if curl -f -s --connect-timeout 10 --max-time 30 "$HEALTH_URL" > /dev/null; then
            echo "‚úÖ Health check passed!"
            curl -s "$HEALTH_URL" | head -5
            break
          elif curl -f -s --connect-timeout 10 --max-time 30 "${{ env.APP_URL }}" > /dev/null; then
            echo "‚úÖ Application is responding!"
            break
          else
            echo "‚è≥ Waiting for deployment... (attempt $i/15)"
            sleep 20
          fi
          
          if [ $i -eq 15 ]; then
            echo "‚ö†Ô∏è Health check timeout - app may still be starting"
            echo "üîç Manual check: curl $HEALTH_URL"
          fi
        done

  # Deploy to DigitalOcean Droplet (Alternative method)
  deploy-droplet:
    name: üíß Deploy to DigitalOcean Droplet
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      needs.build-and-test.outputs.build-success == 'true' && 
      github.event.inputs.deploy_target == 'digitalocean-droplet'
    
    environment:
      name: droplet-${{ github.event.inputs.environment || 'production' }}
      
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üîß Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.DROPLET_SSH_KEY }}
        
    - name: üöÄ Deploy to Droplet
      run: |
        echo "üíß Deploying to DigitalOcean Droplet..."
        
        # Verify SSH connectivity
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@${{ secrets.DROPLET_IP }} "echo 'SSH connection successful'"
        
        # Copy deployment files
        scp -o StrictHostKeyChecking=no deploy-one-click.sh root@${{ secrets.DROPLET_IP }}:/tmp/
        scp -o StrictHostKeyChecking=no .env.example root@${{ secrets.DROPLET_IP }}:/tmp/
        
        # Execute deployment on droplet
        ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} << 'EOF'
          chmod +x /tmp/deploy-one-click.sh
          cd /tmp
          ./deploy-one-click.sh
        EOF
        
        echo "‚úÖ Droplet deployment completed!"
        echo "üåê Access your app at: http://${{ secrets.DROPLET_IP }}:3000"

  # Deploy to Docker Hub (For container distribution)
  deploy-docker:
    name: üê≥ Deploy to Docker Hub
    runs-on: ubuntu-latest
    needs: build-and-test
    if: |
      needs.build-and-test.outputs.build-success == 'true' && 
      github.event.inputs.deploy_target == 'docker-hub'
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üèóÔ∏è Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîë Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: üèóÔ∏è Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:v1.0.0
        cache-from: type=gha
        cache-to: type=gha,mode=max
          
    - name: üìù Create Docker Deployment Guide
      run: |
        echo "üê≥ Docker image published successfully!"
        echo ""
        echo "üöÄ Quick Deploy Commands:"
        echo ""
        echo "# Basic deployment:"
        echo "docker run -d -p 3000:3000 --name echotune-ai ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest"
        echo ""
        echo "# With custom environment variables:"
        echo "docker run -d -p 3000:3000 \\"
        echo "  -e SPOTIFY_CLIENT_ID=your_client_id \\"
        echo "  -e SPOTIFY_CLIENT_SECRET=your_client_secret \\"
        echo "  -e GEMINI_API_KEY=your_gemini_key \\"
        echo "  -e DEFAULT_LLM_PROVIDER=gemini \\"
        echo "  --name echotune-ai ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:latest"
        echo ""
        echo "# Using docker-compose:"
        echo "# Download docker-compose.yml from the repository and run:"
        echo "# docker-compose up -d"

  # Post-deployment verification and reporting
  post-deploy-check:
    name: ‚úÖ Post-Deploy Verification
    runs-on: ubuntu-latest
    needs: [deploy-app-platform, deploy-droplet, deploy-docker]
    if: always() && (needs.deploy-app-platform.result == 'success' || needs.deploy-droplet.result == 'success' || needs.deploy-docker.result == 'success')
    
    steps:
    - name: üìä Deployment Summary
      run: |
        echo "üéâ EchoTune AI Deployment Summary"
        echo "================================="
        echo ""
        echo "‚úÖ Build Status: ${{ needs.build-and-test.result }}"
        echo "‚úÖ App Platform: ${{ needs.deploy-app-platform.result || 'skipped' }}"
        echo "‚úÖ Droplet: ${{ needs.deploy-droplet.result || 'skipped' }}"
        echo "‚úÖ Docker Hub: ${{ needs.deploy-docker.result || 'skipped' }}"
        echo ""
        echo "üåê Access your application:"
        if [ "${{ needs.deploy-app-platform.result }}" = "success" ]; then
          echo "- DigitalOcean App Platform: Check the environment URL above"
        fi
        if [ "${{ secrets.DROPLET_IP }}" != "" ]; then
          echo "- Droplet: http://${{ secrets.DROPLET_IP }}:3000"
        fi
        if [ "${{ needs.deploy-docker.result }}" = "success" ]; then
          echo "- Docker: Use the deployment commands above"
        fi
        echo ""
        echo "üéµ Your AI-powered music discovery platform is ready!"
        echo ""
        echo "üîß Next Steps:"
        echo "1. Configure Spotify API credentials in your deployment environment"
        echo "2. Add AI provider API keys (Gemini, OpenAI) for enhanced features"
        echo "3. Set up custom domain if needed"
        echo "4. Configure monitoring and analytics"
        
    - name: üìù Update Deployment Status
      if: needs.deploy-app-platform.result == 'success'
      run: |
        DEPLOY_STATUS="success"
        DEPLOY_DATE=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
        COMMIT_SHA="${{ github.sha }}"
        
        echo "üéØ Deployment completed successfully!"
        echo "üìÖ Deployed at: $DEPLOY_DATE"
        echo "üîó Commit: $COMMIT_SHA"
        echo "üåê Environment: ${{ github.event.inputs.environment || 'production' }}"

  # Error handling and cleanup
  cleanup-on-failure:
    name: üßπ Cleanup Failed Deployment
    runs-on: ubuntu-latest
    needs: [deploy-app-platform, deploy-droplet, deploy-docker]
    if: failure()
    
    steps:
    - name: üö® Deployment Failed Notification
      run: |
        echo "‚ùå Deployment failed! Check the logs above for details."
        echo ""
        echo "üîç Common issues and solutions:"
        echo ""
        echo "üîê Missing Secrets:"
        echo "   - DIGITALOCEAN_ACCESS_TOKEN: Required for App Platform deployment"
        echo "   - DROPLET_SSH_KEY: Required for droplet deployment (if using)"
        echo "   - DROPLET_IP: Required for droplet deployment (if using)"
        echo "   - DOCKER_USERNAME & DOCKER_PASSWORD: Required for Docker Hub (if using)"
        echo ""
        echo "‚öôÔ∏è Configuration Issues:"
        echo "   - Verify app.yaml syntax is correct"
        echo "   - Check repository permissions and branch access"
        echo "   - Ensure DigitalOcean account has sufficient resources"
        echo ""
        echo "üåê Network Issues:"
        echo "   - Verify GitHub Actions can access DigitalOcean API"
        echo "   - Check if services are temporarily unavailable"
        echo ""
        echo "üí° Troubleshooting Steps:"
        echo "1. Verify all required secrets are configured in repository settings"
        echo "2. Check DigitalOcean API token permissions"
        echo "3. Test deployment locally first using ./deploy-one-click.sh"
        echo "4. Review the specific error messages in the job logs above"
        echo "5. Consult documentation: https://github.com/dzp5103/Spotify-echo#deployment"
        echo ""
        echo "üÜò Get Help:"
        echo "   - GitHub Issues: https://github.com/dzp5103/Spotify-echo/issues"
        echo "   - DigitalOcean Docs: https://docs.digitalocean.com/products/app-platform/"