name: 'PR Slash Commands Handler'

on:
  issue_comment:
    types: [created]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Parse and validate slash commands
  parse-command:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/')
    outputs:
      command: ${{ steps.parse.outputs.command }}
      args: ${{ steps.parse.outputs.args }}
      should-process: ${{ steps.parse.outputs.should-process }}
      pr-number: ${{ steps.parse.outputs.pr-number }}
      is-maintainer: ${{ steps.parse.outputs.is-maintainer }}
    steps:
      - name: Parse slash command
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.trim();
            const author = context.payload.comment.user.login;
            
            // Extract command and arguments
            const commandMatch = comment.match(/^\/([a-zA-Z0-9-_]+)(?:\s+(.+))?$/);
            if (!commandMatch) {
              console.log('Not a valid slash command format');
              core.setOutput('should-process', 'false');
              return;
            }
            
            const command = commandMatch[1];
            const args = commandMatch[2] || '';
            const prNumber = context.payload.issue.number;
            
            // Check if user has permission to run commands
            const { data: collaborators } = await github.rest.repos.listCollaborators({
              owner: context.repo.owner,
              repo: context.repo.repo,
              affiliation: 'direct'
            });
            
            const isMaintainer = collaborators.some(collab => 
              collab.login === author && ['admin', 'maintain'].includes(collab.permissions.admin ? 'admin' : collab.permissions.maintain ? 'maintain' : 'none')
            );
            
            const canRunCommands = isMaintainer || author === context.repo.owner;
            
            console.log('Command details:', {
              command,
              args, 
              author,
              isMaintainer,
              canRunCommands,
              prNumber
            });
            
            core.setOutput('command', command);
            core.setOutput('args', args);
            core.setOutput('should-process', canRunCommands ? 'true' : 'false');
            core.setOutput('pr-number', prNumber.toString());
            core.setOutput('is-maintainer', isMaintainer ? 'true' : 'false');
            
            // React to comment to show it was processed
            if (canRunCommands) {
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'eyes'
              });
            } else {
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'confused'
              });
            }

  # MCP health check command
  mcp-health-check:
    runs-on: ubuntu-latest
    needs: parse-command
    if: needs.parse-command.outputs.should-process == 'true' && needs.parse-command.outputs.command == 'mcp-health-check'
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          if [ -f "requirements.txt" ]; then
            pip install --quiet -r requirements.txt
          fi

      - name: Run MCP health check
        id: health-check
        run: |
          echo "üîç Running MCP health check..."
          
          # Install MCP dependencies first
          node scripts/mcp-manager.js install > health-install.log 2>&1 || true
          
          # Run health check
          node scripts/mcp-manager.js health > health-check.log 2>&1
          HEALTH_STATUS=$?
          
          # Generate summary
          if [ $HEALTH_STATUS -eq 0 ]; then
            SUMMARY="‚úÖ MCP Health Check: All systems operational"
            DETAILS="All configured MCP servers are responding properly."
          else
            SUMMARY="‚ö†Ô∏è MCP Health Check: Issues detected"
            DETAILS="Some MCP servers are not responding. Check the logs for details."
          fi
          
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
          echo "details=$DETAILS" >> $GITHUB_OUTPUT
          echo "status=$HEALTH_STATUS" >> $GITHUB_OUTPUT

      - name: Comment results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let healthLog = 'No health log available';
            try {
              healthLog = fs.readFileSync('health-check.log', 'utf8');
            } catch (error) {
              healthLog = 'Error reading health log: ' + error.message;
            }
            
            const summary = '${{ steps.health-check.outputs.summary }}';
            const details = '${{ steps.health-check.outputs.details }}';
            
            const comment = `## üîç MCP Health Check Results
            
            ${summary}
            
            **Details**: ${details}
            
            <details>
            <summary>üìã Health Check Log</summary>
            
            \`\`\`
            ${healthLog.slice(0, 2000)}${healthLog.length > 2000 ? '\n... (truncated)' : ''}
            \`\`\`
            </details>
            
            **Triggered by**: @${{ github.actor }}  
            **Command**: \`/mcp-health-check\``;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.parse-command.outputs.pr-number }},
              body: comment
            });

      - name: Upload health check artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mcp-health-check-${{ needs.parse-command.outputs.pr-number }}
          path: |
            health-*.log
            mcp-*.json
          retention-days: 7

  # Comprehensive MCP validation command
  run-mcp-validation:
    runs-on: ubuntu-latest
    needs: parse-command
    if: needs.parse-command.outputs.should-process == 'true' && needs.parse-command.outputs.command == 'run-mcp-validation'
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Trigger comprehensive validation
        uses: actions/github-script@v7
        with:
          script: |
            // Trigger the main MCP validation workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'mcp-validation-gateway.yml',
              ref: context.payload.pull_request.head.ref,
              inputs: {
                validation_type: 'full',
                pr_number: '${{ needs.parse-command.outputs.pr-number }}'
              }
            });
            
            // Comment that validation was triggered
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.parse-command.outputs.pr-number }},
              body: `## üõ°Ô∏è MCP Comprehensive Validation Triggered
              
              A full MCP validation suite has been triggered for this PR.
              
              **Validation includes**:
              - ‚úÖ MCP server health checks
              - ‚úÖ Integration testing
              - ‚úÖ Code quality analysis
              - ‚úÖ Security audit
              - ‚úÖ Configuration validation
              
              Results will be posted here once the validation completes.
              
              **Triggered by**: @${{ github.actor }}  
              **Command**: \`/run-mcp-validation\``
            });

  # GPT-5 analysis command
  gpt5-analyze:
    runs-on: ubuntu-latest
    needs: parse-command
    if: needs.parse-command.outputs.should-process == 'true' && (needs.parse-command.outputs.command == 'gpt5' || needs.parse-command.outputs.command == 'analyze-gpt5')
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Get PR changes
        id: changes
        uses: actions/github-script@v7
        with:
          script: |
            // Get PR files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.parse-command.outputs.pr-number }}
            });
            
            // Get PR diff
            const { data: diff } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.parse-command.outputs.pr-number }},
              mediaType: {
                format: 'diff'
              }
            });
            
            const changedFiles = files.map(file => ({
              filename: file.filename,
              status: file.status,
              additions: file.additions,
              deletions: file.deletions,
              changes: file.changes
            }));
            
            core.setOutput('changed-files', JSON.stringify(changedFiles));
            core.setOutput('diff-size', files.length.toString());
            
            return {
              files: changedFiles,
              totalFiles: files.length,
              diff: diff.slice(0, 5000) // Truncate large diffs
            };

      - name: Run GPT-5 analysis
        id: gpt5-analysis
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "ü§ñ Running GPT-5 analysis..."
          
          # Create analysis script
          cat > gpt5-analysis.js << 'EOF'
          const fs = require('fs');
          
          async function analyzeChanges() {
            const changedFiles = JSON.parse(process.env.CHANGED_FILES || '[]');
            
            // Mock analysis for now - in production this would call GPT-5 API
            const analysis = {
              summary: "Code analysis completed",
              recommendations: [
                "Code structure appears well organized",
                "Consider adding unit tests for new functionality", 
                "Documentation updates look comprehensive"
              ],
              riskLevel: "low",
              mcpImpact: changedFiles.some(f => f.filename.includes('mcp')) ? "moderate" : "minimal",
              autoMergeRecommendation: changedFiles.length < 10 && 
                !changedFiles.some(f => f.filename.includes('security') || f.filename.includes('auth'))
            };
            
            console.log('GPT-5 Analysis Results:');
            console.log(JSON.stringify(analysis, null, 2));
            
            return analysis;
          }
          
          analyzeChanges().catch(console.error);
          EOF
          
          CHANGED_FILES='${{ steps.changes.outputs.changed-files }}' node gpt5-analysis.js > analysis-results.json 2>&1
          
          # Extract results
          if [ -f "analysis-results.json" ]; then
            ANALYSIS_SUMMARY="GPT-5 analysis completed successfully"
          else
            ANALYSIS_SUMMARY="GPT-5 analysis encountered issues"
          fi
          
          echo "summary=$ANALYSIS_SUMMARY" >> $GITHUB_OUTPUT

      - name: Comment GPT-5 analysis results
        uses: actions/github-script@v7
        with:
          script: |
            const changedFiles = JSON.parse('${{ steps.changes.outputs.changed-files }}');
            
            let analysisContent = '';
            try {
              const fs = require('fs');
              analysisContent = fs.readFileSync('analysis-results.json', 'utf8');
            } catch (error) {
              analysisContent = 'Analysis results not available';
            }
            
            const comment = `## ü§ñ GPT-5 Analysis Results
            
            **Summary**: ${{ steps.gpt5-analysis.outputs.summary }}
            
            **Files Changed**: ${changedFiles.length}
            
            ### üìä Change Analysis
            ${changedFiles.map(file => 
              `- \`${file.filename}\` (${file.status}) - +${file.additions}/-${file.deletions} lines`
            ).slice(0, 10).join('\n')}
            ${changedFiles.length > 10 ? `\n... and ${changedFiles.length - 10} more files` : ''}
            
            <details>
            <summary>üîç Detailed Analysis</summary>
            
            \`\`\`json
            ${analysisContent.slice(0, 1500)}${analysisContent.length > 1500 ? '\n... (truncated)' : ''}
            \`\`\`
            </details>
            
            **Triggered by**: @${{ github.actor }}  
            **Command**: \`/${{ needs.parse-command.outputs.command }}\``;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.parse-command.outputs.pr-number }},
              body: comment
            });

  # Approve merge command (maintainers only)
  approve-merge:
    runs-on: ubuntu-latest
    needs: parse-command
    if: needs.parse-command.outputs.should-process == 'true' && needs.parse-command.outputs.is-maintainer == 'true' && needs.parse-command.outputs.command == 'approve-merge'
    steps:
      - name: Force approve PR
        uses: actions/github-script@v7
        with:
          script: |
            // Add approval review
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.parse-command.outputs.pr-number }},
              event: 'APPROVE',
              body: '‚úÖ Force approved by maintainer via `/approve-merge` command'
            });
            
            // Add merge label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.parse-command.outputs.pr-number }},
              labels: ['ready-to-merge', 'maintainer-approved']
            });
            
            // Comment about the approval
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.parse-command.outputs.pr-number }},
              body: `## ‚úÖ Maintainer Override Approval
              
              This PR has been force-approved by a maintainer, bypassing standard validation gates.
              
              **Approved by**: @${{ github.actor }}  
              **Command**: \`/approve-merge\`
              
              The PR is now ready for merge.`
            });

  # Handle unknown commands
  unknown-command:
    runs-on: ubuntu-latest
    needs: parse-command
    if: |
      needs.parse-command.outputs.should-process == 'true' && 
      !contains(fromJSON('["mcp-health-check", "run-mcp-validation", "gpt5", "analyze-gpt5", "approve-merge"]'), needs.parse-command.outputs.command)
    steps:
      - name: Comment unknown command
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ‚ùì Unknown Command
            
            The command \`/${{ needs.parse-command.outputs.command }}\` is not recognized.
            
            **Available Commands**:
            - \`/mcp-health-check\` - Run quick MCP health validation
            - \`/run-mcp-validation\` - Run comprehensive MCP validation suite  
            - \`/gpt5 analyze\` - Run GPT-5 analysis of PR changes
            - \`/approve-merge\` - (Maintainers only) Force approve and enable merge
            
            **Usage**: Simply comment with one of the commands above.
            
            **Triggered by**: @${{ github.actor }}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.parse-command.outputs.pr-number }},
              body: comment
            });

  # Handle permission denied
  permission-denied:
    runs-on: ubuntu-latest
    needs: parse-command
    if: needs.parse-command.outputs.should-process == 'false' && startsWith(github.event.comment.body, '/')
    steps:
      - name: Comment permission denied
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üîí Permission Denied
            
            You don't have permission to run slash commands on this repository.
            
            **Who can run commands**:
            - Repository maintainers
            - Repository admins
            - Repository owner
            
            If you believe this is an error, please contact a maintainer.
            
            **Attempted command**: \`${{ github.event.comment.body.split(' ')[0] }}\``;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: comment
            });