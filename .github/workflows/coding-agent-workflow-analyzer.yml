name: 'Coding Agent Workflow Analysis & Optimization'

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, labeled]
    paths:
      - '.github/workflows/**'
      - '.github/copilot**'
      - 'agent-workflow/**'
      - 'mcp-server/**'
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'analyze'
        type: choice
        options:
          - analyze
          - validate
          - optimize
          - fix
          - report
      target:
        description: 'Target workflow file (optional)'
        required: false
        type: string
      fix_type:
        description: 'Fix type for automated fixes'
        required: false
        default: 'safe'
        type: choice
        options:
          - safe
          - all

env:
  NODE_ENV: development
  MCP_CODING_AGENT_PORT: 3002

jobs:
  # Check if this should trigger analysis
  check-trigger:
    name: "üîç Check Analysis Trigger"
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      action: ${{ steps.check.outputs.action }}
      is-comment-trigger: ${{ steps.check.outputs.is-comment-trigger }}
      pr-number: ${{ steps.check.outputs.pr-number }}
    steps:
      - name: Check trigger conditions
        id: check
        run: |
          SHOULD_RUN="false"
          ACTION="analyze"
          IS_COMMENT_TRIGGER="false"
          PR_NUMBER=""

          # Check workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SHOULD_RUN="true"
            ACTION="${{ github.event.inputs.action }}"
          # Check PR events
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            SHOULD_RUN="true"
            PR_NUMBER="${{ github.event.number }}"
          # Check comment triggers
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            if echo "$COMMENT_BODY" | grep -qiE "/(analyze|validate|optimize|fix)-workflows?"; then
              SHOULD_RUN="true"
              IS_COMMENT_TRIGGER="true"
              PR_NUMBER="${{ github.event.issue.number }}"
              
              # Extract action from comment
              if echo "$COMMENT_BODY" | grep -qi "/analyze-workflow"; then
                ACTION="analyze"
              elif echo "$COMMENT_BODY" | grep -qi "/validate-workflow"; then
                ACTION="validate"  
              elif echo "$COMMENT_BODY" | grep -qi "/optimize-workflow"; then
                ACTION="optimize"
              elif echo "$COMMENT_BODY" | grep -qi "/fix-workflow"; then
                ACTION="fix"
              fi
            fi
          fi

          echo "should-run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "is-comment-trigger=$IS_COMMENT_TRIGGER" >> $GITHUB_OUTPUT
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
          echo "üîç Should run: $SHOULD_RUN"
          echo "üéØ Action: $ACTION"
          echo "üí¨ Comment trigger: $IS_COMMENT_TRIGGER"
          echo "üî¢ PR Number: $PR_NUMBER"

  # Setup and start MCP server
  setup-mcp-server:
    name: "üöÄ Setup MCP Server"
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should-run == 'true'
    outputs:
      server-ready: ${{ steps.server.outputs.ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --production=false
          echo "‚úÖ Dependencies installed"

      - name: Start MCP Server
        id: server
        run: |
          echo "üöÄ Starting Coding Agent Workflow MCP Server..."
          
          # Start server in background
          node mcp-server/coding-agent-mcp-server.js &
          SERVER_PID=$!
          echo "server_pid=$SERVER_PID" >> $GITHUB_OUTPUT
          
          # Wait for server to start
          for i in {1..30}; do
            if curl -f http://localhost:3002/health > /dev/null 2>&1; then
              echo "ready=true" >> $GITHUB_OUTPUT
              echo "‚úÖ MCP Server started successfully"
              exit 0
            fi
            echo "‚è≥ Waiting for server to start... (attempt $i/30)"
            sleep 2
          done
          
          echo "‚ùå Server failed to start within timeout"
          echo "ready=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Verify server health
        run: |
          echo "üè• Checking server health..."
          curl -f http://localhost:3002/health | jq '.'
          curl -f http://localhost:3002/mcp/info | jq '.capabilities'

  # Run workflow analysis
  analyze-workflows:
    name: "üìä Analyze Workflows"
    runs-on: ubuntu-latest
    needs: [check-trigger, setup-mcp-server]
    if: |
      needs.check-trigger.outputs.should-run == 'true' && 
      needs.setup-mcp-server.outputs.server-ready == 'true' &&
      contains(fromJSON('["analyze", "validate", "optimize", "report"]'), needs.check-trigger.outputs.action)
    outputs:
      analysis-results: ${{ steps.analysis.outputs.results }}
      validation-results: ${{ steps.validation.outputs.results }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production=false

      - name: Start MCP Server
        run: |
          node mcp-server/coding-agent-mcp-server.js &
          sleep 10 # Wait for server to start

      - name: Run Workflow Analysis
        id: analysis
        run: |
          echo "üîç Running comprehensive workflow analysis..."
          
          # Call analysis endpoint
          ANALYSIS_RESULT=$(curl -s -X POST http://localhost:3002/analyze)
          
          if echo "$ANALYSIS_RESULT" | jq -e '.success' > /dev/null; then
            echo "‚úÖ Analysis completed successfully"
            echo "$ANALYSIS_RESULT" | jq '.summary'
            
            # Save results
            echo "$ANALYSIS_RESULT" > analysis-results.json
            echo "results<<EOF" >> $GITHUB_OUTPUT
            echo "$ANALYSIS_RESULT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Analysis failed"
            echo "$ANALYSIS_RESULT" | jq '.'
            exit 1
          fi

      - name: Run Workflow Validation
        id: validation
        if: contains(fromJSON('["validate", "report"]'), needs.check-trigger.outputs.action)
        run: |
          echo "üß™ Running workflow validation..."
          
          # Call validation endpoint
          VALIDATION_RESULT=$(curl -s -X POST http://localhost:3002/validate)
          
          if echo "$VALIDATION_RESULT" | jq -e '.success' > /dev/null; then
            echo "‚úÖ Validation completed successfully"
            echo "$VALIDATION_RESULT" | jq '.summary'
            
            # Save results
            echo "$VALIDATION_RESULT" > validation-results.json
            echo "results<<EOF" >> $GITHUB_OUTPUT
            echo "$VALIDATION_RESULT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Validation failed"
            echo "$VALIDATION_RESULT" | jq '.'
            exit 1
          fi

      - name: Generate Optimization Plan
        if: needs.check-trigger.outputs.action == 'optimize'
        run: |
          echo "üí° Generating optimization plan..."
          
          OPTIMIZATION_RESULT=$(curl -s http://localhost:3002/optimize)
          
          if echo "$OPTIMIZATION_RESULT" | jq -e '.success' > /dev/null; then
            echo "‚úÖ Optimization plan generated"
            echo "$OPTIMIZATION_RESULT" | jq '.optimizations'
            echo "$OPTIMIZATION_RESULT" > optimization-results.json
          else
            echo "‚ùå Optimization failed"
            echo "$OPTIMIZATION_RESULT" | jq '.'
          fi

      - name: Generate Comprehensive Report
        if: needs.check-trigger.outputs.action == 'report'
        run: |
          echo "üìã Generating comprehensive report..."
          
          REPORT_RESULT=$(curl -s http://localhost:3002/report)
          
          if echo "$REPORT_RESULT" | jq -e '.success' > /dev/null; then
            echo "‚úÖ Report generated successfully"
            echo "$REPORT_RESULT" > comprehensive-report.json
          else
            echo "‚ùå Report generation failed"
            echo "$REPORT_RESULT" | jq '.'
          fi

      - name: Upload Analysis Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coding-agent-analysis-results
          path: |
            *-results.json
          retention-days: 30

  # Apply automated fixes
  apply-fixes:
    name: "üîß Apply Automated Fixes"
    runs-on: ubuntu-latest
    needs: [check-trigger, analyze-workflows]
    if: |
      needs.check-trigger.outputs.should-run == 'true' && 
      needs.check-trigger.outputs.action == 'fix' &&
      always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production=false

      - name: Start MCP Server
        run: |
          node mcp-server/coding-agent-mcp-server.js &
          sleep 10

      - name: Apply Automated Fixes
        run: |
          echo "üîß Applying automated fixes..."
          
          FIX_TYPE="${{ github.event.inputs.fix_type || 'safe' }}"
          TARGET="${{ github.event.inputs.target || '' }}"
          
          FIX_DATA='{"fixType": "'$FIX_TYPE'"'
          if [ -n "$TARGET" ]; then
            FIX_DATA='{"fixType": "'$FIX_TYPE'", "target": "'$TARGET'"}'
          fi
          
          FIX_RESULT=$(curl -s -X POST -H "Content-Type: application/json" \
            -d "$FIX_DATA" http://localhost:3002/fix)
          
          if echo "$FIX_RESULT" | jq -e '.success' > /dev/null; then
            echo "‚úÖ Fixes applied successfully"
            echo "$FIX_RESULT" | jq '.fixes'
            
            # Check if any fixes were applied
            APPLIED_COUNT=$(echo "$FIX_RESULT" | jq '.fixes.applied | length')
            if [ "$APPLIED_COUNT" -gt 0 ]; then
              echo "üìù $APPLIED_COUNT fixes were applied"
              echo "create_pr=true" >> $GITHUB_OUTPUT
            else
              echo "üìù No fixes were applied"
            fi
          else
            echo "‚ùå Fix application failed"
            echo "$FIX_RESULT" | jq '.'
          fi

      - name: Commit and Push Changes
        if: steps.apply-fixes.outputs.create_pr == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add .
          git commit -m "ü§ñ Apply automated workflow fixes
          
          Applied fixes using Coding Agent Workflow MCP Server:
          - Fix type: ${{ github.event.inputs.fix_type || 'safe' }}
          - Target: ${{ github.event.inputs.target || 'all workflows' }}
          
          Generated by workflow: ${{ github.workflow }}
          Run: ${{ github.run_id }}"
          
          git push

  # Post results to PR
  post-results:
    name: "üìù Post Results"
    runs-on: ubuntu-latest
    needs: [check-trigger, analyze-workflows, apply-fixes]
    if: |
      always() && 
      needs.check-trigger.outputs.should-run == 'true' &&
      (needs.check-trigger.outputs.is-comment-trigger == 'true' || github.event_name == 'pull_request')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production=false

      - name: Start MCP Server
        run: |
          node mcp-server/coding-agent-mcp-server.js &
          sleep 10

      - name: Generate PR Comment
        id: comment
        run: |
          echo "üìù Generating PR comment..."
          
          PR_NUMBER="${{ needs.check-trigger.outputs.pr-number }}"
          ACTION="${{ needs.check-trigger.outputs.action }}"
          
          # Trigger PR analysis to generate comment
          TRIGGER_DATA='{"prNumber": '$PR_NUMBER', "action": "'$ACTION'", "user": "${{ github.actor }}"}'
          
          TRIGGER_RESULT=$(curl -s -X POST -H "Content-Type: application/json" \
            -d "$TRIGGER_DATA" http://localhost:3002/trigger)
          
          if echo "$TRIGGER_RESULT" | jq -e '.success' > /dev/null; then
            PR_COMMENT=$(echo "$TRIGGER_RESULT" | jq -r '.trigger.prComment')
            
            echo "comment<<EOF" >> $GITHUB_OUTPUT
            echo "$PR_COMMENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to generate PR comment"
            echo "$TRIGGER_RESULT" | jq '.'
          fi

      - name: Post PR Comment
        if: steps.comment.outputs.comment != ''
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ needs.check-trigger.outputs.pr-number }};
            const comment = `${{ steps.comment.outputs.comment }}`;
            
            if (prNumber && comment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
              
              console.log('‚úÖ Posted PR comment successfully');
            } else {
              console.log('‚ÑπÔ∏è  No PR comment to post');
            }

  # Summary job
  summary:
    name: "üìã Analysis Summary"
    runs-on: ubuntu-latest
    needs: [check-trigger, analyze-workflows, apply-fixes, post-results]
    if: always() && needs.check-trigger.outputs.should-run == 'true'
    steps:
      - name: Generate Job Summary
        run: |
          echo "# ü§ñ Coding Agent Workflow Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: ${{ needs.check-trigger.outputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Setup: ${{ needs.setup-mcp-server.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Analysis: ${{ needs.analyze-workflows.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Fixes: ${{ needs.apply-fixes.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Results: ${{ needs.post-results.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.analyze-workflows.result }}" = "success" ]; then
            echo "‚úÖ **Analysis completed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìä Check the analysis results in the job logs and artifacts." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Analysis encountered issues**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîç Check the job logs for detailed error information." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by Coding Agent Workflow Analysis & Optimization MCP Server*" >> $GITHUB_STEP_SUMMARY