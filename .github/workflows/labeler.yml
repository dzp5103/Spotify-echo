name: GitHub Auto-Labeler

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  label:
    name: Auto-Label PR
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Apply labels based on file changes
      uses: actions/labeler@v5
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        configuration-path: .github/labeler.yml
        sync-labels: true

    - name: Calculate PR size and complexity
      id: pr-stats
      run: |
        # Get PR statistics
        PR_NUMBER=${{ github.event.pull_request.number }}
        
        # Get file changes
        FILES_CHANGED=$(gh pr view $PR_NUMBER --json files --jq '.files | length')
        ADDITIONS=$(gh pr view $PR_NUMBER --json additions --jq '.additions')
        DELETIONS=$(gh pr view $PR_NUMBER --json deletions --jq '.deletions')
        
        echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
        echo "additions=$ADDITIONS" >> $GITHUB_OUTPUT
        echo "deletions=$DELETIONS" >> $GITHUB_OUTPUT
        
        # Calculate complexity score
        COMPLEXITY_SCORE=$(( (FILES_CHANGED * 10) + (ADDITIONS / 10) + (DELETIONS / 20) ))
        echo "complexity_score=$COMPLEXITY_SCORE" >> $GITHUB_OUTPUT
        
        # Determine size label
        TOTAL_CHANGES=$(( ADDITIONS + DELETIONS ))
        if [ $TOTAL_CHANGES -le 10 ]; then
          echo "size_label=size/XS" >> $GITHUB_OUTPUT
        elif [ $TOTAL_CHANGES -le 50 ]; then
          echo "size_label=size/S" >> $GITHUB_OUTPUT
        elif [ $TOTAL_CHANGES -le 200 ]; then
          echo "size_label=size/M" >> $GITHUB_OUTPUT
        elif [ $TOTAL_CHANGES -le 500 ]; then
          echo "size_label=size/L" >> $GITHUB_OUTPUT
        elif [ $TOTAL_CHANGES -le 1000 ]; then
          echo "size_label=size/XL" >> $GITHUB_OUTPUT
        else
          echo "size_label=size/XXL" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Add size label
      uses: actions/github-script@v7
      with:
        script: |
          const sizeLabel = '${{ steps.pr-stats.outputs.size_label }}';
          const prNumber = context.payload.pull_request.number;
          
          // Remove existing size labels
          const existingLabels = await github.rest.issues.listLabelsOnIssue({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber
          });
          
          const sizeLabelsToRemove = existingLabels.data
            .filter(label => label.name.startsWith('size/'))
            .map(label => label.name);
          
          for (const label of sizeLabelsToRemove) {
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              name: label
            });
          }
          
          // Add new size label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            labels: [sizeLabel]
          });

    - name: Add complexity assessment
      if: steps.pr-stats.outputs.complexity_score > 100
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const complexityScore = '${{ steps.pr-stats.outputs.complexity_score }}';
          const filesChanged = '${{ steps.pr-stats.outputs.files_changed }}';
          const additions = '${{ steps.pr-stats.outputs.additions }}';
          const deletions = '${{ steps.pr-stats.outputs.deletions }}';
          
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            labels: ['needs-review', 'complex-changes']
          });
          
          const comment = `## 🔍 PR Complexity Analysis
          
          This PR has been flagged as complex based on the following metrics:
          
          - **Files Changed**: ${filesChanged}
          - **Lines Added**: ${additions}
          - **Lines Deleted**: ${deletions}
          - **Complexity Score**: ${complexityScore}
          
          Please ensure thorough testing and consider breaking this into smaller PRs if possible.
          
          *This analysis was generated automatically by the GitHub Labeler workflow.*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: comment
          });

    - name: Auto-approve documentation changes
      if: contains(github.event.pull_request.labels.*.name, 'auto-merge-ready')
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          
          await github.rest.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber,
            event: 'APPROVE',
            body: '✅ Auto-approved: Documentation or test-only changes detected.'
          });

    - name: Add workflow health check label
      if: contains(github.event.pull_request.changed_files, '.github/workflows/')
      run: |
        gh pr edit ${{ github.event.pull_request.number }} --add-label "workflow-changes" --add-label "needs-testing"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Notify for security-related changes
      if: contains(github.event.pull_request.labels.*.name, 'security')
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            labels: ['security-review-required', 'priority/high']
          });
          
          const comment = `## 🔒 Security Review Required
          
          This PR contains security-related changes and requires additional review.
          
          Security team has been notified for manual review.
          
          *This notification was generated automatically by the GitHub Labeler workflow.*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: comment
          });

    - name: Generate PR summary
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const filesChanged = '${{ steps.pr-stats.outputs.files_changed }}';
          const additions = '${{ steps.pr-stats.outputs.additions }}';
          const deletions = '${{ steps.pr-stats.outputs.deletions }}';
          const sizeLabel = '${{ steps.pr-stats.outputs.size_label }}';
          
          // Get applied labels
          const labels = await github.rest.issues.listLabelsOnIssue({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber
          });
          
          const labelNames = labels.data.map(label => label.name).join(', ');
          
          const summary = `## 📊 Auto-Labeler Summary
          
          **PR Statistics:**
          - Size: ${sizeLabel.replace('size/', '')}
          - Files Changed: ${filesChanged}
          - Lines Added: ${additions}
          - Lines Deleted: ${deletions}
          
          **Applied Labels:** ${labelNames || 'None'}
          
          ---
          *Generated by GitHub Auto-Labeler v5.0*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: summary
          });