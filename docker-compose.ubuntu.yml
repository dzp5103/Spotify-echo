# EchoTune AI - Ubuntu DigitalOcean Docker Compose Configuration
# Production-ready deployment with all services, monitoring, and security features

version: '3.8'

networks:
  echotune-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  echotune-app-data:
    driver: local
  echotune-mcp-data:
    driver: local
  redis-data:
    driver: local
  mongodb-data:
    driver: local
  nginx-ssl:
    driver: local
  nginx-logs:
    driver: local

services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: echotune-redis
    restart: unless-stopped
    networks:
      - echotune-network
    volumes:
      - redis-data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-echotune_redis_2024}
    command: redis-server --requirepass ${REDIS_PASSWORD:-echotune_redis_2024}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-echotune_redis_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MongoDB Database (Optional - for local development)
  mongodb:
    image: mongo:6.0
    container_name: echotune-mongodb
    restart: unless-stopped
    networks:
      - echotune-network
    volumes:
      - mongodb-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME:-echotune}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD:-echotune_mongo_2024}
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Main EchoTune AI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: echotune-app:latest
    container_name: echotune-app
    restart: unless-stopped
    networks:
      - echotune-network
    ports:
      - "3000:3000"
    volumes:
      - echotune-app-data:/app/data
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://:${REDIS_PASSWORD:-echotune_redis_2024}@redis:6379
      - MONGODB_URI=${MONGODB_URI:-mongodb://echotune:echotune_mongo_2024@mongodb:27017/echotune?authSource=admin}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MCP Server for Browser Automation
  mcp-server:
    build:
      context: .
      dockerfile: mcp-server/Dockerfile
    image: echotune-mcp:latest
    container_name: echotune-mcp
    restart: unless-stopped
    networks:
      - echotune-network
    ports:
      - "3001:3001"
    volumes:
      - echotune-mcp-data:/app/data
      - ./logs/mcp:/app/logs
      - ./.env:/app/.env:ro
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://:${REDIS_PASSWORD:-echotune_redis_2024}@redis:6379
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
    depends_on:
      redis:
        condition: service_healthy
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: echotune-nginx
    restart: unless-stopped
    networks:
      - echotune-network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/usr/share/nginx/html/static:ro
      - nginx-ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
      mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: echotune-prometheus
    restart: unless-stopped
    networks:
      - echotune-network
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: echotune-grafana
    restart: unless-stopped
    networks:
      - echotune-network
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-echotune_grafana_2024}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    depends_on:
      - prometheus

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: echotune-loki
    restart: unless-stopped
    networks:
      - echotune-network
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    container_name: echotune-promtail
    restart: unless-stopped
    networks:
      - echotune-network
    volumes:
      - ./logs:/var/log/echotune:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: echotune-node-exporter
    restart: unless-stopped
    networks:
      - echotune-network
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # Watchtower for Automatic Updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: echotune-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400  # Check daily
      - WATCHTOWER_INCLUDE_RESTARTING=true
    command: --interval 86400 --cleanup