# Optimized production Dockerfile for EchoTune AI
# Specifically excludes coding agent tools, dev dependencies, and heavy ML packages
# Designed for minimal resource usage in production deployments

FROM node:20-alpine AS base

# Set production environment early
ENV NODE_ENV=production \
    NPM_CONFIG_AUDIT=false \
    NPM_CONFIG_FUND=false \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Install only essential system dependencies (no dev tools)
RUN apk add --no-cache \
    curl \
    ca-certificates \
    tzdata \
    python3 \
    py3-pip \
    tini \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/*

# Stage 2: Production dependencies only
FROM base AS deps-minimal

WORKDIR /app

# Create minimal package.json (excludes all dev dependencies and coding tools)
COPY package.json package-lock.json* ./

# Filter out development and coding agent dependencies
RUN node -e "
const pkg = require('./package.json');
const prodPkg = {
  name: pkg.name,
  version: pkg.version,
  description: pkg.description + ' (Production Optimized)',
  main: pkg.main,
  scripts: {
    start: pkg.scripts.start || 'node server.js',
    'health-check': 'curl -f http://localhost:3000/health || exit 1'
  },
  dependencies: {
    // Core Express framework
    'express': pkg.dependencies.express,
    'cors': pkg.dependencies.cors,
    'helmet': pkg.dependencies.helmet,
    'compression': pkg.dependencies.compression,
    
    // Essential utilities
    'dotenv': pkg.dependencies.dotenv,
    'uuid': pkg.dependencies.uuid,
    'lodash': pkg.dependencies.lodash,
    'node-fetch': pkg.dependencies['node-fetch'],
    'axios': pkg.dependencies.axios,
    
    // Database support
    'mongodb': pkg.dependencies.mongodb,
    'sqlite3': pkg.dependencies.sqlite3,
    '@supabase/supabase-js': pkg.dependencies['@supabase/supabase-js'],
    
    // File handling
    'multer': pkg.dependencies.multer,
    'csv-parser': pkg.dependencies['csv-parser'],
    
    // WebSocket support
    'socket.io': pkg.dependencies['socket.io'],
    'socket.io-client': pkg.dependencies['socket.io-client'],
    'ws': pkg.dependencies.ws,
    
    // AI/LLM support (core only)
    'openai': pkg.dependencies.openai,
    '@google/generative-ai': pkg.dependencies['@google/generative-ai']
  }
};
require('fs').writeFileSync('package-minimal.json', JSON.stringify(prodPkg, null, 2));
console.log('Created minimal package.json - excluded dev dependencies and coding tools');
" && mv package-minimal.json package.json

# Install only essential production dependencies (no dev tools, no MCP servers, no browser automation)
RUN npm ci --only=production --no-audit --no-fund --ignore-scripts && \
    npm cache clean --force && \
    rm -rf ~/.npm /tmp/* /var/tmp/*

# Install minimal Python dependencies (core functionality only)
COPY requirements-minimal.txt ./requirements.txt
RUN python3 -m venv /app/venv && \
    . /app/venv/bin/activate && \
    pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    find /app/venv -name "*.pyc" -delete && \
    find /app/venv -name "__pycache__" -type d -exec rm -rf {} + || true && \
    rm -rf ~/.cache /tmp/* /var/tmp/*

# Stage 3: Frontend builder (minimal)
FROM node:20-alpine AS frontend-minimal

WORKDIR /app

# Copy minimal package.json for frontend build
COPY package.json ./

# Install only build dependencies (no dev tools)
RUN npm install --only=dev vite @vitejs/plugin-react --no-audit --no-fund 2>/dev/null || echo "No build dependencies needed"

# Copy source files for frontend build
COPY src/ ./src/ 2>/dev/null || mkdir -p src
COPY public/ ./public/ 2>/dev/null || mkdir -p public
COPY index.html ./index.html 2>/dev/null || echo "No index.html"

# Build frontend with fallback
RUN if [ -f "vite.config.js" ] && [ -d "src" ]; then \
        npm run build 2>/dev/null || npm run build:frontend 2>/dev/null || echo "Frontend build not available"; \
    fi && \
    if [ ! -d "dist" ]; then \
        mkdir -p dist && \
        cat > dist/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EchoTune AI - Production Optimized</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
               text-align: center; padding: 50px; 
               background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
               color: white; margin: 0; min-height: 100vh; display: flex; align-items: center; justify-content: center; }
        .container { max-width: 600px; }
        h1 { font-size: 3em; margin-bottom: 20px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
        p { font-size: 1.2em; margin-bottom: 30px; }
        .status { background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; backdrop-filter: blur(10px); }
        .features { text-align: left; margin-top: 20px; }
        .feature { display: flex; align-items: center; margin: 10px 0; }
        .feature::before { content: "âœ…"; margin-right: 10px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸŽµ EchoTune AI</h1>
        <p>Production-Optimized Music Recommendation System</p>
        <div class="status">
            <h3>âœ… System Online (Optimized Build)</h3>
            <p>Your EchoTune AI deployment is running successfully with minimal resource footprint!</p>
            <div class="features">
                <div class="feature">Excluded development dependencies</div>
                <div class="feature">Excluded coding agent tools</div>
                <div class="feature">Excluded heavy ML packages</div>
                <div class="feature">Minimal Docker image size</div>
                <div class="feature">Optimized for production</div>
            </div>
        </div>
    </div>
</body>
</html>
EOF
    fi

# Stage 4: Final production image (ultra-minimal)
FROM base AS production-minimal

# Install minimal runtime dependencies only
RUN apk add --no-cache \
    curl \
    ca-certificates \
    python3 \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S echotune -u 1001 -G nodejs -h /app -s /bin/sh

WORKDIR /app

# Copy minimal dependencies from build stages
COPY --from=deps-minimal --chown=echotune:nodejs /app/node_modules ./node_modules
COPY --from=deps-minimal --chown=echotune:nodejs /app/venv ./venv
COPY --from=frontend-minimal --chown=echotune:nodejs /app/dist ./dist

# Copy only essential application files (exclude dev files, MCP servers, etc.)
COPY --chown=echotune:nodejs src/ ./src/
COPY --chown=echotune:nodejs package.json server.js index.js ./

# Copy minimal configuration files
COPY --chown=echotune:nodejs requirements-minimal.txt ./requirements.txt

# Create essential directories only
RUN mkdir -p logs data && \
    chown -R echotune:nodejs logs data && \
    chmod 755 logs data

# Add Python virtual environment to PATH
ENV PATH="/app/venv/bin:$PATH"

# Production environment variables (minimal and secure)
ENV NODE_ENV=production \
    PORT=3000 \
    NODE_OPTIONS="--max-old-space-size=512" \
    NPM_CONFIG_AUDIT=false \
    NPM_CONFIG_FUND=false \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    UV_THREADPOOL_SIZE=4

# Clean up any remaining unnecessary files
RUN rm -rf /tmp/* /var/tmp/* /root/.npm /home/echotune/.npm 2>/dev/null || true

# Create minimal health check script
RUN cat > /app/health-check.sh << 'EOF' && chmod +x /app/health-check.sh
#!/bin/sh
curl -f --max-time 5 http://localhost:3000/health 2>/dev/null || exit 1
EOF

# Switch to non-root user for security
USER echotune

# Expose port
EXPOSE 3000

# Minimal health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD /app/health-check.sh

# Use tini for proper signal handling
ENTRYPOINT ["tini", "--"]

# Start the application with minimal settings
CMD ["node", "--unhandled-rejections=strict", "src/index.js"]

# Build metadata
ARG BUILD_VERSION=minimal
ARG BUILD_DATE
ARG VCS_REF

LABEL maintainer="EchoTune AI Team" \
      version="${BUILD_VERSION}" \
      build-date="${BUILD_DATE}" \
      vcs-ref="${VCS_REF}" \
      description="EchoTune AI - Production optimized (excludes dev tools, coding agents, heavy ML)" \
      optimization.level="minimal" \
      optimization.excludes="dev-deps,coding-agents,heavy-ml,browser-automation" \
      size.optimized="true" \
      deployment.target="production"