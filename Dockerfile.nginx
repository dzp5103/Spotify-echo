# Multi-stage Nginx container for EchoTune AI - DigitalOcean optimized
FROM nginx:1.24-alpine

# Build arguments for versioning
ARG BUILD_VERSION=latest
ARG BUILD_DATE
ARG VCS_REF
ARG SERVICE_NAME=echotune-nginx
ARG ENVIRONMENT=production

# Environment variables
ENV BACKEND_HOST=app \
    BACKEND_PORT=3000 \
    MCP_HOST=mcp-server \
    MCP_PORT=3001 \
    NGINX_WORKER_PROCESSES=auto \
    NGINX_WORKER_CONNECTIONS=1024

# Add OCI labels for metadata
LABEL org.opencontainers.image.title="EchoTune AI Nginx" \
      org.opencontainers.image.description="High-performance web server and reverse proxy for EchoTune AI" \
      org.opencontainers.image.version=${BUILD_VERSION} \
      org.opencontainers.image.created=${BUILD_DATE} \
      org.opencontainers.image.revision=${VCS_REF} \
      org.opencontainers.image.source="https://github.com/dzp5103/Spotify-echo" \
      org.opencontainers.image.url="https://primosphere.studio" \
      org.opencontainers.image.vendor="EchoTune AI Team" \
      service.name=${SERVICE_NAME} \
      deployment.environment=${ENVIRONMENT}

# Install comprehensive tools
RUN apk add --no-cache \
    certbot \
    certbot-nginx \
    openssl \
    curl \
    jq \
    envsubst \
    tzdata \
    netcat-openbsd \
    logrotate \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create comprehensive directory structure
RUN mkdir -p /etc/nginx/ssl \
    /var/www/html \
    /var/www/certbot \
    /var/log/nginx \
    /etc/letsencrypt \
    /etc/nginx/dhparam \
    /scripts \
    /etc/nginx/conf.d/ssl \
    /var/cache/nginx/client_temp \
    /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp \
    && chmod 755 /var/www/certbot

# Generate optimized DH parameters for perfect forward secrecy
RUN openssl dhparam -out /etc/nginx/dhparam/dhparam.pem 2048

# Create self-signed certificates for development/fallback
RUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout /etc/nginx/ssl/default.key \
    -out /etc/nginx/ssl/default.crt \
    -subj "/C=US/ST=CA/L=San Francisco/O=EchoTune AI/CN=localhost"

# Copy optimized nginx configuration templates
COPY nginx/nginx.conf.template /etc/nginx/nginx.conf.template
COPY nginx/default.conf.template /etc/nginx/conf.d/default.conf.template

# Copy SSL and security configurations
COPY nginx/ssl.conf /etc/nginx/conf.d/ssl/ssl.conf 2>/dev/null || \
    echo "# SSL configuration will be generated" > /etc/nginx/conf.d/ssl/ssl.conf
COPY nginx/security.conf /etc/nginx/conf.d/ssl/security.conf 2>/dev/null || \
    echo "# Security configuration will be generated" > /etc/nginx/conf.d/ssl/security.conf

# Copy enhanced scripts
COPY scripts/ssl-setup.sh /scripts/ssl-setup.sh 2>/dev/null || \
    echo "#!/bin/sh" > /scripts/ssl-setup.sh
COPY scripts/ssl-renew.sh /scripts/ssl-renew.sh 2>/dev/null || \
    echo "#!/bin/sh" > /scripts/ssl-renew.sh
COPY scripts/nginx-start.sh /scripts/nginx-start.sh 2>/dev/null || \
    echo "#!/bin/sh" > /scripts/nginx-start.sh

# Create enhanced nginx startup script
RUN cat > /scripts/nginx-enhanced-start.sh << 'EOF'
#!/bin/sh
set -e

# Default environment variables with intelligent defaults
export DOMAIN=${DOMAIN:-localhost}
export BACKEND_HOST=${BACKEND_HOST:-app}
export BACKEND_PORT=${BACKEND_PORT:-3000}
export MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-10m}
export API_RATE_LIMIT=${API_RATE_LIMIT:-10r/s}
export AUTH_RATE_LIMIT=${AUTH_RATE_LIMIT:-5r/m}
export GENERAL_RATE_LIMIT=${GENERAL_RATE_LIMIT:-20r/s}
export SSL_CERT_PATH=${SSL_CERT_PATH:-/etc/nginx/ssl/default.crt}
export SSL_KEY_PATH=${SSL_KEY_PATH:-/etc/nginx/ssl/default.key}
export LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-admin@${DOMAIN}}

echo "🚀 Starting EchoTune AI Nginx (Enhanced) - Domain: $DOMAIN"

# Intelligent backend health check with timeout
echo "🔍 Checking backend connectivity..."
backend_ready=false
for i in $(seq 1 30); do
    if nc -z $BACKEND_HOST $BACKEND_PORT 2>/dev/null; then
        echo "✅ Backend $BACKEND_HOST:$BACKEND_PORT is ready"
        backend_ready=true
        break
    fi
    echo "⏳ Waiting for backend... ($i/30)"
    sleep 2
done

if [ "$backend_ready" = "false" ]; then
    echo "⚠️ Warning: Backend not accessible, continuing with degraded functionality"
fi

# Generate SSL configurations if missing
if [ ! -f "/etc/nginx/conf.d/ssl/ssl.conf" ]; then
    echo "📝 Generating SSL configuration..."
    cat > /etc/nginx/conf.d/ssl/ssl.conf << 'SSL_EOF'
# Modern SSL Configuration for EchoTune AI
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
ssl_prefer_server_ciphers off;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 1d;
ssl_session_tickets off;
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
ssl_stapling on;
ssl_stapling_verify on;
SSL_EOF
fi

if [ ! -f "/etc/nginx/conf.d/ssl/security.conf" ]; then
    echo "🛡️ Generating security configuration..."
    cat > /etc/nginx/conf.d/ssl/security.conf << 'SEC_EOF'
# Enhanced Security Headers for EchoTune AI
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
add_header X-Frame-Options "DENY" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://accounts.spotify.com https://sdk.scdn.co; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' https://api.spotify.com https://accounts.spotify.com wss: ws:; media-src 'self' https: blob:; object-src 'none'; base-uri 'self'; form-action 'self';" always;
SEC_EOF
fi

# Generate nginx configuration from templates
echo "⚙️ Generating nginx configuration..."
envsubst '${DOMAIN} ${BACKEND_HOST} ${BACKEND_PORT} ${MAX_REQUEST_SIZE} ${API_RATE_LIMIT} ${AUTH_RATE_LIMIT} ${GENERAL_RATE_LIMIT} ${SSL_CERT_PATH} ${SSL_KEY_PATH}' \
    < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf

envsubst '${DOMAIN} ${BACKEND_HOST} ${BACKEND_PORT} ${MAX_REQUEST_SIZE} ${API_RATE_LIMIT} ${AUTH_RATE_LIMIT} ${GENERAL_RATE_LIMIT} ${SSL_CERT_PATH} ${SSL_KEY_PATH}' \
    < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf

# Validate nginx configuration
if ! nginx -t 2>/dev/null; then
    echo "❌ Nginx configuration validation failed!"
    nginx -t
    exit 1
fi

echo "✅ Nginx configuration validated successfully"

# Handle SSL certificate setup for production domains
if [ "$DOMAIN" != "localhost" ] && [ "${DOMAIN#*.nip.io}" = "$DOMAIN" ] && [ "${DOMAIN%.nip.io}" = "$DOMAIN" ]; then
    echo "🔒 Setting up production SSL for domain: $DOMAIN"
    
    if [ ! -f "/etc/nginx/ssl/${DOMAIN}.crt" ] || [ ! -f "/etc/nginx/ssl/${DOMAIN}.key" ]; then
        echo "📜 Obtaining Let's Encrypt certificate..."
        
        # Start nginx temporarily for ACME challenge
        nginx &
        nginx_pid=$!
        sleep 3
        
        # Attempt certificate generation
        if certbot certonly --webroot --webroot-path=/var/www/certbot \
            --email "$LETSENCRYPT_EMAIL" --agree-tos --no-eff-email \
            --non-interactive -d "$DOMAIN" 2>/dev/null; then
            
            # Copy certificates to expected location
            cp "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" "/etc/nginx/ssl/${DOMAIN}.crt"
            cp "/etc/letsencrypt/live/$DOMAIN/privkey.pem" "/etc/nginx/ssl/${DOMAIN}.key"
            
            # Update environment variables
            export SSL_CERT_PATH="/etc/nginx/ssl/${DOMAIN}.crt"
            export SSL_KEY_PATH="/etc/nginx/ssl/${DOMAIN}.key"
            
            echo "✅ SSL certificate obtained and configured"
            
            # Regenerate config with new certificate paths
            envsubst '${DOMAIN} ${BACKEND_HOST} ${BACKEND_PORT} ${MAX_REQUEST_SIZE} ${API_RATE_LIMIT} ${AUTH_RATE_LIMIT} ${GENERAL_RATE_LIMIT} ${SSL_CERT_PATH} ${SSL_KEY_PATH}' \
                < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf
        else
            echo "⚠️ Failed to obtain SSL certificate, using self-signed fallback"
        fi
        
        # Stop temporary nginx
        kill $nginx_pid 2>/dev/null || true
        wait $nginx_pid 2>/dev/null || true
        sleep 2
    else
        echo "✅ SSL certificates already configured"
    fi
    
    # Setup automatic renewal
    echo "🔄 Setting up SSL certificate auto-renewal..."
    echo "0 2 * * 1 certbot renew --quiet --webroot --webroot-path=/var/www/certbot && nginx -s reload" > /etc/crontabs/root
fi

# Final configuration validation
nginx -t || exit 1

echo "🎉 EchoTune AI Nginx is ready to rock!"
echo "🌐 Serving: $DOMAIN"
echo "🔗 Backend: $BACKEND_HOST:$BACKEND_PORT"
echo "🔒 SSL: $([ -f "$SSL_CERT_PATH" ] && echo "Enabled" || echo "Self-signed")"

# Start nginx in foreground
exec nginx -g 'daemon off;'
EOF

# Make all scripts executable
RUN chmod +x /scripts/*.sh

# Create nginx user for enhanced security
RUN addgroup -g 101 -S nginx || true \
    && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx || true

# Set optimized permissions
RUN chown -R nginx:nginx /var/www/html \
    /var/log/nginx \
    /var/cache/nginx \
    && chown -R root:nginx /etc/nginx \
    && chmod 750 /etc/nginx \
    && chmod 755 /var/www/certbot

# Enhanced health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f http://localhost/health 2>/dev/null || curl -f https://localhost/health -k 2>/dev/null || exit 1

# Expose standard HTTP and HTTPS ports
EXPOSE 80 443

# Use enhanced startup script
ENTRYPOINT ["/scripts/nginx-enhanced-start.sh"]