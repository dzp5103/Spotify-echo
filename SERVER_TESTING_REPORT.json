{
  "timestamp": "2025-08-07T02:49:29.721Z",
  "tests": {
    "Docker Installation": {
      "status": "passed",
      "result": {
        "version": "Docker version 28.0.4, build b8034c0",
        "serverVersion": "28.0.4",
        "status": "Docker is running"
      },
      "timestamp": "2025-08-07T02:49:33.038Z"
    },
    "Docker Hub Connection": {
      "status": "passed",
      "result": {
        "status": "Docker Hub accessible",
        "registry": "docker.io",
        "authenticated": false,
        "note": "Public access working, authentication not tested without credentials"
      },
      "timestamp": "2025-08-07T02:49:33.286Z"
    },
    "DigitalOcean doctl Installation": {
      "status": "passed",
      "result": {
        "status": "doctl installed successfully via snap",
        "version": "doctl version 1.135.0-release\nGit commit hash: dc1e1a02",
        "action": "installed"
      },
      "timestamp": "2025-08-07T02:49:50.412Z"
    },
    "DigitalOcean doctl Authentication": {
      "status": "failed",
      "error": "DigitalOcean doctl failed: Command failed: doctl auth init --access-token dop_v1_93f2eee09a1f183f59c82c8e14c5845f26c1adb6c59eec0c12b05f6685373412\nError: Unable to use supplied token to access API: GET https://cloud.digitalocean.com/v1/oauth/token/info: 401 (request \"a9ef437b-b900-4181-9956-b7ce22ae9a4d\") Unable to authenticate you\n",
      "timestamp": "2025-08-07T02:49:50.769Z"
    },
    "DigitalOcean Container Registry": {
      "status": "failed",
      "error": "DO Container Registry failed: Both authentication methods failed. doctl: Failed to get registry token: Command failed: doctl registry docker-config --expiry-seconds 3600\nError: GET https://api.digitalocean.com/v2/registry/docker-credentials?expiry_seconds=3600&read_write=false: 401 (request \"be3d4499-c758-4bc4-880f-bbad3b46a6aa\") Unable to authenticate you\n, credentials: Command failed: echo \"dop_v1_be1d6c7989e8f51fefbae284c017fa7eaeea5d230e59d7c399b220d4677652c7\" | docker login registry.digitalocean.com --username \"barrunmail@gmail.com\" --password-stdin\nError response from daemon: Get \"https://registry.digitalocean.com/v2/\": unauthorized: authentication required\n",
      "timestamp": "2025-08-07T02:49:51.226Z"
    },
    "DigitalOcean App Platform": {
      "status": "failed",
      "error": "DO App Platform failed: Command failed: doctl apps list\nError: GET https://api.digitalocean.com/v2/apps?page=1&per_page=200: 401 (request \"d6f581d2-a954-4a7e-8f9f-b897afa2c57b\") Unable to authenticate you\n",
      "timestamp": "2025-08-07T02:49:51.409Z"
    },
    "DigitalOcean Droplets": {
      "status": "failed",
      "error": "DO Droplets failed: Command failed: doctl compute droplet list\nError: GET https://api.digitalocean.com/v2/droplets?page=1&per_page=200: 401 (request \"a8ebff48-355f-4781-96de-15367e5c1e77\") Unable to authenticate you\n",
      "timestamp": "2025-08-07T02:49:51.564Z"
    },
    "DigitalOcean Kubernetes": {
      "status": "failed",
      "error": "DO Kubernetes failed: Command failed: doctl kubernetes cluster list\nError: GET https://api.digitalocean.com/v2/kubernetes/clusters?page=1&per_page=200: 401 (request \"13b42281-8179-4a7a-a272-207aa7f458e2\") Unable to authenticate you\n",
      "timestamp": "2025-08-07T02:49:51.724Z"
    },
    "DigitalOcean Spaces": {
      "status": "passed",
      "result": {
        "spaces": "The subcommands under `doctl compute` are for managing DigitalOcean resources.\n\nUsage:\n  doctl compute [command]\n\nAvailable Commands:\n  action             Display commands for retrieving resource action history\n  cdn                Display commands that manage CDNs\n  certificate        Display commands that manage SSL certificates and private keys\n  domain             Display commands that manage domains\n  droplet            Manage virtual machines (Droplets)\n  droplet-action     Display Droplet action commands\n  droplet-autoscale  Display commands to manage Droplet autoscale pools\n  firewall           Display commands to manage cloud firewalls\n  image              Display commands to manage images\n  image-action       Display commands to perform actions on images\n  load-balancer      Display commands to manage load balancers\n  region             Display commands to list datacenter regions\n  reserved-ip        Display commands to manage reserved IP addresses\n  reserved-ip-action Display commands to associate reserved IP addresses with Droplets\n  reserved-ipv6      Display commands to manage reserved IPv6 addresses\n  size               List available Droplet sizes\n  snapshot           Access and manage snapshots\n  ssh                Access a Droplet using SSH\n  ssh-key            Display commands to manage SSH keys on your account\n  tag                Display commands to manage tags\n  volume             Display commands to manage block storage volumes\n  volume-action      Display commands to perform actions on a volume\n\nFlags:\n  -h, --help   help for compute\n\nGlobal Flags:\n  -t, --access-token string   API V2 access token\n  -u, --api-url string        Override default API endpoint\n  -c, --config string         Specify a custom config file (default \"/home/runner/.config/doctl/config.yaml\")\n      --context string        Specify a custom authentication context name\n      --http-retry-max int    Set maximum number of retries for requests that fail with a 429 or 500-level error (default 5)\n      --interactive           Enable interactive behavior. Defaults to true if the terminal supports it (default false)\n  -o, --output string         Desired output format [text|json] (default \"text\")\n      --trace                 Show a log of network activity while performing a command\n  -v, --verbose               Enable verbose output\n\nUse \"doctl compute [command] --help\" for more information about a command.",
        "status": "DigitalOcean Spaces accessible",
        "note": "Can manage object storage"
      },
      "timestamp": "2025-08-07T02:49:51.783Z"
    },
    "GitHub Container Registry": {
      "status": "passed",
      "result": {
        "status": "GitHub Container Registry accessible",
        "registry": "ghcr.io",
        "authenticated": false,
        "note": "Public access working, requires GITHUB_TOKEN for authentication"
      },
      "timestamp": "2025-08-07T02:49:51.932Z"
    },
    "AWS ECR": {
      "status": "passed",
      "result": {
        "status": "AWS CLI available",
        "registry": "ECR ready for configuration",
        "note": "Requires AWS credentials configuration"
      },
      "timestamp": "2025-08-07T02:49:54.847Z"
    },
    "Azure ACR": {
      "status": "passed",
      "result": {
        "status": "Azure CLI available",
        "registry": "ACR ready for configuration",
        "note": "Requires Azure credentials configuration"
      },
      "timestamp": "2025-08-07T02:49:57.880Z"
    },
    "Google GCR": {
      "status": "passed",
      "result": {
        "status": "Google Cloud CLI available",
        "registry": "GCR ready for configuration",
        "note": "Requires Google Cloud credentials configuration"
      },
      "timestamp": "2025-08-07T02:50:01.485Z"
    }
  },
  "summary": {
    "total": 13,
    "passed": 8,
    "failed": 5
  }
}